{"title":"$:/plugins/linonetwo/service-worker","description":"Use service worker to cache content, make it works even offline, and can be add to the desktop as an App.","author":"LinOnetwo","core-version":">=5.1.22","plugin-type":"plugin","version":"0.0.1","list":"readme","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/linonetwo/service-worker/load-service-worker.html\":{\"title\":\"$:/plugins/linonetwo/service-worker/load-service-worker.html\",\"text\":\"<link rel=\\\"manifest\\\" href=\\\"manifest.webmanifest\\\" />\\r\\n\\r\\n<script type=\\\"text/javascript\\\">\\r\\n  const isLocalhost = Boolean(\\r\\n    window.location.hostname === 'localhost' ||\\r\\n      // [::1] is the IPv6 localhost address.\\r\\n      window.location.hostname === '[::1]' ||\\r\\n      // 127.0.0.0/8 are considered localhost for IPv4.\\r\\n      window.location.hostname.match(/^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\\r\\n  );\\r\\n\\r\\n  function register(config) {\\r\\n    if ('serviceWorker' in navigator) {\\r\\n      window.addEventListener('load', () => {\\r\\n        const swUrl = 'service-worker.js';\\r\\n\\r\\n        if (isLocalhost) {\\r\\n          // This is running on localhost. Let's do additional checks to see if a service worker still exists or not.\\r\\n          checkValidServiceWorker(swUrl, config);\\r\\n\\r\\n          // Add some additional logging to localhost, pointing developers to the\\r\\n          // service worker/PWA documentation.\\r\\n          navigator.serviceWorker.ready.then(() => {\\r\\n            console.log(\\r\\n              'This web app is being served cache-first by a service ' +\\r\\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\\r\\n            );\\r\\n          });\\r\\n        } else {\\r\\n          // Is not localhost. Just register service worker\\r\\n          console.log('Register service worker');\\r\\n          registerValidSW(swUrl, config);\\r\\n        }\\r\\n      });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function registerValidSW(swUrl, config) {\\r\\n    navigator.serviceWorker\\r\\n      .register(swUrl)\\r\\n      .then((registration) => {\\r\\n        console.log('Service worker is speeding up this wiki.')\\r\\n        registration.onupdatefound = () => {\\r\\n          console.log('New content is found, prepare to fetch', registration);\\r\\n          const installingWorker = registration.installing;\\r\\n          if (installingWorker == null) {\\r\\n            return;\\r\\n          }\\r\\n          installingWorker.onstatechange = () => {\\r\\n            if (installingWorker.state === 'installed') {\\r\\n              if (navigator.serviceWorker.controller) {\\r\\n                // At this point, the updated precached content has been fetched,\\r\\n                // but normally the previous service worker will still serve the older\\r\\n                // content until all client tabs are closed.\\r\\n                // but we have set self.skipWaiting() in the service worker, so just inform user to reload the page to take effect.\\r\\n                console.log('New content is available and will be used when after refresh or refetch');\\r\\n\\r\\n                // Execute callback, prepare an info to inform user refresh here.\\r\\n                if (config && config.onUpdate) {\\r\\n                  config.onUpdate(registration);\\r\\n                }\\r\\n              } else {\\r\\n                // At this point, everything has been precached.\\r\\n                // It's the perfect time to display a\\r\\n                // \\\"Content is cached for offline use.\\\" message.\\r\\n                console.log('Content is cached for offline use.');\\r\\n\\r\\n                // Execute callback\\r\\n                if (config && config.onSuccess) {\\r\\n                  config.onSuccess(registration);\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          };\\r\\n        };\\r\\n      })\\r\\n      .catch((error) => {\\r\\n        console.error('Error during service worker registration:', error);\\r\\n      });\\r\\n  }\\r\\n\\r\\n  function checkValidServiceWorker(swUrl, config) {\\r\\n    // Check if the service worker can be found. If it can't reload the page.\\r\\n    fetch(swUrl, {\\r\\n      headers: { 'Service-Worker': 'script' },\\r\\n    })\\r\\n      .then((response) => {\\r\\n        // Ensure service worker exists, and that we really are getting a JS file.\\r\\n        const contentType = response.headers.get('content-type');\\r\\n        if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\\r\\n          // No service worker found. Probably a different app. Reload the page.\\r\\n          navigator.serviceWorker.ready.then((registration) => {\\r\\n            registration.unregister().then(() => {\\r\\n              window.location.reload();\\r\\n            });\\r\\n          });\\r\\n        } else {\\r\\n          // Service worker found. Proceed as normal.\\r\\n          registerValidSW(swUrl, config);\\r\\n        }\\r\\n      })\\r\\n      .catch(() => {\\r\\n        console.log('No internet connection found. App is running in offline mode.');\\r\\n      });\\r\\n  }\\r\\n\\r\\n  function unregister() {\\r\\n    if ('serviceWorker' in navigator) {\\r\\n      navigator.serviceWorker.ready\\r\\n        .then((registration) => {\\r\\n          registration.unregister();\\r\\n        })\\r\\n        .catch((error) => {\\r\\n          console.error(error.message);\\r\\n        });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function informUserToReloadToGetLatestContent() {\\r\\n    const body = document.querySelector('body');\\r\\n    const infoElement = document.createElement('div');\\r\\n    infoElement.className = 'ask-user-reload';\\r\\n    infoElement.innerHTML =\\r\\n      navigator.language === 'zh-CN'\\r\\n        ? '新内容已准备好，点击此处刷新页面更新到新版。'\\r\\n        : 'New content available. Click here to Refresh this page to get update.';\\r\\n    infoElement.onclick = () => location.reload();\\r\\n    infoElement.onKeyDown = () => location.reload();\\r\\n    infoElement.tabindex = 1;\\r\\n    infoElement.role = 'button';\\r\\n\\r\\n    const closeElement = document.createElement('div');\\r\\n    closeElement.className = 'ask-user-reload-close';\\r\\n    closeElement.innerHTML = navigator.language === 'zh-CN' ? '关闭 ×' : 'close ×';\\r\\n    closeElement.onclick = () => body.removeChild(infoElement);\\r\\n    closeElement.onKeyDown = () => body.removeChild(infoElement);\\r\\n    closeElement.tabindex = 0;\\r\\n    closeElement.role = 'button';\\r\\n    infoElement.appendChild(closeElement);\\r\\n\\r\\n    body.appendChild(infoElement);\\r\\n  }\\r\\n\\r\\n  register({ onUpdate: informUserToReloadToGetLatestContent });\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n  .ask-user-reload {\\r\\n    padding: 25px;\\r\\n    position: absolute;\\r\\n    bottom: 10px;\\r\\n    right: 5px;\\r\\n    background: wheat;\\r\\n    z-index: 9999;\\r\\n    cursor: alias;\\r\\n  }\\r\\n  .ask-user-reload-close {\\r\\n    padding: 5px;\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    right: 0;\\r\\n    cursor: pointer;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n</style>\\r\\n\",\"type\":\"text/html\",\"creator\":\"LinOnetwo\",\"tags\":\"$:/tags/RawMarkup\"},\"$:/plugins/linonetwo/service-worker/readme\":{\"title\":\"$:/plugins/linonetwo/service-worker/readme\",\"created\":\"20200414135748497\",\"modified\":\"20200602062349232\",\"creator\":\"LinOnetwo\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!! Usage\\n\\nAfter install, you have to publish your wiki as a HTTPS website to make it work.\\n\\n!!! Make sure to include all necessary step in the build process\\n\\nAdd following files to your `/public` folder after build, you can use a script to copy them to the build folder after the wiki build process:\\n\\n1. Add a `manifest.webmanifest` like:\\n\\n```json\\r\\n{\\r\\n  \\\"background_color\\\": \\\"white\\\",\\r\\n  \\\"theme_color\\\": \\\"white\\\",\\r\\n  \\\"description\\\": \\\"Meme of LinOnetwo 林一二的模因和想法 - TiddlyWiki 非线性的知识库和博客\\\",\\r\\n  \\\"display\\\": \\\"standalone\\\",\\r\\n  \\\"icons\\\": [\\r\\n    {\\r\\n      \\\"src\\\": \\\"/TiddlyWikiIconBlack.png\\\",\\r\\n      \\\"sizes\\\": \\\"256x256\\\",\\r\\n      \\\"type\\\": \\\"image/png\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"src\\\": \\\"/TiddlyWikiIconWhite.png\\\",\\r\\n      \\\"sizes\\\": \\\"144x144\\\",\\r\\n      \\\"type\\\": \\\"image/png\\\"\\r\\n    }\\r\\n  ],\\r\\n  \\\"name\\\": \\\"TiddlyWiki\\\",\\r\\n  \\\"short_name\\\": \\\"Wiki\\\",\\r\\n  \\\"lang\\\": \\\"zh-CN\\\",\\r\\n  \\\"start_url\\\": \\\"/\\\",\\r\\n  \\\"scope\\\": \\\"/\\\"\\r\\n}\\r\\n```\\n\\nMake sure icon size is at least 144x144. And change all necessary fields.\\n\\n2. Add `service-worker.js`:\\n\\nSee [[https://github.com/linonetwo/Meme-of-LinOnetwo/public/service-worker.js|https://github.com/linonetwo/Meme-of-LinOnetwo/blob/d088f72a2b95ee21b68af1b349d9993a3997bf19/Meme-of-LinOnetwo/public/service-worker.js]] for example.\\n\\n!!! Config router\\n\\nSometimes request from this plugin to your `service-worker.js` will resulted in 404, this is basically because you are not putting `service-worker.js` just besides your `index.html`, or the router config is wrong.\\r\\n\"}}}"}