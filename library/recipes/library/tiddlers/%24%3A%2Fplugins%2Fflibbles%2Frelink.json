{"name":"Relink","title":"$:/plugins/flibbles/relink","description":"Flexibility when relinking renamed tiddlers","author":"Flibbles","version":"2.0.0","core-version":">=5.1.22","source":"https://github.com/flibbles/tw5-relink","demo":"http://flibbles.github.io/tw5-relink/","list":"readme configuration license","dependents":"","plugin-type":"plugin","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/flibbles/relink/js/bulkops.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: startup\\r\\n\\r\\nReplaces the relinkTiddler defined in $:/core/modules/wiki-bulkops.js\\r\\n\\r\\nThis is a startup instead of a wikimethods module-type because it's the only\\r\\nway to ensure this runs after the old relinkTiddler method is applied.\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: false, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\r\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\r\\n\\r\\nexports.name = \\\"redefine-relinkTiddler\\\";\\r\\nexports.synchronous = true;\\r\\n// load-modules is when wikimethods are applied in\\r\\n// ``$:/core/modules/startup/load-modules.js``\\r\\nexports.after = ['load-modules'];\\r\\n\\r\\nexports.startup = function() {\\r\\n\\t$tw.Wiki.prototype.relinkTiddler = relinkTiddler;\\r\\n};\\r\\n\\r\\n/** Walks through all relinkable tiddlers and relinks them.\\r\\n *  This replaces the existing function in core Tiddlywiki.\\r\\n */\\r\\nfunction relinkTiddler(fromTitle, toTitle, options) {\\r\\n\\toptions = options || {};\\r\\n\\tvar failures = [];\\r\\n\\tvar indexer = utils.getIndexer(this);\\r\\n\\tvar records = indexer.relinkLookup(fromTitle, toTitle, options);\\r\\n\\tfor (var title in records) {\\r\\n\\t\\tvar entries = records[title],\\r\\n\\t\\t\\tchanges = Object.create(null),\\r\\n\\t\\t\\tupdate = false,\\r\\n\\t\\t\\tfails = false;\\r\\n\\t\\tfor (var field in entries) {\\r\\n\\t\\t\\tvar entry = entries[field];\\r\\n\\t\\t\\tfails = fails || entry.impossible;\\r\\n\\t\\t\\tif (entry.output) {\\r\\n\\t\\t\\t\\tchanges[field] = entry.output;\\r\\n\\t\\t\\t\\tupdate = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (fails) {\\r\\n\\t\\t\\tfailures.push(title);\\r\\n\\t\\t}\\r\\n\\t\\t// If any fields changed, update tiddler\\r\\n\\t\\tif (update) {\\r\\n\\t\\t\\tconsole.log(\\\"Renaming '\\\"+fromTitle+\\\"' to '\\\"+toTitle+\\\"' in '\\\" + title + \\\"'\\\");\\r\\n\\r\\n\\t\\t\\tvar tiddler = this.getTiddler(title);\\r\\n\\t\\t\\tvar newTiddler = new $tw.Tiddler(tiddler,changes,this.getModificationFields())\\r\\n\\t\\t\\tnewTiddler = $tw.hooks.invokeHook(\\\"th-relinking-tiddler\\\",newTiddler,tiddler);\\r\\n\\t\\t\\tthis.addTiddler(newTiddler);\\r\\n\\t\\t\\t// If the title changed, we need to perform a nested rename\\r\\n\\t\\t\\tif (newTiddler.fields.title !== title) {\\r\\n\\t\\t\\t\\tthis.deleteTiddler(title);\\r\\n\\t\\t\\t\\tthis.relinkTiddler(title, newTiddler.fields.title,options);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\tif (failures.length > 0) {\\r\\n\\t\\tvar options = $tw.utils.extend(\\r\\n\\t\\t\\t{ variables: {to: toTitle, from: fromTitle},\\r\\n\\t\\t\\t  wiki: this},\\r\\n\\t\\t\\toptions );\\r\\n\\t\\tlanguage.reportFailures(failures, options);\\r\\n\\t}\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\"module-type\":\"startup\",\"title\":\"$:/plugins/flibbles/relink/js/bulkops.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/indexer.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: indexer\\r\\n\\r\\nIndexes results from tiddler reference reports so we don't have to call them\\r\\nso much.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\nvar TiddlerContext = utils.getContext('tiddler');\\r\\n\\r\\nfunction Indexer(wiki) {\\r\\n\\tthis.wiki = wiki;\\r\\n};\\r\\n\\r\\nIndexer.prototype.init = function() {\\r\\n\\tthis.rebuild();\\r\\n};\\r\\n\\r\\nIndexer.prototype.rebuild = function() {\\r\\n\\tthis.index = null;\\r\\n\\tthis.backIndex = null;\\r\\n\\tthis.contexts = Object.create(null);\\r\\n\\tthis.changedTiddlers = undefined;\\r\\n\\tthis.lastRelinkFrom = undefined;\\r\\n};\\r\\n\\r\\nIndexer.prototype.update = function(updateDescriptor) {\\r\\n\\tif (!this.index) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tvar title;\\r\\n\\tif (!this.changedTiddlers) {\\r\\n\\t\\tthis.changedTiddlers = Object.create(null);\\r\\n\\t}\\r\\n\\tif (updateDescriptor.old.exists) {\\r\\n\\t\\ttitle = updateDescriptor.old.tiddler.fields.title;\\r\\n\\t\\tthis.changedTiddlers[title] = {deleted: true};\\r\\n\\t\\tthis._purge(title);\\r\\n\\t}\\r\\n\\tif (updateDescriptor['new'].exists) {\\r\\n\\t\\t// If its the same tiddler as old, this overrides the 'deleted' entry\\r\\n\\t\\ttitle = updateDescriptor['new'].tiddler.fields.title;\\r\\n\\t\\tthis.changedTiddlers[title] = {modified: true};\\r\\n\\t}\\r\\n};\\r\\n\\r\\nIndexer.prototype.lookup = function(title) {\\r\\n\\tthis._upkeep();\\r\\n\\treturn this.index[title];\\r\\n};\\r\\n\\r\\nIndexer.prototype.reverseLookup = function(title) {\\r\\n\\tthis._upkeep();\\r\\n\\treturn this.backIndex[title] || Object.create(null);\\r\\n};\\r\\n\\r\\nIndexer.prototype.relinkLookup = function(fromTitle, toTitle, options) {\\r\\n\\tthis._upkeep();\\r\\n\\tvar shortlist = undefined;\\r\\n\\tif (this.lastRelinkFrom === fromTitle) {\\r\\n\\t\\tif (this.lastRelinkTo === toTitle) {\\r\\n\\t\\t\\t// We need to reintroduce the relink cache, where temporary info\\r\\n\\t\\t\\t// was stored.\\r\\n\\t\\t\\toptions.cache = this.lastRelinkCache;\\r\\n\\t\\t\\treturn this.lastRelinkResult;\\r\\n\\t\\t}\\r\\n\\t\\tshortlist = Object.keys(this.lastRelinkResult);\\r\\n\\t}\\r\\n\\tthis.lastRelinkResult = utils.getRelinkResults(this.wiki, fromTitle, toTitle, this.context, shortlist, options);\\r\\n\\tthis.lastRelinkTo = toTitle;\\r\\n\\tthis.lastRelinkFrom = fromTitle;\\r\\n\\tthis.lastRelinkCache = options.cache;\\r\\n\\treturn this.lastRelinkResult;\\r\\n};\\r\\n\\r\\nIndexer.prototype._upkeep = function() {\\r\\n\\tvar title;\\r\\n\\tif (this.changedTiddlers && (this.context.changed(this.changedTiddlers) || this.context.parent.changed(this.changedTiddlers))) {\\r\\n\\t\\t// If global macro context or whitelist context changed, wipe all\\r\\n\\t\\tthis.rebuild();\\r\\n\\t}\\r\\n\\tif (!this.index) {\\r\\n\\t\\tthis.index = Object.create(null);\\r\\n\\t\\tthis.backIndex = Object.create(null);\\r\\n\\t\\tthis.context = utils.getWikiContext(this.wiki);\\r\\n\\t\\tvar titles = this.wiki.getRelinkableTitles();\\r\\n\\t\\tfor (var i = 0; i < titles.length; i++) {\\r\\n\\t\\t\\tthis._populate(titles[i]);\\r\\n\\t\\t};\\r\\n\\t} else if (this.changedTiddlers) {\\r\\n\\t\\t// If there are cached changes, we apply them now.\\r\\n\\t\\tfor (title in this.contexts) {\\r\\n\\t\\t\\tvar tiddlerContext = this.contexts[title];\\r\\n\\t\\t\\tif (tiddlerContext.changed(this.changedTiddlers)) {\\r\\n\\t\\t\\t\\tthis._purge(title);\\r\\n\\t\\t\\t\\tthis._populate(title);\\r\\n\\t\\t\\t\\tthis._dropResults(title);\\r\\n\\t\\t\\t\\t// Wipe this change, so we don't risk updating it twice.\\r\\n\\t\\t\\t\\tthis.changedTiddlers[title] = undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tfor (title in this.changedTiddlers) {\\r\\n\\t\\t\\tvar change = this.changedTiddlers[title];\\r\\n\\t\\t\\tif (change && change.modified) {\\r\\n\\t\\t\\t\\tthis._purge(title);\\r\\n\\t\\t\\t\\tthis._populate(title);\\r\\n\\t\\t\\t\\tthis._dropResults(title);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tthis.changedTiddlers = undefined;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nIndexer.prototype._purge = function(title) {\\r\\n\\tfor (var entry in this.index[title]) {\\r\\n\\t\\tdelete this.backIndex[entry][title];\\r\\n\\t}\\r\\n\\tdelete this.contexts[title];\\r\\n\\tdelete this.index[title];\\r\\n};\\r\\n\\r\\n// This drops the cached relink results if unsanctioned tiddlers were changed\\r\\nIndexer.prototype._dropResults = function(title) {\\r\\n\\tvar tiddler = this.wiki.getTiddler(title);\\r\\n\\tif (title !== this.lastRelinkFrom\\r\\n\\t&& title !== this.lastRelinkTo\\r\\n\\t&& (!tiddler\\r\\n\\t\\t|| !$tw.utils.hop(tiddler.fields, 'draft.of') // is a draft\\r\\n\\t\\t|| tiddler.fields['draft.of'] !== this.lastRelinkFrom // draft of target\\r\\n\\t\\t|| references(this.index[title], this.lastRelinkFrom))) { // draft references target\\r\\n\\t\\t// This is not the draft of the last relinked title,\\r\\n\\t\\t// so our cached results should be wiped.\\r\\n\\t\\tthis.lastRelinkFrom = undefined;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nfunction references(list, item) {\\r\\n\\treturn list !== undefined && list[item];\\r\\n};\\r\\n\\r\\nIndexer.prototype._populate = function(title) {\\r\\n\\t// Fetch the report for a title, and populate the indexes with result\\r\\n\\tvar tiddlerContext = new TiddlerContext(this.wiki, this.context, title);\\r\\n\\tvar references = utils.getTiddlerRelinkReferences(this.wiki, title, tiddlerContext);\\r\\n\\tthis.index[title] = references;\\r\\n\\tif (tiddlerContext.hasImports()) {\\r\\n\\t\\tthis.contexts[title] = tiddlerContext;\\r\\n\\t}\\r\\n\\tfor (var ref in references) {\\r\\n\\t\\tthis.backIndex[ref] = this.backIndex[ref] || Object.create(null);\\r\\n\\t\\tthis.backIndex[ref][title] = references[ref];\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.RelinkIndexer = Indexer;\\r\\n\",\"module-type\":\"indexer\",\"title\":\"$:/plugins/flibbles/relink/js/indexer.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/language.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: library\\r\\n\\r\\nThis handles all logging and alerts Relink emits.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.getString = function(title, options) {\\r\\n\\ttitle = \\\"$:/plugins/flibbles/relink/language/\\\" + title;\\r\\n\\treturn options.wiki.renderTiddler(\\\"text/plain\\\", title, options);\\r\\n};\\r\\n\\r\\nvar logger;\\r\\n\\r\\nexports.reportFailures = function(failureList, options) {\\r\\n\\tif (!logger) {\\r\\n\\t\\tlogger = new $tw.utils.Logger(\\\"Relinker\\\");\\r\\n\\t}\\r\\n\\tvar alertString = this.getString(\\\"Error/ReportFailedRelinks\\\", options)\\r\\n\\tvar alreadyReported = Object.create(null);\\r\\n\\tvar reportList = [];\\r\\n\\t$tw.utils.each(failureList, function(f) {\\r\\n\\t\\tif (!alreadyReported[f]) {\\r\\n\\t\\t\\tif ($tw.browser) {\\r\\n\\t\\t\\t\\t// This might not make the link if the title is complicated.\\r\\n\\t\\t\\t\\t// Whatever.\\r\\n\\t\\t\\t\\treportList.push(\\\"\\\\n* [[\\\" + f + \\\"]]\\\");\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treportList.push(\\\"\\\\n* \\\" + f);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\talreadyReported[f] = true;\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\tlogger.alert(alertString + \\\"\\\\n\\\" + reportList.join(\\\"\\\"));\\r\\n};\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/language.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/mangler.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: widget\\r\\n\\r\\nCreates a mangler widget for field validation. This isn't meant to be used\\r\\nby the user. It's only used in Relink configuration.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\r\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\r\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\r\\n\\r\\nvar RelinkManglerWidget = function(parseTreeNode,options) {\\r\\n\\tthis.initialise(parseTreeNode,options);\\r\\n\\tthis.addEventListeners([\\r\\n\\t\\t{type: \\\"relink-add-field\\\", handler: \\\"handleAddFieldEvent\\\"},\\r\\n\\t\\t{type: \\\"relink-add-operator\\\", handler: \\\"handleAddOperatorEvent\\\"},\\r\\n\\t\\t{type: \\\"relink-add-parameter\\\", handler: \\\"handleAddParameterEvent\\\"},\\r\\n\\t\\t{type: \\\"relink-add-attribute\\\", handler: \\\"handleAddAttributeEvent\\\"}\\r\\n\\t]);\\r\\n};\\r\\n\\r\\nexports.relinkmangler = RelinkManglerWidget;\\r\\n\\r\\nRelinkManglerWidget.prototype = new Widget();\\r\\n\\r\\n// This wraps alert so it can be monkeypatched during testing.\\r\\nRelinkManglerWidget.prototype.alert = function(message) {\\r\\n\\talert(message);\\r\\n};\\r\\n\\r\\nRelinkManglerWidget.prototype.handleAddFieldEvent = function(event) {\\r\\n\\tvar param = event.paramObject;\\r\\n\\tif (typeof param !== \\\"object\\\" || !param.field) {\\r\\n\\t\\t// Can't handle it.\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\tvar trimmedName = param.field.toLowerCase().trim();\\r\\n\\tif (!trimmedName) {\\r\\n\\t\\t// Still can't handle it, but don't warn.\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\tif(!$tw.utils.isValidFieldName(trimmedName)) {\\r\\n\\t\\tthis.alert($tw.language.getString(\\r\\n\\t\\t\\t\\\"InvalidFieldName\\\",\\r\\n\\t\\t\\t{variables:\\r\\n\\t\\t\\t\\t{fieldName: trimmedName}\\r\\n\\t\\t\\t}\\r\\n\\t\\t));\\r\\n\\t} else {\\r\\n\\t\\tadd(this.wiki, \\\"fields\\\", trimmedName);\\r\\n\\t}\\r\\n\\treturn true;\\r\\n};\\r\\n\\r\\n/**Not much validation, even though there are definitely illegal\\r\\n * operator names. If you input on, Relink won't relink it, but it\\r\\n * won't choke on it either. Tiddlywiki will...\\r\\n */\\r\\nRelinkManglerWidget.prototype.handleAddOperatorEvent = function(event) {\\r\\n\\tvar param = event.paramObject;\\r\\n\\tif (param) {\\r\\n\\t\\tadd(this.wiki, \\\"operators\\\", param.operator);\\r\\n\\t}\\r\\n\\treturn true;\\r\\n};\\r\\n\\r\\nRelinkManglerWidget.prototype.handleAddParameterEvent = function(event) {\\r\\n\\tvar param = event.paramObject;\\r\\n\\tif (param && param.macro && param.parameter) {\\r\\n\\t\\tif (/\\\\s/.test(param.macro.trim())) {\\r\\n\\t\\t\\tthis.alert(language.getString(\\r\\n\\t\\t\\t\\t\\\"Error/InvalidMacroName\\\",\\r\\n\\t\\t\\t\\t{ variables: {macroName: param.macro},\\r\\n\\t\\t\\t\\t  wiki: this.wiki\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t));\\r\\n\\t\\t} else if (/[ \\\\/]/.test(param.parameter.trim())) {\\r\\n\\t\\t\\tthis.alert(language.getString(\\r\\n\\t\\t\\t\\t\\\"Error/InvalidParameterName\\\",\\r\\n\\t\\t\\t\\t{ variables: {parameterName: param.parameter},\\r\\n\\t\\t\\t\\t  wiki: this.wiki\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tadd(this.wiki, \\\"macros\\\", param.macro, param.parameter);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true;\\r\\n};\\r\\n\\r\\nRelinkManglerWidget.prototype.handleAddAttributeEvent = function(event) {\\r\\n\\tvar param = event.paramObject;\\r\\n\\tif (param && param.element && param.attribute) {\\r\\n\\t\\tif (/[ \\\\/]/.test(param.element.trim())) {\\r\\n\\t\\t\\tthis.alert(language.getString(\\r\\n\\t\\t\\t\\t\\\"Error/InvalidElementName\\\",\\r\\n\\t\\t\\t\\t{ variables: {elementName: param.element},\\r\\n\\t\\t\\t\\t  wiki: this.wiki\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t));\\r\\n\\t\\t} else if (/[ \\\\/]/.test(param.attribute.trim())) {\\r\\n\\t\\t\\tthis.alert(language.getString(\\r\\n\\t\\t\\t\\t\\\"Error/InvalidAttributeName\\\",\\r\\n\\t\\t\\t\\t{ variables: {attributeName: param.attribute},\\r\\n\\t\\t\\t\\t  wiki: this.wiki\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tadd(this.wiki, \\\"attributes\\\", param.element, param.attribute);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true;\\r\\n};\\r\\n\\r\\nfunction add(wiki, category/*, path parts*/) {\\r\\n\\tvar path = \\\"$:/config/flibbles/relink/\\\" + category;\\r\\n\\tfor (var x = 2; x < arguments.length; x++) {\\r\\n\\t\\tvar part = arguments[x];\\r\\n\\t\\t// Abort if it's falsy, or only whitespace. Also, trim spaces\\r\\n\\t\\tif (!part || !(part = part.trim())) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tpath = path + \\\"/\\\" + part;\\r\\n\\t}\\r\\n\\tvar def = utils.getDefaultType(wiki);\\r\\n\\twiki.addTiddler({title: path, text: def});\\r\\n};\\r\\n\",\"module-type\":\"widget\",\"title\":\"$:/plugins/flibbles/relink/js/mangler.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/settings.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: library\\r\\n\\r\\nThis handles the fetching and distribution of relink settings.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require('./utils');\\r\\n\\r\\n///// Legacy. You used to be able to access the type from utils.\\r\\nexports.getType = utils.getType;\\r\\n/////\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/settings.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: library\\r\\n\\r\\nUtility methods for relink.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar macroFilter =  \\\"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\\";\\r\\n\\r\\n/**This works nearly identically to $tw.modules.getModulesByTypeAsHashmap\\r\\n * except that this also takes care of migrating V1 relink modules.\\r\\n */\\r\\nexports.getModulesByTypeAsHashmap = function(moduleType, nameField) {\\r\\n\\tvar results = Object.create(null);\\r\\n\\t$tw.modules.forEachModuleOfType(moduleType, function(title, module) {\\r\\n\\t\\tvar key = module[nameField];\\r\\n\\t\\tif (key !== undefined) {\\r\\n\\t\\t\\tresults[key] = module;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tfor (var entry in module) {\\r\\n\\t\\t\\t\\tresults[entry] = {\\r\\n\\t\\t\\t\\t\\trelink: module[entry],\\r\\n\\t\\t\\t\\t\\treport: function() {}};\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn results;\\r\\n};\\r\\n\\r\\nexports.getTiddlerRelinkReferences = function(wiki, title, context) {\\r\\n\\tvar tiddler = wiki.getTiddler(title),\\r\\n\\t\\treferences = Object.create(null),\\r\\n\\t\\toptions = {settings: context, wiki: wiki};\\r\\n\\tif (tiddler) {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tfor (var relinker in getRelinkOperators()) {\\r\\n\\t\\t\\t\\tgetRelinkOperators()[relinker].report(tiddler, function(title, blurb) {\\r\\n\\t\\t\\t\\t\\treferences[title] = references[title] || [];\\r\\n\\t\\t\\t\\t\\treferences[title].push(blurb);\\r\\n\\t\\t\\t\\t}, options);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tif (e.message) {\\r\\n\\t\\t\\t\\te.message = e.message + \\\"\\\\nWhen reporting '\\\" + title + \\\"' Relink references\\\";\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthrow e;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn references;\\r\\n};\\r\\n\\r\\n/** Returns a pair like this,\\r\\n *  { title: {field: entry, ... }, ... }\\r\\n */\\r\\nexports.getRelinkResults = function(wiki, fromTitle, toTitle, context, tiddlerList, options) {\\r\\n\\toptions = options || {};\\r\\n\\toptions.wiki = options.wiki || wiki;\\r\\n\\tfromTitle = (fromTitle || \\\"\\\").trim();\\r\\n\\ttoTitle = (toTitle || \\\"\\\").trim();\\r\\n\\tvar changeList = Object.create(null);\\r\\n\\tif(fromTitle && toTitle) {\\r\\n\\t\\tif (tiddlerList === undefined) {\\r\\n\\t\\t\\ttiddlerList = wiki.getRelinkableTitles();\\r\\n\\t\\t}\\r\\n\\t\\tfor (var i = 0; i < tiddlerList.length; i++) {\\r\\n\\t\\t\\tvar title = tiddlerList[i];\\r\\n\\t\\t\\tvar tiddler = wiki.getTiddler(title);\\r\\n\\t\\t\\tif(tiddler && !tiddler.fields[\\\"plugin-type\\\"]) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tvar entries = Object.create(null),\\r\\n\\t\\t\\t\\t\\t\\toperators = getRelinkOperators();\\r\\n\\t\\t\\t\\t\\toptions.settings = new Contexts.tiddler(wiki, context, title);\\r\\n\\t\\t\\t\\t\\tfor (var operation in operators) {\\r\\n\\t\\t\\t\\t\\t\\toperators[operation].relink(tiddler, fromTitle, toTitle, entries, options);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tfor (var field in entries) {\\r\\n\\t\\t\\t\\t\\t\\t// So long as there is one key,\\r\\n\\t\\t\\t\\t\\t\\t// add it to the change list.\\r\\n\\t\\t\\t\\t\\t\\tchangeList[title] = entries;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} catch (e) {\\r\\n\\t\\t\\t\\t\\t// Should we test for instanceof Error instead?: yes\\r\\n\\t\\t\\t\\t\\t// Does that work in the testing environment?: no\\r\\n\\t\\t\\t\\t\\tif (e.message) {\\r\\n\\t\\t\\t\\t\\t\\te.message = e.message + \\\"\\\\nWhen relinking '\\\" + title + \\\"'\\\";\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tthrow e;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn changeList;\\r\\n};\\r\\n\\r\\nvar Contexts = $tw.modules.applyMethods('relinkcontext');\\r\\n\\r\\nexports.getContext = function(name) {\\r\\n\\treturn Contexts[name];\\r\\n};\\r\\n\\r\\nexports.getWikiContext = function(wiki) {\\r\\n\\t// This gives a fresh context every time. It is up to the indexer or\\r\\n\\t// the cache to preserve those contexts for as long as needed.\\r\\n\\tvar whitelist = new Contexts.whitelist(wiki);\\r\\n\\treturn new Contexts.import(wiki, whitelist, macroFilter);\\r\\n};\\r\\n\\r\\n/** Returns the Relink indexer, or a dummy object which pretends to be one.\\r\\n */\\r\\nexports.getIndexer = function(wiki) {\\r\\n\\tif (!wiki._relink_indexer) {\\r\\n\\t\\twiki._relink_indexer = (wiki.getIndexer && wiki.getIndexer(\\\"RelinkIndexer\\\")) || new (require('$:/plugins/flibbles/relink/js/utils/backupIndexer.js'))(wiki);\\r\\n\\t}\\r\\n\\treturn wiki._relink_indexer;\\r\\n};\\r\\n\\r\\n/**Relinking supports a cache that persists throughout a whole relink op.\\r\\n * This is because the Tiddlywiki caches may get wiped multiple times\\r\\n * throughout the course of a relink.\\r\\n */\\r\\nexports.getCacheForRun = function(options, cacheName, initializer) {\\r\\n\\toptions.cache = options.cache || Object.create(null);\\r\\n\\tif (!$tw.utils.hop(options.cache, cacheName)) {\\r\\n\\t\\toptions.cache[cacheName] = initializer();\\r\\n\\t}\\r\\n\\treturn options.cache[cacheName];\\r\\n};\\r\\n\\r\\n/**Returns a specific relinker.\\r\\n * This is useful for wikitext rules which need to parse a filter or a list\\r\\n */\\r\\nexports.getType = function(name) {\\r\\n\\tvar Handler = getFieldTypes()[name];\\r\\n\\treturn Handler ? new Handler() : undefined;\\r\\n};\\r\\n\\r\\nexports.getTypes = function() {\\r\\n\\t// We don't return fieldTypes, because we don't want it modified,\\r\\n\\t// and we need to filter out legacy names.\\r\\n\\tvar rtn = Object.create(null);\\r\\n\\tfor (var type in getFieldTypes()) {\\r\\n\\t\\tvar typeObject = getFieldTypes()[type];\\r\\n\\t\\trtn[typeObject.typeName] = typeObject;\\r\\n\\t}\\r\\n\\treturn rtn;\\r\\n};\\r\\n\\r\\nexports.getDefaultType = function(wiki) {\\r\\n\\tvar tiddler = wiki.getTiddler(\\\"$:/config/flibbles/relink/settings/default-type\\\");\\r\\n\\tvar defaultType = tiddler && tiddler.fields.text;\\r\\n\\t// make sure the default actually exists, otherwise default\\r\\n\\treturn fieldTypes[defaultType] ? defaultType : \\\"title\\\";\\r\\n};\\r\\n\\r\\nvar fieldTypes;\\r\\n\\r\\nfunction getFieldTypes() {\\r\\n\\tif (!fieldTypes) {\\r\\n\\t\\tfieldTypes = Object.create(null);\\r\\n\\t\\t$tw.modules.forEachModuleOfType(\\\"relinkfieldtype\\\", function(title, exports) {\\r\\n\\t\\t\\tfunction NewType() {};\\r\\n\\t\\t\\tNewType.prototype = exports;\\r\\n\\t\\t\\tNewType.typeName = exports.name;\\r\\n\\t\\t\\tfieldTypes[exports.name] = NewType;\\r\\n\\t\\t\\t// For legacy, if the NewType doesn't have a report method, we add one\\r\\n\\t\\t\\tif (!exports.report) {\\r\\n\\t\\t\\t\\texports.report = function() {};\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Also for legacy, some of the field types can go by other names\\r\\n\\t\\t\\tif (exports.aliases) {\\r\\n\\t\\t\\t\\t$tw.utils.each(exports.aliases, function(alias) {\\r\\n\\t\\t\\t\\t\\tfieldTypes[alias] = NewType;\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\treturn fieldTypes;\\r\\n}\\r\\n\\r\\nvar relinkOperators;\\r\\n\\r\\nfunction getRelinkOperators() {\\r\\n\\tif (!relinkOperators) {\\r\\n\\t\\trelinkOperators = exports.getModulesByTypeAsHashmap('relinkoperator', 'name');\\r\\n\\t}\\r\\n\\treturn relinkOperators;\\r\\n};\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/utils.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/wikimethods.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: wikimethod\\r\\n\\r\\nIntroduces some utility methods used by Relink.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.getTiddlerRelinkReferences = function(title) {\\r\\n\\treturn utils.getIndexer(this).lookup(title);\\r\\n};\\r\\n\\r\\nexports.getTiddlerRelinkBackreferences = function(title) {\\r\\n\\treturn utils.getIndexer(this).reverseLookup(title);\\r\\n};\\r\\n\\r\\nexports.getRelinkableTitles = function() {\\r\\n\\tvar toUpdate = \\\"$:/config/flibbles/relink/to-update\\\";\\r\\n\\tvar wiki = this;\\r\\n\\treturn this.getCacheForTiddler(toUpdate, \\\"relink-toUpdate\\\", function() {\\r\\n\\t\\tvar tiddler = wiki.getTiddler(toUpdate);\\r\\n\\t\\tif (tiddler) {\\r\\n\\t\\t\\treturn wiki.compileFilter(tiddler.fields.text);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn wiki.allTitles;\\r\\n\\t\\t}\\r\\n\\t})();\\r\\n};\\r\\n\",\"module-type\":\"wikimethod\",\"title\":\"$:/plugins/flibbles/relink/js/wikimethods.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/all_relinkable.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: allfilteroperator\\r\\n\\r\\nFilter function for [all[relinkable]].\\r\\nReturns all tiddlers subject to relinking.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n(function() {\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports.relinkable = function(source,prefix,options) {\\r\\n\\treturn options.wiki.getRelinkableTitles();\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\"module-type\":\"allfilteroperator\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/all_relinkable.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/references.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkfilteroperator\\r\\n\\r\\nGiven a title as an operand, returns all non-shadow tiddlers that have any\\r\\nsort of updatable reference to it.\\r\\n\\r\\n`relink:backreferences[]]`\\r\\n`relink:references[]]`\\r\\n\\r\\nReturns all tiddlers that reference `fromTiddler` somewhere inside them.\\r\\n\\r\\nInput is ignored. Maybe it shouldn't do this.\\r\\n\\\\*/\\r\\n\\r\\nvar LinkedList = $tw.utils.LinkedList;\\r\\n\\r\\nif (!LinkedList) {\\r\\n\\t/* If the linked list isn't available, make a quick crappy version. */\\r\\n\\tLinkedList = function() {this.array=[];};\\r\\n\\r\\n\\tLinkedList.prototype.pushTop = function(array) {\\r\\n\\t\\t$tw.utils.pushTop(this.array, array);\\r\\n\\t};\\r\\n\\r\\n\\tLinkedList.prototype.toArray = function() {\\r\\n\\t\\treturn this.array;\\r\\n\\t};\\r\\n};\\r\\n\\r\\nexports.backreferences = function(source,operator,options) {\\r\\n\\tvar results = new LinkedList();\\r\\n\\tsource(function(tiddler,title) {\\r\\n\\t\\tresults.pushTop(Object.keys(options.wiki.getTiddlerRelinkBackreferences(title,options)));\\r\\n\\t});\\r\\n\\treturn results.toArray();\\r\\n};\\r\\n\\r\\nexports.references = function(source,operator,options) {\\r\\n\\tvar results = new LinkedList();\\r\\n\\tsource(function(tiddler,title) {\\r\\n\\t\\tvar refs = options.wiki.getTiddlerRelinkReferences(title,options);\\r\\n\\t\\tif (refs) {\\r\\n\\t\\t\\tresults.pushTop(Object.keys(refs));\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn results.toArray();\\r\\n};\\r\\n\",\"module-type\":\"relinkfilteroperator\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/references.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/relink.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: filteroperator\\r\\n\\r\\nThis filter acts as a namespace for several small, simple filters, such as\\r\\n\\r\\n`[relink:impossible[]]`\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\r\\n\\r\\nvar relinkFilterOperators;\\r\\n\\r\\nfunction getRelinkFilterOperators() {\\r\\n\\tif(!relinkFilterOperators) {\\r\\n\\t\\trelinkFilterOperators = {};\\r\\n\\t\\t$tw.modules.applyMethods(\\\"relinkfilteroperator\\\",\\r\\n\\t\\t                         relinkFilterOperators);\\r\\n\\t}\\r\\n\\treturn relinkFilterOperators;\\r\\n}\\r\\n\\r\\nexports.relink = function(source,operator,options) {\\r\\n\\tvar suffixPair = parseSuffix(operator.suffix);\\r\\n\\tvar relinkFilterOperator = getRelinkFilterOperators()[suffixPair[0]];\\r\\n\\tif (relinkFilterOperator) {\\r\\n\\t\\tvar newOperator = $tw.utils.extend({}, operator);\\r\\n\\t\\tnewOperator.suffix = suffixPair[1];\\r\\n\\t\\treturn relinkFilterOperator(source, newOperator, options);\\r\\n\\t} else {\\r\\n\\t\\treturn [language.getString(\\\"Error/RelinkFilterOperator\\\", options)];\\r\\n\\t}\\r\\n};\\r\\n\\r\\nfunction parseSuffix(suffix) {\\r\\n\\tvar index = suffix? suffix.indexOf(\\\":\\\"): -1;\\r\\n\\tif (index >= 0) {\\r\\n\\t\\treturn [suffix.substr(0, index), suffix.substr(index+1)];\\r\\n\\t} else {\\r\\n\\t\\treturn [suffix];\\r\\n\\t}\\r\\n}\\r\\n\",\"module-type\":\"filteroperator\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/relink.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/report.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkfilteroperator\\r\\n\\r\\nGiven a title as an operand, returns a string for each occurrence of that title\\r\\nwithin each input title.\\r\\n\\r\\n[[title]] +[relink:report[fromTiddler]]`\\r\\n\\r\\nReturns string representation of fromTiddler occurrences in title.\\r\\n\\\\*/\\r\\n\\r\\nexports.report = function(source,operator,options) {\\r\\n\\tvar fromTitle = operator.operand,\\r\\n\\t\\tresults = [];\\r\\n\\tif (fromTitle) {\\r\\n\\t\\tvar blurbs = options.wiki.getTiddlerRelinkBackreferences(fromTitle);\\r\\n\\t\\tsource(function(tiddler, title) {\\r\\n\\t\\t\\tif (blurbs[title]) {\\r\\n\\t\\t\\t\\tresults = results.concat(blurbs[title]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\treturn results;\\r\\n};\\r\\n\",\"module-type\":\"relinkfilteroperator\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/report.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/signatures.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkfilteroperator\\r\\n\\r\\nThis filter returns all input tiddlers which are a source of\\r\\nrelink configuration.\\r\\n\\r\\n`[all[tiddlers+system]relink:source[macros]]`\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\r\\n\\r\\nexports.signatures = function(source,operator,options) {\\r\\n\\tvar plugin = operator.operand || null;\\r\\n\\tvar set = getSet(options);\\r\\n\\tif (plugin === \\\"$:/core\\\") {\\r\\n\\t\\t// Core doesn't actually have any settings. We mean Relink\\r\\n\\t\\tplugin = \\\"$:/plugins/flibbles/relink\\\";\\r\\n\\t}\\r\\n\\tvar signatures = [];\\r\\n\\tfor (var signature in set) {\\r\\n\\t\\tvar source = set[signature].source;\\r\\n\\t\\tif (options.wiki.getShadowSource(source) === plugin) {\\r\\n\\t\\t\\tsignatures.push(signature);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn signatures;\\r\\n};\\r\\n\\r\\nexports.type = function(source,operator,options) {\\r\\n\\tvar results = [];\\r\\n\\tvar set = getSet(options);\\r\\n\\tsource(function(tiddler, signature) {\\r\\n\\t\\tif (set[signature]) {\\r\\n\\t\\t\\tresults.push(set[signature].name);\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn results;\\r\\n};\\r\\n\\r\\nexports.types = function(source,operator,options) {\\r\\n\\tvar def = utils.getDefaultType(options.wiki);\\r\\n\\tvar types = Object.keys(utils.getTypes());\\r\\n\\ttypes.sort();\\r\\n\\t// move default to front\\r\\n\\ttypes.sort(function(x,y) { return x === def ? -1 : y === def ? 1 : 0; });\\r\\n\\treturn types;\\r\\n};\\r\\n\\r\\nexports.source = function(source,operator,options) {\\r\\n\\tvar results = [];\\r\\n\\tvar category = operator.suffix;\\r\\n\\tvar set = getSet(options);\\r\\n\\tsource(function(tiddler, signature) {\\r\\n\\t\\tif (set[signature]) {\\r\\n\\t\\t\\tresults.push(set[signature].source);\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn results;\\r\\n};\\r\\n\\r\\nfunction getSet(options) {\\r\\n\\treturn options.wiki.getGlobalCache(\\\"relink-signatures\\\", function() {\\r\\n\\t\\tvar config = utils.getWikiContext(options.wiki);\\r\\n\\t\\tvar set = Object.create(null);\\r\\n\\t\\tvar categories = {\\r\\n\\t\\t\\tattributes: config.getAttributes(),\\r\\n\\t\\t\\tfields: config.getFields(),\\r\\n\\t\\t\\tmacros: config.getMacros(),\\r\\n\\t\\t\\toperators: config.getOperators()};\\r\\n\\t\\t$tw.utils.each(categories, function(list, category) {\\r\\n\\t\\t\\t$tw.utils.each(list, function(item, key) {\\r\\n\\t\\t\\t\\tset[category + \\\"/\\\" + key] = item;\\r\\n\\t\\t\\t});\\r\\n\\t\\t});\\r\\n\\t\\treturn set;\\r\\n\\t});\\r\\n};\\r\\n\",\"module-type\":\"relinkfilteroperator\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/signatures.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/splitafter.js\":{\"text\":\"/*\\\\\\r\\ntitle: $:/core/modules/filters/splitbefore.js\\r\\ntype: application/javascript\\r\\nmodule-type: relinkfilteroperator\\r\\n\\r\\nFilter operator that splits each result on the last occurance of the specified separator and returns the last bit.\\r\\n\\r\\nWhat does this have to do with relink? Nothing. I need this so I can render\\r\\nthe configuration menu. I //could// use [splitregexp[]], but then I'd be\\r\\nlimited to Tiddlywiki v5.1.20 or later.\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\n/*\\r\\nExport our filter function\\r\\n*/\\r\\nexports.splitafter = function(source,operator,options) {\\r\\n\\tvar results = [];\\r\\n\\tsource(function(tiddler,title) {\\r\\n\\t\\tvar index = title.lastIndexOf(operator.operand);\\r\\n\\t\\tif(index < 0) {\\r\\n\\t\\t\\t$tw.utils.pushTop(results,title);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t$tw.utils.pushTop(results,title.substr(index+1));\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn results;\\r\\n};\\r\\n\\r\\n})();\\r\\n\\r\\n\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/splitafter.js\",\"type\":\"application/javascript\",\"module-type\":\"relinkfilteroperator\"},\"$:/plugins/flibbles/relink/js/filteroperators/wouldchange.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkfilteroperator\\r\\n\\r\\nwouldchange: Generator.\\r\\n\\r\\nGiven each input title, it returns all the tiddlers that would be changed if the currentTiddler were to be renamed to the operand.\\r\\n\\r\\nimpossible: filters all source titles for ones that encounter errors on failure.\\r\\n\\r\\nTHESE ARE INTERNAL FILTER OPERATOR AND ARE NOT INTENDED TO BE USED BY USERS.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar language = require(\\\"$:/plugins/flibbles/relink/js/language.js\\\");\\r\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\r\\n\\r\\nexports.wouldchange = function(source,operator,options) {\\r\\n\\tvar from = options.widget && options.widget.getVariable(\\\"currentTiddler\\\"),\\r\\n\\t\\tto = operator.operand,\\r\\n\\t\\tindexer = utils.getIndexer(options.wiki),\\r\\n\\t\\trecords = indexer.relinkLookup(from, to, options);\\r\\n\\treturn Object.keys(records);\\r\\n};\\r\\n\\r\\nexports.impossible = function(source,operator,options) {\\r\\n\\tvar from = options.widget && options.widget.getVariable(\\\"currentTiddler\\\"),\\r\\n\\t\\tto = operator.operand,\\r\\n\\t\\tresults = [],\\r\\n\\t\\tindexer = utils.getIndexer(options.wiki),\\r\\n\\t\\trecords = indexer.relinkLookup(from, to, options);\\r\\n\\tsource(function(tiddler, title) {\\r\\n\\t\\tvar fields = records[title];\\r\\n\\t\\tif (fields) {\\r\\n\\t\\t\\tfor (var field in fields) {\\r\\n\\t\\t\\t\\tif (fields[field].impossible) {\\r\\n\\t\\t\\t\\t\\tresults.push(title);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn results;\\r\\n};\\r\\n\",\"module-type\":\"relinkfilteroperator\",\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/wouldchange.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/filter.js\":{\"text\":\"/*\\\\\\r\\nThis specifies logic for updating filters to reflect title changes.\\r\\n\\\\*/\\r\\n\\r\\nvar refHandler = require(\\\"$:/plugins/flibbles/relink/js/fieldtypes/reference\\\");\\r\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\r\\n\\r\\nexports.name = \\\"filter\\\";\\r\\n\\r\\nexports.report = function(filter, callback, options) {\\r\\n\\t// I cheat here for now. Relink handles reporting too in cases where\\r\\n\\t// fromTitle is undefined. toTitle is the callback in those cases.\\r\\n\\texports.relink(filter, undefined, callback, options);\\r\\n};\\r\\n\\r\\n/**Returns undefined if no change was made.\\r\\n */\\r\\nexports.relink = function(filter, fromTitle, toTitle, options) {\\r\\n\\tvar relinker = new Rebuilder(filter),\\r\\n\\t\\tp = 0, // Current position in the filter string\\r\\n\\t\\tmatch, noPrecedingWordBarrier,\\r\\n\\t\\twordBarrierRequired=false;\\r\\n\\tvar whitespaceRegExp = /\\\\s+/mg,\\r\\n\\t\\toperandRegExp = /((?:\\\\+|\\\\-|~|=|\\\\:\\\\w+)?)(?:(\\\\[)|(?:\\\"([^\\\"]*)\\\")|(?:'([^']*)')|([^\\\\s\\\\[\\\\]]+))/mg,\\r\\n\\t\\tblurbs = [];\\r\\n\\twhile(p < filter.length) {\\r\\n\\t\\t// Skip any whitespace\\r\\n\\t\\twhitespaceRegExp.lastIndex = p;\\r\\n\\t\\tmatch = whitespaceRegExp.exec(filter);\\r\\n\\t\\tnoPrecedingWordBarrier = false;\\r\\n\\t\\tif(match && match.index === p) {\\r\\n\\t\\t\\tp = p + match[0].length;\\r\\n\\t\\t} else if (p != 0) {\\r\\n\\t\\t\\tif (wordBarrierRequired) {\\r\\n\\t\\t\\t\\trelinker.add(' ', p, p);\\r\\n\\t\\t\\t\\twordBarrierRequired = false;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tnoPrecedingWordBarrier = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// Match the start of the operation\\r\\n\\t\\tif(p < filter.length) {\\r\\n\\t\\t\\tvar val;\\r\\n\\t\\t\\toperandRegExp.lastIndex = p;\\r\\n\\t\\t\\tmatch = operandRegExp.exec(filter);\\r\\n\\t\\t\\tif(!match || match.index !== p) {\\r\\n\\t\\t\\t\\t// It's a bad filter\\r\\n\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(match[1]) { // prefix\\r\\n\\t\\t\\t\\tp += match[1].length;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(match[2]) { // Opening square bracket\\r\\n\\t\\t\\t\\t// We check if this is a standalone title,\\r\\n\\t\\t\\t\\t// like `[[MyTitle]]`. We treat those like\\r\\n\\t\\t\\t\\t// `\\\"MyTitle\\\"` or `MyTitle`. Not like a run.\\r\\n\\t\\t\\t\\tvar standaloneTitle = /\\\\[\\\\[([^\\\\]]+)\\\\]\\\\]/g;\\r\\n\\t\\t\\t\\tstandaloneTitle.lastIndex = p;\\r\\n\\t\\t\\t\\tvar alone = standaloneTitle.exec(filter);\\r\\n\\t\\t\\t\\tif (!alone || alone.index != p) {\\r\\n\\t\\t\\t\\t\\tif (fromTitle === undefined) {\\r\\n\\t\\t\\t\\t\\t\\t// toTitle is a callback method in this case.\\r\\n\\t\\t\\t\\t\\t\\tp =reportFilterOperation(filter, function(title, blurb){\\r\\n\\t\\t\\t\\t\\t\\t\\tif (match[1]) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tblurbs.push([title, match[1] + (blurb || '')]);\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tblurbs.push([title, blurb]);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t},p,options.settings,options);\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tp =relinkFilterOperation(relinker,fromTitle,toTitle,filter,p,options.settings,options);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t// It's a legit run\\r\\n\\t\\t\\t\\t\\tif (p === undefined) {\\r\\n\\t\\t\\t\\t\\t\\t// The filter is malformed\\r\\n\\t\\t\\t\\t\\t\\t// We do nothing.\\r\\n\\t\\t\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbracketTitle = alone[1];\\r\\n\\t\\t\\t\\toperandRegExp.lastIndex = standaloneTitle.lastIndex;\\r\\n\\t\\t\\t\\tval = alone[1];\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// standalone Double quoted string, single\\r\\n\\t\\t\\t\\t// quoted string, or noquote ahead.\\r\\n\\t\\t\\t\\tval = match[3] || match[4] || match[5];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// From here on, we're dealing with a standalone title\\r\\n\\t\\t\\t// expression. like `\\\"MyTitle\\\"` or `[[MyTitle]]`\\r\\n\\t\\t\\t// We're much more flexible about relinking these.\\r\\n\\t\\t\\tvar preference = undefined;\\r\\n\\t\\t\\tif (match[3]) {\\r\\n\\t\\t\\t\\tpreference = '\\\"';\\r\\n\\t\\t\\t} else if (match[4]) {\\r\\n\\t\\t\\t\\tpreference = \\\"'\\\";\\r\\n\\t\\t\\t} else if (match[5]) {\\r\\n\\t\\t\\t\\tpreference = '';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (fromTitle === undefined) {\\r\\n\\t\\t\\t\\t// Report it\\r\\n\\t\\t\\t\\tblurbs.push([val, match[1]]);\\r\\n\\t\\t\\t} else if (val === fromTitle) {\\r\\n\\t\\t\\t\\t// Relink it\\r\\n\\t\\t\\t\\tvar entry = {name: \\\"title\\\"};\\r\\n\\t\\t\\t\\tvar newVal = wrapTitle(toTitle, preference);\\r\\n\\t\\t\\t\\tif (newVal === undefined || (options.inBraces && newVal.indexOf('}}}') >= 0)) {\\r\\n\\t\\t\\t\\t\\tif (!options.placeholder) {\\r\\n\\t\\t\\t\\t\\t\\trelinker.impossible = true;\\r\\n\\t\\t\\t\\t\\t\\tp = operandRegExp.lastIndex;\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tnewVal = \\\"[<\\\"+options.placeholder.getPlaceholderFor(toTitle)+\\\">]\\\";\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (newVal[0] != '[') {\\r\\n\\t\\t\\t\\t\\t// not bracket enclosed\\r\\n\\t\\t\\t\\t\\t// this requires whitespace\\r\\n\\t\\t\\t\\t\\t// arnound it\\r\\n\\t\\t\\t\\t\\tif (noPrecedingWordBarrier && !match[1]) {\\r\\n\\t\\t\\t\\t\\t\\trelinker.add(' ', p, p);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\twordBarrierRequired = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tentry.output = toTitle;\\r\\n\\t\\t\\t\\tentry.operator = {operator: \\\"title\\\"};\\r\\n\\t\\t\\t\\tentry.quotation = preference;\\r\\n\\t\\t\\t\\tif (entry.impossible) {\\r\\n\\t\\t\\t\\t\\trelinker.impossible = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\trelinker.add(newVal,p,operandRegExp.lastIndex);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tp = operandRegExp.lastIndex;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (fromTitle === undefined) {\\r\\n\\t\\t// We delay the blurb calls until now in case it's a malformed\\r\\n\\t\\t// filter string. We don't want to report some, only to find out\\r\\n\\t\\t// it's bad.\\r\\n\\t\\tfor (var i = 0; i < blurbs.length; i++) {\\r\\n\\t\\t\\ttoTitle(blurbs[i][0], blurbs[i][1]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (relinker.changed() || relinker.impossible) {\\r\\n\\t\\treturn {output: relinker.results(), impossible: relinker.impossible };\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\n/* Same as this.relink, except this has the added constraint that the return\\r\\n * value must be able to be wrapped in curly braces. (i.e. '{{{...}}}')\\r\\n */\\r\\nexports.relinkInBraces = function(filter, fromTitle, toTitle, options) {\\r\\n\\tvar braceOptions = $tw.utils.extend({inBraces: true}, options);\\r\\n\\tvar entry = this.relink(filter, fromTitle, toTitle, braceOptions);\\r\\n\\tif (entry && entry.output && !canBeInBraces(entry.output)) {\\r\\n\\t\\t// It was possible, but it won't fit in braces, so we must give up\\r\\n\\t\\tdelete entry.output;\\r\\n\\t\\tentry.impossible = true;\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\nfunction wrapTitle(value, preference) {\\r\\n\\tvar choices = {\\r\\n\\t\\t\\\"\\\": function(v) {return /^[^\\\\s\\\\[\\\\]]*[^\\\\s\\\\[\\\\]\\\\}]$/.test(v); },\\r\\n\\t\\t\\\"[\\\": canBePrettyOperand,\\r\\n\\t\\t\\\"'\\\": function(v) {return v.indexOf(\\\"'\\\") < 0; },\\r\\n\\t\\t'\\\"': function(v) {return v.indexOf('\\\"') < 0; }\\r\\n\\t};\\r\\n\\tvar wrappers = {\\r\\n\\t\\t\\\"\\\": function(v) {return v; },\\r\\n\\t\\t\\\"[\\\": function(v) {return \\\"[[\\\"+v+\\\"]]\\\"; },\\r\\n\\t\\t\\\"'\\\": function(v) {return \\\"'\\\"+v+\\\"'\\\"; },\\r\\n\\t\\t'\\\"': function(v) {return '\\\"'+v+'\\\"'; }\\r\\n\\t};\\r\\n\\tif (choices[preference]) {\\r\\n\\t\\tif (choices[preference](value)) {\\r\\n\\t\\t\\treturn wrappers[preference](value);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (var quote in choices) {\\r\\n\\t\\tif (choices[quote](value)) {\\r\\n\\t\\t\\treturn wrappers[quote](value);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// No quotes will work on this\\r\\n\\treturn undefined;\\r\\n}\\r\\n\\r\\nfunction relinkFilterOperation(relinker, fromTitle, toTitle, filterString, p, context, options) {\\r\\n\\tvar nextBracketPos, operator;\\r\\n\\t// Skip the starting square bracket\\r\\n\\tif(filterString.charAt(p++) !== \\\"[\\\") {\\r\\n\\t\\t// Missing [ in filter expression\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\t// Process each operator in turn\\r\\n\\toperator = parseOperator(filterString, p);\\r\\n\\tdo {\\r\\n\\t\\tvar entry = undefined, type;\\r\\n\\t\\tif (operator === undefined) {\\r\\n\\t\\t\\treturn undefined;\\r\\n\\t\\t}\\r\\n\\t\\tp = operator.opStart;\\r\\n\\t\\tswitch (operator.bracket) {\\r\\n\\t\\t\\tcase \\\"{\\\": // Curly brackets\\r\\n\\t\\t\\t\\ttype = \\\"indirect\\\";\\r\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"}\\\",p);\\r\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\r\\n\\t\\t\\t\\t// We've got a live reference. relink or report\\r\\n\\t\\t\\t\\tentry = refHandler.relinkInBraces(operand, fromTitle, toTitle, options);\\r\\n\\t\\t\\t\\tif (entry && entry.output) {\\r\\n\\t\\t\\t\\t\\t// We don't check the context.\\r\\n\\t\\t\\t\\t\\t// All indirect operands convert.\\r\\n\\t\\t\\t\\t\\trelinker.add(entry.output,p,nextBracketPos);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"[\\\": // Square brackets\\r\\n\\t\\t\\t\\ttype = \\\"string\\\";\\r\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"]\\\",p);\\r\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\r\\n\\t\\t\\t\\t// Check if this is a relevant operator\\r\\n\\t\\t\\t\\tvar handler = fieldType(context, operator);\\r\\n\\t\\t\\t\\tif (!handler) {\\r\\n\\t\\t\\t\\t\\t// This operator isn't managed. Bye.\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tentry = handler.relink(operand, fromTitle, toTitle, options);\\r\\n\\t\\t\\t\\tif (!entry || !entry.output) {\\r\\n\\t\\t\\t\\t\\t// The fromTitle wasn't in the operand.\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tvar wrapped;\\r\\n\\t\\t\\t\\tif (!canBePrettyOperand(entry.output) || (options.inBraces && entry.output.indexOf('}}}') >= 0)) {\\r\\n\\t\\t\\t\\t\\tif (!options.placeholder) {\\r\\n\\t\\t\\t\\t\\t\\tdelete entry.output;\\r\\n\\t\\t\\t\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tvar ph = options.placeholder.getPlaceholderFor(entry.output, handler.name);\\r\\n\\t\\t\\t\\t\\twrapped = \\\"<\\\"+ph+\\\">\\\";\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\twrapped = \\\"[\\\"+entry.output+\\\"]\\\";\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\trelinker.add(wrapped, p-1, nextBracketPos+1);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"<\\\": // Angle brackets\\r\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\">\\\",p);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"/\\\": // regexp brackets\\r\\n\\t\\t\\t\\tvar rex = /^((?:[^\\\\\\\\\\\\/]*|\\\\\\\\.)*)\\\\/(?:\\\\(([mygi]+)\\\\))?/g,\\r\\n\\t\\t\\t\\t\\trexMatch = rex.exec(filterString.substring(p));\\r\\n\\t\\t\\t\\tif(rexMatch) {\\r\\n\\t\\t\\t\\t\\tnextBracketPos = p + rex.lastIndex - 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t// Unterminated regular expression\\r\\n\\t\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tif (entry) {\\r\\n\\t\\t\\tif (entry.impossible) {\\r\\n\\t\\t\\t\\trelinker.impossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(nextBracketPos === -1) {\\r\\n\\t\\t\\t// Missing closing bracket in filter expression\\r\\n\\t\\t\\treturn undefined;\\r\\n\\t\\t}\\r\\n\\t\\tp = nextBracketPos + 1;\\r\\n\\t\\t// Check for multiple operands\\r\\n\\t\\tswitch (filterString.charAt(p)) {\\r\\n\\t\\tcase ',':\\r\\n\\t\\t\\tp++;\\r\\n\\t\\t\\tif(/^[\\\\[\\\\{<\\\\/]/.test(filterString.substring(p))) {\\r\\n\\t\\t\\t\\toperator.bracket = filterString.charAt(p);\\r\\n\\t\\t\\t\\toperator.opStart = p + 1;\\r\\n\\t\\t\\t\\toperator.index++;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\tdefault:\\r\\n\\t\\t\\toperator = parseOperator(filterString, p);\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\tcase ']':\\r\\n\\t\\t}\\r\\n\\t\\tbreak;\\r\\n\\t} while(true);\\r\\n\\t// Skip the ending square bracket\\r\\n\\tif(filterString.charAt(p++) !== \\\"]\\\") {\\r\\n\\t\\t// Missing ] in filter expression\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\t// Return the parsing position\\r\\n\\treturn p;\\r\\n}\\r\\n\\r\\nfunction reportFilterOperation(filterString, callback, p, context, options) {\\r\\n\\tvar nextBracketPos, operator;\\r\\n\\t// Skip the starting square bracket\\r\\n\\tif(filterString.charAt(p++) !== \\\"[\\\") {\\r\\n\\t\\t// Missing [ in filter expression\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\toperator = parseOperator(filterString, p);\\r\\n\\t// Process each operator in turn\\r\\n\\tdo {\\r\\n\\t\\tif (operator === undefined) {\\r\\n\\t\\t\\treturn undefined;\\r\\n\\t\\t}\\r\\n\\t\\tp = operator.opStart;\\r\\n\\t\\tswitch (operator.bracket) {\\r\\n\\t\\t\\tcase \\\"{\\\": // Curly brackets\\r\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"}\\\",p);\\r\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\r\\n\\t\\t\\t\\t// Just report it\\r\\n\\t\\t\\t\\trefHandler.report(operand, function(title, blurb) {\\r\\n\\t\\t\\t\\t\\tcallback(title, operatorBlurb(operator, '{' + (blurb || '') + '}'));\\r\\n\\t\\t\\t\\t}, options);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"[\\\": // Square brackets\\r\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"]\\\",p);\\r\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\r\\n\\t\\t\\t\\t// Check if this is a relevant operator\\r\\n\\t\\t\\t\\tvar handler = fieldType(context, operator);\\r\\n\\t\\t\\t\\tif (!handler) {\\r\\n\\t\\t\\t\\t\\t// This operator isn't managed. Bye.\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// We just have to report it. Nothing more.\\r\\n\\t\\t\\t\\thandler.report(operand, function(title, blurb) {\\r\\n\\t\\t\\t\\t\\tcallback(title, operatorBlurb(operator, '[' + (blurb || '') + ']'));\\r\\n\\t\\t\\t\\t}, options);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tcase \\\"<\\\": // Angle brackets\\r\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\">\\\",p);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"/\\\": // regexp brackets\\r\\n\\t\\t\\t\\tvar rex = /^((?:[^\\\\\\\\\\\\/]*|\\\\\\\\.)*)\\\\/(?:\\\\(([mygi]+)\\\\))?/g,\\r\\n\\t\\t\\t\\t\\trexMatch = rex.exec(filterString.substring(p));\\r\\n\\t\\t\\t\\tif(rexMatch) {\\r\\n\\t\\t\\t\\t\\tnextBracketPos = p + rex.lastIndex - 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t// Unterminated regular expression\\r\\n\\t\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(nextBracketPos === -1) {\\r\\n\\t\\t\\t// Missing closing bracket in filter expression\\r\\n\\t\\t\\treturn undefined;\\r\\n\\t\\t}\\r\\n\\t\\tp = nextBracketPos + 1;\\r\\n\\t\\t// Check for multiple operands\\r\\n\\t\\tswitch (filterString.charAt(p)) {\\r\\n\\t\\tcase ',':\\r\\n\\t\\t\\tp++;\\r\\n\\t\\t\\tif(/^[\\\\[\\\\{<\\\\/]/.test(filterString.substring(p))) {\\r\\n\\t\\t\\t\\toperator.bracket = filterString.charAt(p);\\r\\n\\t\\t\\t\\toperator.opStart = p + 1;\\r\\n\\t\\t\\t\\toperator.index++;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\tdefault:\\r\\n\\t\\t\\toperator = parseOperator(filterString, p);\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\tcase ']':\\r\\n\\t\\t}\\r\\n\\t\\tbreak;\\r\\n\\t} while(true);\\r\\n\\t// Skip the ending square bracket\\r\\n\\tif(filterString.charAt(p++) !== \\\"]\\\") {\\r\\n\\t\\t// Missing ] in filter expression\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\t// Return the parsing position\\r\\n\\treturn p;\\r\\n}\\r\\n\\r\\nfunction parseOperator(filterString, p) {\\r\\n\\tvar nextBracketPos, operator = {index: 1};\\r\\n\\t// Check for an operator prefix\\r\\n\\tif(filterString.charAt(p) === \\\"!\\\") {\\r\\n\\t\\toperator.prefix = \\\"!\\\";\\r\\n\\t\\tp++;\\r\\n\\t}\\r\\n\\t// Get the operator name\\r\\n\\tnextBracketPos = filterString.substring(p).search(/[\\\\[\\\\{<\\\\/]/);\\r\\n\\tif(nextBracketPos === -1) {\\r\\n\\t\\t// Missing [ in filter expression\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\tnextBracketPos += p;\\r\\n\\toperator.bracket = filterString.charAt(nextBracketPos);\\r\\n\\toperator.operator = filterString.substring(p,nextBracketPos);\\r\\n\\r\\n\\t// Any suffix?\\r\\n\\tvar colon = operator.operator.indexOf(':');\\r\\n\\tif(colon > -1) {\\r\\n\\t\\toperator.suffix = operator.operator.substring(colon + 1);\\r\\n\\t\\toperator.operator = operator.operator.substring(0,colon) || \\\"field\\\";\\r\\n\\t}\\r\\n\\t// Empty operator means: title\\r\\n\\telse if(operator.operator === \\\"\\\") {\\r\\n\\t\\toperator.operator = \\\"title\\\";\\r\\n\\t\\toperator.default = true;\\r\\n\\t}\\r\\n\\toperator.opStart = nextBracketPos + 1;\\r\\n\\treturn operator;\\r\\n};\\r\\n\\r\\nfunction operatorBlurb(operator, enquotedOperand) {\\r\\n\\tvar suffix = operator.suffix ? (':' + operator.suffix) : '';\\r\\n\\t// commas to indicate which number operand\\r\\n\\tsuffix += (new Array(operator.index)).join(',');\\r\\n\\tvar op = operator.default ? '' : operator.operator;\\r\\n\\treturn '[' + (operator.prefix || '') + op + suffix + enquotedOperand + ']';\\r\\n};\\r\\n\\r\\n// Returns the relinker needed for a given operator, or returns undefined.\\r\\nfunction fieldType(context, operator) {\\r\\n\\treturn (operator.suffix &&\\r\\n\\t        context.getOperator(operator.operator + ':' + operator.suffix, operator.index)) ||\\r\\n\\t        context.getOperator(operator.operator, operator.index);\\r\\n};\\r\\n\\r\\nfunction canBePrettyOperand(value) {\\r\\n\\treturn value.indexOf(']') < 0;\\r\\n};\\r\\n\\r\\nfunction canBeInBraces(value) {\\r\\n\\treturn value.indexOf(\\\"}}}\\\") < 0 && value.substr(value.length-2) !== '}}';\\r\\n};\\r\\n\",\"module-type\":\"relinkfieldtype\",\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/filter.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/list.js\":{\"text\":\"/*\\\\\\r\\nThis manages replacing titles that occur within stringLists, like,\\r\\n\\r\\nTiddlerA [[Tiddler with spaces]] [[Another Title]]\\r\\n\\\\*/\\r\\n\\r\\nexports.name = \\\"list\\\";\\r\\n\\r\\nexports.report = function(value, callback, options) {\\r\\n\\tvar list = $tw.utils.parseStringArray(value);\\r\\n\\tfor (var i = 0; i < list.length; i++) {\\r\\n\\t\\tcallback(list[i]);\\r\\n\\t}\\r\\n};\\r\\n\\r\\n/**Returns undefined if no change was made.\\r\\n * Parameter: value can literally be a list. This can happen for builtin\\r\\n *            types 'list' and 'tag'. In those cases, we also return list.\\r\\n */\\r\\nexports.relink = function(value, fromTitle, toTitle, options) {\\r\\n\\tvar isModified = false,\\r\\n\\t\\tactualList = false,\\r\\n\\t\\tlist;\\r\\n\\tif (typeof value !== \\\"string\\\") {\\r\\n\\t\\t// Not a string. Must be a list.\\r\\n\\t\\t// clone it, since we may make changes to this possibly\\r\\n\\t\\t// frozen list.\\r\\n\\t\\tlist = (value || []).slice(0);\\r\\n\\t\\tactualList = true;\\r\\n\\t} else {\\r\\n\\t\\tlist = $tw.utils.parseStringArray(value || \\\"\\\");\\r\\n\\t}\\r\\n\\t$tw.utils.each(list,function (title,index) {\\r\\n\\t\\tif(title === fromTitle) {\\r\\n\\t\\t\\tlist[index] = toTitle;\\r\\n\\t\\t\\tisModified = true;\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\tif (isModified) {\\r\\n\\t\\tvar entry = {name: \\\"list\\\"};\\r\\n\\t\\t// It doesn't parse correctly alone, it won't\\r\\n\\t\\t// parse correctly in any list.\\r\\n\\t\\tif (!canBeListItem(toTitle)) {\\r\\n\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t} else if (actualList) {\\r\\n\\t\\t\\tentry.output = list;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tentry.output = $tw.utils.stringifyList(list);\\r\\n\\t\\t}\\r\\n\\t\\treturn entry;\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\nfunction canBeListItem(value) {\\r\\n\\tvar regexp = /\\\\]\\\\][^\\\\S\\\\xA0]/m;\\r\\n\\treturn !regexp.test(value);\\r\\n};\\r\\n\",\"module-type\":\"relinkfieldtype\",\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/list.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/reference.js\":{\"text\":\"/*\\\\\\r\\nThis manages replacing titles that occur inside text references,\\r\\n\\r\\ntiddlerTitle\\r\\ntiddlerTitle!!field\\r\\n!!field\\r\\ntiddlerTitle##propertyIndex\\r\\n\\\\*/\\r\\n\\r\\nexports.name = \\\"reference\\\";\\r\\n\\r\\nexports.report = function(value, callback, options) {\\r\\n\\tif (value) {\\r\\n\\t\\tvar reference = $tw.utils.parseTextReference(value),\\r\\n\\t\\t\\ttitle = reference.title,\\r\\n\\t\\t\\tblurb;\\r\\n\\t\\tif (title) {\\r\\n\\t\\t\\tif (reference.field) {\\r\\n\\t\\t\\t\\tblurb = '!!' + reference.field;\\r\\n\\t\\t\\t} else if (reference.index) {\\r\\n\\t\\t\\t\\tblurb = '##' + reference.index;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcallback(title, blurb);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.relink = function(value, fromTitle, toTitle, options) {\\r\\n\\tvar entry;\\r\\n\\tif (value) {\\r\\n\\t\\tvar reference = $tw.utils.parseTextReference(value);\\r\\n\\t\\tif (reference.title === fromTitle) {\\r\\n\\t\\t\\tif (!exports.canBePretty(toTitle)) {\\r\\n\\t\\t\\t\\tentry = {impossible: true};\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treference.title = toTitle;\\r\\n\\t\\t\\t\\tentry = {output: exports.toString(reference)};\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\n/* Same as this.relink, except this has the added constraint that the return\\r\\n * value must be able to be wrapped in curly braces.\\r\\n */\\r\\nexports.relinkInBraces = function(value, fromTitle, toTitle, options) {\\r\\n\\tvar log = this.relink(value, fromTitle, toTitle, options);\\r\\n\\tif (log && log.output && toTitle.indexOf(\\\"}\\\") >= 0) {\\r\\n\\t\\tdelete log.output;\\r\\n\\t\\tlog.impossible = true;\\r\\n\\t}\\r\\n\\treturn log;\\r\\n};\\r\\n\\r\\nexports.toString = function(textReference) {\\r\\n\\tvar title = textReference.title || '';\\r\\n\\tif (textReference.field) {\\r\\n\\t\\treturn title + \\\"!!\\\" + textReference.field;\\r\\n\\t} else if (textReference.index) {\\r\\n\\t\\treturn title + \\\"##\\\" + textReference.index;\\r\\n\\t}\\r\\n\\treturn title;\\r\\n};\\r\\n\\r\\nexports.canBePretty = function(title)  {\\r\\n\\treturn !title || (title.indexOf(\\\"!!\\\") < 0 && title.indexOf(\\\"##\\\") < 0);\\r\\n};\\r\\n\",\"module-type\":\"relinkfieldtype\",\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/reference.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/title.js\":{\"text\":\"/*\\\\\\r\\nThis specifies logic for replacing a single-tiddler field. This is the\\r\\nsimplest kind of field type. One title swaps out for the other.\\r\\n\\\\*/\\r\\n\\r\\n// NOTE TO MODDERS: If you're making your own field types, the name must be\\r\\n//                  alpha characters only.\\r\\nexports.name = 'title';\\r\\n\\r\\nexports.report = function(value, callback, options) {\\r\\n\\tcallback(value);\\r\\n};\\r\\n\\r\\n/**Returns undefined if no change was made.\\r\\n */\\r\\nexports.relink = function(value, fromTitle, toTitle, options) {\\r\\n\\tif (value === fromTitle) {\\r\\n\\t\\treturn {output: toTitle};\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\n// This is legacy support for when 'title' was known as 'field'\\r\\nexports.aliases = ['field', 'yes'];\\r\\n\",\"module-type\":\"relinkfieldtype\",\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/title.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/wikitext.js\":{\"text\":\"/*\\\\\\r\\nThis specifies logic for updating filters to reflect title changes.\\r\\n\\\\*/\\r\\n\\r\\nexports.name = \\\"wikitext\\\";\\r\\n\\r\\nvar type = 'text/vnd.tiddlywiki';\\r\\n\\r\\nvar WikiParser = require(\\\"$:/core/modules/parsers/wikiparser/wikiparser.js\\\")[type];\\r\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder.js\\\");\\r\\nvar utils = require('$:/plugins/flibbles/relink/js/utils');\\r\\nvar WikitextContext = utils.getContext('wikitext');\\r\\n\\r\\nfunction collectRules() {\\r\\n\\tvar rules = Object.create(null);\\r\\n\\t$tw.modules.forEachModuleOfType(\\\"relinkwikitextrule\\\", function(title, exports) {\\r\\n\\t\\tvar names = exports.name;\\r\\n\\t\\tif (typeof names === \\\"string\\\") {\\r\\n\\t\\t\\tnames = [names];\\r\\n\\t\\t}\\r\\n\\t\\tif (names !== undefined) {\\r\\n\\t\\t\\tfor (var i = 0; i < names.length; i++) {\\r\\n\\t\\t\\t\\trules[names[i]] = exports;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn rules;\\r\\n}\\r\\n\\r\\nfunction WikiWalker(type, text, options) {\\r\\n\\tthis.options = options;\\r\\n\\tif (!this.relinkMethodsInjected) {\\r\\n\\t\\tvar rules = collectRules();\\r\\n\\t\\t$tw.utils.each([this.pragmaRuleClasses, this.blockRuleClasses, this.inlineRuleClasses], function(classList) {\\r\\n\\t\\t\\tfor (var name in classList) {\\r\\n\\t\\t\\t\\tif (rules[name]) {\\r\\n\\t\\t\\t\\t\\tdelete rules[name].name;\\r\\n\\t\\t\\t\\t\\t$tw.utils.extend(classList[name].prototype, rules[name]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tWikiWalker.prototype.relinkMethodsInjected = true;\\r\\n\\t}\\r\\n\\tthis.context = new WikitextContext(options.settings);\\r\\n\\tWikiParser.call(this, type, text, options);\\r\\n};\\r\\n\\r\\nWikiWalker.prototype = Object.create(WikiParser.prototype);\\r\\n\\r\\nWikiWalker.prototype.parsePragmas = function() {\\r\\n\\tvar entries = this.tree;\\r\\n\\twhile (true) {\\r\\n\\t\\tthis.skipWhitespace();\\r\\n\\t\\tif (this.pos >= this.sourceLength) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tvar nextMatch = this.findNextMatch(this.pragmaRules, this.pos);\\r\\n\\t\\tif (!nextMatch || nextMatch.matchIndex !== this.pos) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tentries.push.apply(entries, this.handleRule(nextMatch));\\r\\n\\t}\\r\\n\\treturn entries;\\r\\n};\\r\\n\\r\\nWikiWalker.prototype.parseInlineRunUnterminated = function(options) {\\r\\n\\tvar entries = [];\\r\\n\\tvar nextMatch = this.findNextMatch(this.inlineRules, this.pos);\\r\\n\\twhile (this.pos < this.sourceLength && nextMatch) {\\r\\n\\t\\tif (nextMatch.matchIndex > this.pos) {\\r\\n\\t\\t\\tthis.pos = nextMatch.matchIndex;\\r\\n\\t\\t}\\r\\n\\t\\tentries.push.apply(entries, this.handleRule(nextMatch));\\r\\n\\t\\tnextMatch = this.findNextMatch(this.inlineRules, this.pos);\\r\\n\\t}\\r\\n\\tthis.pos = this.sourceLength;\\r\\n\\treturn entries;\\r\\n};\\r\\n\\r\\nWikiWalker.prototype.parseInlineRunTerminated = function(terminatorRegExp,options) {\\r\\n\\tvar entries = [];\\r\\n\\toptions = options || {};\\r\\n\\tterminatorRegExp.lastIndex = this.pos;\\r\\n\\tvar terminatorMatch = terminatorRegExp.exec(this.source);\\r\\n\\tvar inlineRuleMatch = this.findNextMatch(this.inlineRules,this.pos);\\r\\n\\twhile(this.pos < this.sourceLength && (terminatorMatch || inlineRuleMatch)) {\\r\\n\\t\\tif (terminatorMatch) {\\r\\n\\t\\t\\tif (!inlineRuleMatch || inlineRuleMatch.matchIndex >= terminatorMatch.index) {\\r\\n\\t\\t\\t\\tthis.pos = terminatorMatch.index;\\r\\n\\t\\t\\t\\tif (options.eatTerminator) {\\r\\n\\t\\t\\t\\t\\tthis.pos += terminatorMatch[0].length;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treturn entries;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (inlineRuleMatch) {\\r\\n\\t\\t\\tif (inlineRuleMatch.matchIndex > this.pos) {\\r\\n\\t\\t\\t\\tthis.pos = inlineRuleMatch.matchIndex;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tentries.push.apply(entries, this.handleRule(inlineRuleMatch));\\r\\n\\t\\t\\tinlineRuleMatch = this.findNextMatch(this.inlineRules, this.pos);\\r\\n\\t\\t\\tterminatorRegExp.lastIndex = this.pos;\\r\\n\\t\\t\\tterminatorMatch = terminatorRegExp.exec(this.source);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tthis.pos = this.sourceLength;\\r\\n\\treturn entries;\\r\\n\\r\\n};\\r\\n\\r\\nWikiWalker.prototype.parseBlock = function(terminatorRegExp) {\\r\\n\\tvar terminatorRegExp = /(\\\\r?\\\\n\\\\r?\\\\n)/mg;\\r\\n\\tthis.skipWhitespace();\\r\\n\\tif (this.pos >= this.sourceLength) {\\r\\n\\t\\treturn [];\\r\\n\\t}\\r\\n\\tvar nextMatch = this.findNextMatch(this.blockRules, this.pos);\\r\\n\\tif(nextMatch && nextMatch.matchIndex === this.pos) {\\r\\n\\t\\treturn this.handleRule(nextMatch);\\r\\n\\t}\\r\\n\\treturn this.parseInlineRun(terminatorRegExp);\\r\\n};\\r\\n\\r\\nWikiWalker.prototype.amendRules = function(type, names) {\\r\\n\\tvar only;\\r\\n\\tWikiParser.prototype.amendRules.call(this, type, names);\\r\\n\\tif (type === \\\"only\\\") {\\r\\n\\t\\tonly = true;\\r\\n\\t} else if (type === \\\"except\\\") {\\r\\n\\t\\tonly = false;\\r\\n\\t} else {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (only !== (names.indexOf(\\\"macrodef\\\") >= 0) && this.options.macrodefCanBeDisabled) {\\r\\n\\t\\tthis.options.placeholder = undefined\\r\\n\\t}\\r\\n\\tif (only !== (names.indexOf(\\\"html\\\") >= 0)) {\\r\\n\\t\\tthis.context.allowWidgets = disabled;\\r\\n\\t}\\r\\n\\tif (only !== (names.indexOf(\\\"prettylink\\\") >= 0)) {\\r\\n\\t\\tthis.context.allowPrettylinks = disabled;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nfunction disabled() { return false; };\\r\\n\\r\\n/// Reporter\\r\\n\\r\\nfunction WikiReporter(type, text, callback, options) {\\r\\n\\tthis.callback = callback;\\r\\n\\tWikiWalker.call(this, type, text, options);\\r\\n};\\r\\n\\r\\nWikiReporter.prototype = Object.create(WikiWalker.prototype);\\r\\n\\r\\nWikiReporter.prototype.handleRule = function(ruleInfo) {\\r\\n\\tif (ruleInfo.rule.report) {\\r\\n\\t\\truleInfo.rule.report(this.source, this.callback, this.options);\\r\\n\\t} else {\\r\\n\\t\\tif (ruleInfo.rule.matchRegExp !== undefined) {\\r\\n\\t\\t\\tthis.pos = ruleInfo.rule.matchRegExp.lastIndex;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// We can't easily determine the end of this\\r\\n\\t\\t\\t// rule match. We'll \\\"parse\\\" it so that\\r\\n\\t\\t\\t// parser.pos gets updated, but we throw away\\r\\n\\t\\t\\t// the results.\\r\\n\\t\\t\\truleInfo.rule.parse();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.report = function(wikitext, callback, options) {\\r\\n\\t// Unfortunately it's the side-effect of creating this that reports.\\r\\n\\tnew WikiReporter(options.type, wikitext, callback, options);\\r\\n};\\r\\n\\r\\n/// Relinker\\r\\n\\r\\nfunction WikiRelinker(type, text, fromTitle, toTitle, options) {\\r\\n\\tthis.fromTitle = fromTitle;\\r\\n\\tthis.toTitle = toTitle;\\r\\n\\tthis.placeholder = options.placeholder;\\r\\n\\tif (this.placeholder) {\\r\\n\\t\\tthis.placeholder.parser = this;\\r\\n\\t}\\r\\n\\tWikiWalker.call(this, type, text, options);\\r\\n};\\r\\n\\r\\nWikiRelinker.prototype = Object.create(WikiWalker.prototype);\\r\\n\\r\\nWikiRelinker.prototype.handleRule = function(ruleInfo) {\\r\\n\\tif (ruleInfo.rule.relink) {\\r\\n\\t\\tvar start = ruleInfo.matchIndex;\\r\\n\\t\\tvar newEntry = ruleInfo.rule.relink(this.source, this.fromTitle, this.toTitle, this.options);\\r\\n\\t\\tif (newEntry !== undefined) {\\r\\n\\t\\t\\tif (newEntry.output) {\\r\\n\\t\\t\\t\\tnewEntry.start = start;\\r\\n\\t\\t\\t\\tnewEntry.end = this.pos;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn [newEntry];\\r\\n\\t\\t}\\r\\n\\t} else {\\r\\n\\t\\tif (ruleInfo.rule.matchRegExp !== undefined) {\\r\\n\\t\\t\\tthis.pos = ruleInfo.rule.matchRegExp.lastIndex;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// We can't easily determine the end of this\\r\\n\\t\\t\\t// rule match. We'll \\\"parse\\\" it so that\\r\\n\\t\\t\\t// parser.pos gets updated, but we throw away\\r\\n\\t\\t\\t// the results.\\r\\n\\t\\t\\truleInfo.rule.parse();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn [];\\r\\n};\\r\\n\\r\\nexports.relink = function(wikitext, fromTitle, toTitle, options) {\\r\\n\\tvar parser = new WikiRelinker(options.type, wikitext, fromTitle, toTitle, options),\\r\\n\\t\\twikiEntry = undefined;\\r\\n\\t// Now that we have an array of entries, let's produce the wikiText entry\\r\\n\\t// containing them all.\\r\\n\\tif (parser.tree.length > 0) {\\r\\n\\t\\tvar builder = new Rebuilder(wikitext);\\r\\n\\t\\twikiEntry = {};\\r\\n\\t\\tfor (var i = 0; i < parser.tree.length; i++) {\\r\\n\\t\\t\\tvar entry = parser.tree[i];\\r\\n\\t\\t\\tif (entry.impossible) {\\r\\n\\t\\t\\t\\twikiEntry.impossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (entry.output) {\\r\\n\\t\\t\\t\\tbuilder.add(entry.output, entry.start, entry.end);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twikiEntry.output = builder.results();\\r\\n\\t}\\r\\n\\treturn wikiEntry;\\r\\n};\\r\\n\",\"module-type\":\"relinkfieldtype\",\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/wikitext.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/fields.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nHandles all fields specified in the plugin configuration. Currently, this\\r\\nonly supports single-value fields.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/*jslint node: false, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports.name = 'fields';\\r\\n\\r\\nexports.report = function(tiddler, callback, options) {\\r\\n\\tvar fields = options.settings.getFields();\\r\\n\\t$tw.utils.each(fields, function(handler, field) {\\r\\n\\t\\tvar input = tiddler.fields[field];\\r\\n\\t\\tif (input) {\\r\\n\\t\\t\\thandler.report(input, function(title, blurb) {\\r\\n\\t\\t\\t\\tif (blurb) {\\r\\n\\t\\t\\t\\t\\tcallback(title, field + ': ' + blurb);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tcallback(title, field);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}, options);\\r\\n\\t\\t}\\r\\n\\t});\\r\\n};\\r\\n\\r\\nexports.relink = function(tiddler, fromTitle, toTitle, changes, options) {\\r\\n\\tvar fields = options.settings.getFields();\\r\\n\\t$tw.utils.each(fields, function(handler, field) {\\r\\n\\t\\tvar input = tiddler.fields[field];\\r\\n\\t\\tif (input) {\\r\\n\\t\\t\\tvar entry = handler.relink(input, fromTitle, toTitle, options);\\r\\n\\t\\t\\tif (entry !== undefined) {\\r\\n\\t\\t\\t\\tchanges[field] = entry;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t});\\r\\n};\\r\\n\",\"module-type\":\"relinkoperator\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/fields.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nDepending on the tiddler type, this will apply textOperators which may\\r\\nrelink titles within the body.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/*jslint node: false, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar defaultOperator = \\\"text/vnd.tiddlywiki\\\";\\r\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\r\\n\\r\\nexports.name = 'text';\\r\\n\\r\\nvar textOperators = utils.getModulesByTypeAsHashmap('relinktextoperator', 'type');\\r\\n\\r\\n// $:/DefaultTiddlers is a tiddler which has type \\\"text/vnd.tiddlywiki\\\",\\r\\n// but it lies. It doesn't contain wikitext. It contains a filter, so\\r\\n// we pretend it has a filter type.\\r\\n// If you want to be able to add more exceptions for your plugin, let me know.\\r\\nvar exceptions = {\\r\\n\\t\\\"$:/DefaultTiddlers\\\": \\\"text/x-tiddler-filter\\\"\\r\\n};\\r\\n\\r\\nexports.report = function(tiddler, callback, options) {\\r\\n\\tvar fields = tiddler.fields;\\r\\n\\tif (fields.text) {\\r\\n\\t\\tvar type = exceptions[fields.title] || fields.type || defaultOperator;\\r\\n\\t\\tif (textOperators[type]) {\\r\\n\\t\\t\\tvar entry = textOperators[type].report(tiddler, callback, options);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.relink = function(tiddler, fromTitle, toTitle, changes, options) {\\r\\n\\tvar fields = tiddler.fields;\\r\\n\\tif (fields.text) {\\r\\n\\t\\tvar type = exceptions[fields.title] || fields.type || defaultOperator;\\r\\n\\t\\tif (textOperators[type]) {\\r\\n\\t\\t\\tvar entry = textOperators[type].relink(tiddler, fromTitle, toTitle, options);\\r\\n\\t\\t\\tif (entry) {\\r\\n\\t\\t\\t\\tchanges.text = entry;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\",\"module-type\":\"relinkoperator\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/filtertext.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nThis relinks tiddlers which contain filters in their body, as oppose to\\r\\nwikitext.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/*jslint node: false, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar filterHandler = require(\\\"$:/plugins/flibbles/relink/js/utils\\\").getType('filter');\\r\\n\\r\\nexports.type = 'text/x-tiddler-filter';\\r\\n\\r\\nexports.report = function(tiddler, callback, options) {\\r\\n\\treturn filterHandler.report(tiddler.fields.text, callback, options);\\r\\n};\\r\\n\\r\\nexports.relink = function(tiddler, fromTitle, toTitle, options) {\\r\\n\\treturn filterHandler.relink(tiddler.fields.text, fromTitle, toTitle, options)\\r\\n};\\r\\n\",\"module-type\":\"relinktextoperator\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/filtertext.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nChecks for fromTitle in a tiddler's text. If found, sees if it's relevant,\\r\\nand tries to swap it out if it is.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n/*jslint node: false, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar Placeholder = require(\\\"$:/plugins/flibbles/relink/js/utils/placeholder.js\\\");\\r\\nvar wikitextHandler = require('$:/plugins/flibbles/relink/js/utils.js').getType('wikitext');\\r\\n\\r\\nexports.type = 'text/vnd.tiddlywiki';\\r\\n\\r\\nexports.report = function(tiddler, callback, options) {\\r\\n\\twikitextHandler.report(tiddler.fields.text, callback, options);\\r\\n};\\r\\n\\r\\nexports.relink = function(tiddler, fromTitle, toTitle, options) {\\r\\n\\tvar placeholder = new Placeholder();\\r\\n\\tvar currentOptions = Object.create(options);\\r\\n\\tcurrentOptions.placeholder = placeholder;\\r\\n\\tvar entry = wikitextHandler.relink(tiddler.fields.text, fromTitle, toTitle, currentOptions);\\r\\n\\tif (entry && entry.output) {\\r\\n\\t\\t// If there's output, we've also got to prepend any macros\\r\\n\\t\\t// that the placeholder defined.\\r\\n\\t\\tvar preamble = placeholder.getPreamble();\\r\\n\\t\\tentry.output = preamble + entry.output;\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\",\"module-type\":\"relinktextoperator\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/code.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles code blocks. Or rather //doesn't// handle them, since we should\\r\\nignore their contents.\\r\\n\\r\\n\\\"`` [[Renamed Title]] ``\\\" will remain unchanged.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.name = [\\\"codeinline\\\", \\\"codeblock\\\"];\\r\\n\\r\\nexports.relink = function(text) {\\r\\n\\tvar reEnd;\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\t// I'm lazy. This relink method works for both codeblock and codeinline\\r\\n\\tif (this.match[0].length > 2) {\\r\\n\\t\\t// Must be a codeblock\\r\\n\\t\\treEnd = /\\\\r?\\\\n```$/mg;\\r\\n\\t} else {\\r\\n\\t\\t// Must be a codeinline\\r\\n\\t\\treEnd = new RegExp(this.match[1], \\\"mg\\\");\\r\\n\\t}\\r\\n\\treEnd.lastIndex = this.parser.pos;\\r\\n\\tvar match = reEnd.exec(text);\\r\\n\\tif (match) {\\r\\n\\t\\tthis.parser.pos = match.index + match[0].length;\\r\\n\\t} else {\\r\\n\\t\\tthis.parser.pos = this.parser.sourceLength;\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\n// Same thing. Just skip the pos ahead.\\r\\nexports.report = exports.relink;\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/code.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/comment.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles comment blocks. Or rather //doesn't// handle them, since we should\\r\\nignore their contents.\\r\\n\\r\\n\\\"<!-- [[Renamed Title]] -->\\\" will remain unchanged.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.name = [\\\"commentinline\\\", \\\"commentblock\\\"];\\r\\n\\r\\nexports.relink = function(text) {\\r\\n\\tthis.parser.pos = this.endMatchRegExp.lastIndex;\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\nexports.report = exports.relink;\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/comment.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/filteredtransclude.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles replacement of filtered transclusions in wiki text like,\\r\\n\\r\\n{{{ [tag[docs]] }}}\\r\\n{{{ [tag[docs]] |tooltip}}}\\r\\n{{{ [tag[docs]] ||TemplateTitle}}}\\r\\n{{{ [tag[docs]] |tooltip||TemplateTitle}}}\\r\\n{{{ [tag[docs]] }}width:40;height:50;}.class.class\\r\\n\\r\\nThis renames both the list and the template field.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.name = ['filteredtranscludeinline', 'filteredtranscludeblock'];\\r\\n\\r\\nvar filterHandler = require(\\\"$:/plugins/flibbles/relink/js/utils\\\").getType('filter');\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar m = this.match,\\r\\n\\t\\tfilter = m[1],\\r\\n\\t\\ttemplate = $tw.utils.trim(m[3]),\\r\\n\\t\\tappend = template ? '||' + template + '}}}' : '}}}';\\r\\n\\tfilterHandler.report(filter, function(title, blurb) {\\r\\n\\t\\tcallback(title, '{{{' + blurb + append);\\r\\n\\t}, options);\\r\\n\\tif (template) {\\r\\n\\t\\tcallback(template, '{{{' + $tw.utils.trim(filter).replace(/\\\\r?\\\\n/mg, ' ') + '||}}}');\\r\\n\\t}\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar m = this.match,\\r\\n\\t\\tfilter = m[1],\\r\\n\\t\\ttooltip = m[2],\\r\\n\\t\\ttemplate = m[3],\\r\\n\\t\\tstyle = m[4],\\r\\n\\t\\tclasses = m[5],\\r\\n\\t\\tparser = this.parser,\\r\\n\\t\\tentry = {};\\r\\n\\tparser.pos = this.matchRegExp.lastIndex;\\r\\n\\tvar modified = false;\\r\\n\\r\\n\\tvar filterEntry = filterHandler.relink(filter, fromTitle, toTitle, options);\\r\\n\\tif (filterEntry !== undefined) {\\r\\n\\t\\tif (filterEntry.output) {\\r\\n\\t\\t\\tfilter = filterEntry.output;\\r\\n\\t\\t\\tmodified = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (filterEntry.impossible) {\\r\\n\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tif ($tw.utils.trim(template) === fromTitle) {\\r\\n\\t\\t// preserves user-inputted whitespace\\r\\n\\t\\ttemplate = template.replace(fromTitle, toTitle);\\r\\n\\t\\tmodified = true;\\r\\n\\t}\\r\\n\\tif (!modified) {\\r\\n\\t\\tif (!entry.impossible) {\\r\\n\\t\\t\\treturn undefined;\\r\\n\\t\\t}\\r\\n\\t} else {\\r\\n\\t\\tvar output = this.makeFilteredtransclude(this.parser, filter, tooltip, template, style, classes);\\r\\n\\t\\tif (output === undefined) {\\r\\n\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// By copying over the ending newline of the original\\r\\n\\t\\t\\t// text if present, thisrelink method thus works for\\r\\n\\t\\t\\t// both the inline and block rule\\r\\n\\t\\t\\tentry.output = output + utils.getEndingNewline(m[0]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\nexports.makeFilteredtransclude = function(parser, filter, tooltip, template, style, classes) {\\r\\n\\tif (canBePretty(filter) && canBePrettyTemplate(template)) {\\r\\n\\t\\treturn prettyList(filter, tooltip, template, style, classes);\\r\\n\\t}\\r\\n\\tif (classes !== undefined) {\\r\\n\\t\\tclasses = classes.split('.').join(' ');\\r\\n\\t}\\r\\n\\treturn utils.makeWidget(parser, '$list', {\\r\\n\\t\\tfilter: filter,\\r\\n\\t\\ttooltip: tooltip,\\r\\n\\t\\ttemplate: template,\\r\\n\\t\\tstyle: style || undefined,\\r\\n\\t\\titemClass: classes});\\r\\n};\\r\\n\\r\\nfunction prettyList(filter, tooltip, template, style, classes) {\\r\\n\\tif (tooltip === undefined) {\\r\\n\\t\\ttooltip = '';\\r\\n\\t} else {\\r\\n\\t\\ttooltip = \\\"|\\\" + tooltip;\\r\\n\\t}\\r\\n\\tif (template === undefined) {\\r\\n\\t\\ttemplate = '';\\r\\n\\t} else {\\r\\n\\t\\ttemplate = \\\"||\\\" + template;\\r\\n\\t}\\r\\n\\tif (classes === undefined) {\\r\\n\\t\\tclasses = '';\\r\\n\\t} else {\\r\\n\\t\\tclasses = \\\".\\\" + classes;\\r\\n\\t}\\r\\n\\tstyle = style || '';\\r\\n\\treturn \\\"{{{\\\"+filter+tooltip+template+\\\"}}\\\"+style+\\\"}\\\"+classes;\\r\\n};\\r\\n\\r\\nfunction canBePretty(filter) {\\r\\n\\treturn filter.indexOf('|') < 0 && filter.indexOf('}}') < 0;\\r\\n};\\r\\n\\r\\nfunction canBePrettyTemplate(template) {\\r\\n\\treturn !template || (\\r\\n\\t\\ttemplate.indexOf('|') < 0\\r\\n\\t\\t&& template.indexOf('{') < 0\\r\\n\\t\\t&& template.indexOf('}') < 0);\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/filteredtransclude.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/html.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles replacement in attributes of widgets and html elements\\r\\nThis is configurable to select exactly which attributes of which elements\\r\\nshould be changed.\\r\\n\\r\\n<$link to=\\\"TiddlerTitle\\\" />\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\r\\nvar relinkUtils = require('$:/plugins/flibbles/relink/js/utils.js');\\r\\nvar refHandler = relinkUtils.getType('reference');\\r\\nvar filterHandler = relinkUtils.getType('filter');\\r\\nvar ImportContext = relinkUtils.getContext('import');\\r\\nvar macrocall = require(\\\"./macrocall.js\\\");\\r\\n\\r\\nexports.name = \\\"html\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar managedElement = this.parser.context.getAttribute(this.nextTag.tag);\\r\\n\\tvar importFilterAttr;\\r\\n\\tvar element = this.nextTag.tag;\\r\\n\\tfor (var attributeName in this.nextTag.attributes) {\\r\\n\\t\\tvar attr = this.nextTag.attributes[attributeName];\\r\\n\\t\\tvar nextEql = text.indexOf('=', attr.start);\\r\\n\\t\\t// This is the rare case of changing tiddler\\r\\n\\t\\t// \\\"true\\\" to something else when \\\"true\\\" is\\r\\n\\t\\t// implicit, like <$link to /> We ignore those.\\r\\n\\t\\tif (nextEql < 0 || nextEql > attr.end) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\r\\n\\t\\t\\timportFilterAttr = attr;\\r\\n\\t\\t}\\r\\n\\t\\tvar oldLength, quotedValue = undefined, entry;\\r\\n\\t\\tif (attr.type === \\\"string\\\") {\\r\\n\\t\\t\\tvar handler = getAttributeHandler(this.parser.context, this.nextTag, attributeName, options);\\r\\n\\t\\t\\tif (!handler) {\\r\\n\\t\\t\\t\\t// We don't manage this attribute. Bye.\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thandler.report(attr.value, function(title, blurb) {\\r\\n\\t\\t\\t\\tif (blurb) {\\r\\n\\t\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '=\\\"' + blurb + '\\\" />');\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + ' />');\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}, options);\\r\\n\\t\\t} else if (attr.type === \\\"indirect\\\") {\\r\\n\\t\\t\\tentry = refHandler.report(attr.textReference, function(title, blurb) {\\r\\n\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '={{' + (blurb || '') + '}} />');\\r\\n\\t\\t\\t}, options);\\r\\n\\t\\t} else if (attr.type === \\\"filtered\\\") {\\r\\n\\t\\t\\tentry = filterHandler.report(attr.filter, function(title, blurb) {\\r\\n\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '={{{' + blurb + '}}} />');\\r\\n\\t\\t\\t}, options);\\r\\n\\t\\t} else if (attr.type === \\\"macro\\\") {\\r\\n\\t\\t\\tvar macro = attr.value;\\r\\n\\t\\t\\tentry = macrocall.reportAttribute(this.parser, macro, function(title, blurb) {\\r\\n\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '=' + blurb + ' />');\\r\\n\\t\\t\\t}, options);\\r\\n\\t\\t}\\r\\n\\t\\tif (quotedValue === undefined) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\r\\n\\t\\t\\t// If this is an import variable filter, we gotta\\r\\n\\t\\t\\t// remember this new value when we import lower down.\\r\\n\\t\\t\\timportFilterAttr = quotedValue;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (importFilterAttr) {\\r\\n\\t\\tprocessImportFilter(this.parser, importFilterAttr, options);\\r\\n\\t}\\r\\n\\tthis.parse();\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar managedElement = this.parser.context.getAttribute(this.nextTag.tag),\\r\\n\\t\\tbuilder = new Rebuilder(text, this.nextTag.start);\\r\\n\\tvar importFilterAttr;\\r\\n\\tvar widgetEntry = {};\\r\\n\\twidgetEntry.attributes = Object.create(null);\\r\\n\\twidgetEntry.element = this.nextTag.tag;\\r\\n\\tfor (var attributeName in this.nextTag.attributes) {\\r\\n\\t\\tvar attr = this.nextTag.attributes[attributeName];\\r\\n\\t\\tvar nextEql = text.indexOf('=', attr.start);\\r\\n\\t\\t// This is the rare case of changing tiddler\\r\\n\\t\\t// \\\"true\\\" to something else when \\\"true\\\" is\\r\\n\\t\\t// implicit, like <$link to /> We ignore those.\\r\\n\\t\\tif (nextEql < 0 || nextEql > attr.end) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\r\\n\\t\\t\\timportFilterAttr = attr;\\r\\n\\t\\t}\\r\\n\\t\\tvar oldLength, quotedValue = undefined, entry;\\r\\n\\t\\tvar nestedOptions = Object.create(options);\\r\\n\\t\\tnestedOptions.settings = this.parser.context;\\r\\n\\t\\tswitch (attr.type) {\\r\\n\\t\\tcase 'string':\\r\\n\\t\\t\\tvar handler = getAttributeHandler(this.parser.context, this.nextTag, attributeName, options);\\r\\n\\t\\t\\tif (!handler) {\\r\\n\\t\\t\\t\\t// We don't manage this attribute. Bye.\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tentry = handler.relink(attr.value, fromTitle, toTitle, nestedOptions);\\r\\n\\t\\t\\tif (entry === undefined) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (entry.output) {\\r\\n\\t\\t\\t\\tvar quote = utils.determineQuote(text, attr);\\r\\n\\t\\t\\t\\toldLength = attr.value.length + (quote.length * 2);\\r\\n\\t\\t\\t\\tquotedValue = utils.wrapAttributeValue(entry.output,quote);\\r\\n\\t\\t\\t\\tif (quotedValue === undefined) {\\r\\n\\t\\t\\t\\t\\t// The value was unquotable. We need to make\\r\\n\\t\\t\\t\\t\\t// a macro in order to replace it.\\r\\n\\t\\t\\t\\t\\tif (!options.placeholder) {\\r\\n\\t\\t\\t\\t\\t\\t// but we can't...\\r\\n\\t\\t\\t\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tvar value = options.placeholder.getPlaceholderFor(entry.output,handler.name)\\r\\n\\t\\t\\t\\t\\t\\tquotedValue = \\\"<<\\\"+value+\\\">>\\\";\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tcase 'indirect':\\r\\n\\t\\t\\tentry = refHandler.relinkInBraces(attr.textReference, fromTitle, toTitle, options);\\r\\n\\t\\t\\tif (entry === undefined) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (entry.output) {\\r\\n\\t\\t\\t\\t// +4 for '{{' and '}}'\\r\\n\\t\\t\\t\\toldLength = attr.textReference.length + 4;\\r\\n\\t\\t\\t\\tquotedValue = \\\"{{\\\"+entry.output+\\\"}}\\\";\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tcase 'filtered':\\r\\n\\t\\t\\tentry = filterHandler.relinkInBraces(attr.filter, fromTitle, toTitle, options);\\r\\n\\t\\t\\tif (entry === undefined) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (entry.output) {\\r\\n\\t\\t\\t\\t// +6 for '{{{' and '}}}'\\r\\n\\t\\t\\t\\toldLength = attr.filter.length + 6;\\r\\n\\t\\t\\t\\tquotedValue = \\\"{{{\\\"+ entry.output +\\\"}}}\\\";\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tcase 'macro':\\r\\n\\t\\t\\tvar macro = attr.value;\\r\\n\\t\\t\\tentry = macrocall.relinkAttribute(this.parser, macro, text, fromTitle, toTitle, options);\\r\\n\\t\\t\\tif (entry === undefined) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (entry.output) {\\r\\n\\t\\t\\t\\t// already includes '<<' and '>>'\\r\\n\\t\\t\\t\\toldLength = macro.end-macro.start;\\r\\n\\t\\t\\t\\tquotedValue = entry.output;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (entry.impossible) {\\r\\n\\t\\t\\twidgetEntry.impossible = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (quotedValue === undefined) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\r\\n\\t\\t\\t// If this is an import variable filter, we gotta\\r\\n\\t\\t\\t// remember this new value when we import lower down.\\r\\n\\t\\t\\timportFilterAttr = quotedValue;\\r\\n\\t\\t}\\r\\n\\t\\t// We count backwards from the end to preserve whitespace\\r\\n\\t\\tvar valueStart = attr.end - oldLength;\\r\\n\\t\\tbuilder.add(quotedValue, valueStart, attr.end);\\r\\n\\t}\\r\\n\\tif (importFilterAttr) {\\r\\n\\t\\tprocessImportFilter(this.parser, importFilterAttr, options);\\r\\n\\t}\\r\\n\\tvar tag = this.parse()[0];\\r\\n\\tif (tag.children) {\\r\\n\\t\\tfor (var i = 0; i < tag.children.length; i++) {\\r\\n\\t\\t\\tvar child = tag.children[i];\\r\\n\\t\\t\\tif (child.output) {\\r\\n\\t\\t\\t\\tbuilder.add(child.output, child.start, child.end);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (child.impossible) {\\r\\n\\t\\t\\t\\twidgetEntry.impossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (builder.changed() || widgetEntry.impossible) {\\r\\n\\t\\twidgetEntry.output = builder.results(this.parser.pos);\\r\\n\\t\\treturn widgetEntry;\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\n/** Returns the field handler for the given attribute of the given widget.\\r\\n *  If this returns undefined, it means we don't handle it. So skip.\\r\\n */\\r\\nfunction getAttributeHandler(context, widget, attributeName, options) {\\r\\n\\tif (widget.tag === \\\"$macrocall\\\") {\\r\\n\\t\\tvar nameAttr = widget.attributes[\\\"$name\\\"];\\r\\n\\t\\tif (nameAttr) {\\r\\n\\t\\t\\tvar macro = context.getMacro(nameAttr.value);\\r\\n\\t\\t\\tif (macro) {\\r\\n\\t\\t\\t\\treturn macro[attributeName];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t} else {\\r\\n\\t\\tvar element = context.getAttribute(widget.tag);\\r\\n\\t\\tif (element) {\\r\\n\\t\\t\\treturn element[attributeName];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\nfunction computeAttribute(context, attribute, options) {\\r\\n\\tvar value;\\r\\n\\tif(attribute.type === \\\"filtered\\\") {\\r\\n\\t\\tvar parentWidget = context.widget;\\r\\n\\t\\tvalue = options.wiki.filterTiddlers(attribute.filter,parentWidget)[0] || \\\"\\\";\\r\\n\\t} else if(attribute.type === \\\"indirect\\\") {\\r\\n\\t\\tvar parentWidget = context.widget;\\r\\n\\t\\tvalue = options.wiki.getTextReference(attribute.textReference,\\\"\\\",parentWidget.variables.currentTiddler.value);\\r\\n\\t} else if(attribute.type === \\\"macro\\\") {\\r\\n\\t\\tvar parentWidget = context.widget;\\r\\n\\t\\tvalue = parentWidget.getVariable(attribute.value.name,{params: attribute.value.params});\\r\\n\\t} else { // String attribute\\r\\n\\t\\tvalue = attribute.value;\\r\\n\\t}\\r\\n\\treturn value;\\r\\n};\\r\\n\\r\\n// This processes a <$importvariables> filter attribute and adds any new\\r\\n// variables to our parser.\\r\\nfunction processImportFilter(parser, importAttribute, options) {\\r\\n\\tif (typeof importAttribute === \\\"string\\\") {\\r\\n\\t\\t// It was changed. Reparse it. It'll be a quoted\\r\\n\\t\\t// attribute value. Add a dummy attribute name.\\r\\n\\t\\timportAttribute = $tw.utils.parseAttribute(\\\"p=\\\"+importAttribute, 0)\\r\\n\\t}\\r\\n\\tvar context = parser.context;\\r\\n\\tvar importFilter = computeAttribute(context, importAttribute, options);\\r\\n\\tparser.context = new ImportContext(options.wiki, context, importFilter);\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/html.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/image.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles replacement in wiki text inline rules, like,\\r\\n\\r\\n[img[tiddler.jpg]]\\r\\n\\r\\n[img width=23 height=24 [Description|tiddler.jpg]]\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\r\\nvar refHandler = require(\\\"$:/plugins/flibbles/relink/js/fieldtypes/reference\\\");\\r\\nvar filterHandler = require(\\\"$:/plugins/flibbles/relink/js/utils\\\").getType('filter');\\r\\nvar macrocall = require(\\\"./macrocall.js\\\");\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.name = \\\"image\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar ptr = this.nextImage.start + 4; //[img\\r\\n\\tvar inSource = false;\\r\\n\\tfor (var attributeName in this.nextImage.attributes) {\\r\\n\\t\\tvar attr = this.nextImage.attributes[attributeName];\\r\\n\\t\\tif (attributeName === \\\"source\\\" || attributeName === \\\"tooltip\\\") {\\r\\n\\t\\t\\tif (inSource) {\\r\\n\\t\\t\\t\\tptr = text.indexOf('|', ptr);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tptr = text.indexOf('[', ptr);\\r\\n\\t\\t\\t\\tinSource = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tptr += 1;\\r\\n\\t\\t}\\r\\n\\t\\tif (attributeName === \\\"source\\\") {\\r\\n\\t\\t\\tvar tooltip = this.nextImage.attributes.tooltip;\\r\\n\\t\\t\\tvar blurb = '[img[' + (tooltip ? tooltip.value : '') + ']]';\\r\\n\\t\\t\\tcallback(attr.value, blurb);\\r\\n\\t\\t\\tptr = text.indexOf(attr.value, ptr);\\r\\n\\t\\t\\tptr = text.indexOf(']]', ptr) + 2;\\r\\n\\t\\t} else if (attributeName !== \\\"tooltip\\\") {\\r\\n\\t\\t\\tptr = reportAttribute(this.parser, attr, callback, options);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tthis.parser.pos = ptr;\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar ptr = this.nextImage.start,\\r\\n\\t\\tbuilder = new Rebuilder(text, ptr),\\r\\n\\t\\tmakeWidget = false,\\r\\n\\t\\tskipSource = false,\\r\\n\\t\\timageEntry;\\r\\n\\tif (this.nextImage.attributes.source.value === fromTitle && !canBePretty(toTitle, this.nextImage.attributes.tooltip)) {\\r\\n\\t\\tif (this.parser.context.allowWidgets() && (utils.wrapAttributeValue(toTitle) || options.placeholder)) {\\r\\n\\t\\t\\tmakeWidget = true;\\r\\n\\t\\t\\tbuilder.add(\\\"<$image\\\", ptr, ptr+4);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// We won't be able to make a placeholder to replace\\r\\n\\t\\t\\t// the source attribute. We check now so we don't\\r\\n\\t\\t\\t// prematurely convert into a widget.\\r\\n\\t\\t\\t// Keep going in case other attributes need replacing.\\r\\n\\t\\t\\tskipSource = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tptr += 4; //[img\\r\\n\\tvar inSource = false;\\r\\n\\tfor (var attributeName in this.nextImage.attributes) {\\r\\n\\t\\tvar attr = this.nextImage.attributes[attributeName];\\r\\n\\t\\tif (attributeName === \\\"source\\\" || attributeName === \\\"tooltip\\\") {\\r\\n\\t\\t\\tif (inSource) {\\r\\n\\t\\t\\t\\tptr = text.indexOf('|', ptr);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tptr = text.indexOf('[', ptr);\\r\\n\\t\\t\\t\\tinSource = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (makeWidget) {\\r\\n\\t\\t\\t\\tif (\\\" \\\\t\\\\n\\\".indexOf(text[ptr-1]) >= 0) {\\r\\n\\t\\t\\t\\t\\tbuilder.add('', ptr, ptr+1);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tbuilder.add(' ', ptr, ptr+1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tptr += 1;\\r\\n\\t\\t}\\r\\n\\t\\tif (attributeName === \\\"source\\\") {\\r\\n\\t\\t\\tptr = text.indexOf(attr.value, ptr);\\r\\n\\t\\t\\tif (attr.value === fromTitle) {\\r\\n\\t\\t\\t\\tif (makeWidget) {\\r\\n\\t\\t\\t\\t\\tvar quotedValue = utils.wrapAttributeValue(toTitle);\\r\\n\\t\\t\\t\\t\\tif (quotedValue === undefined) {\\r\\n\\t\\t\\t\\t\\t\\tvar key = options.placeholder.getPlaceholderFor(toTitle);\\r\\n\\t\\t\\t\\t\\t\\tbuilder.add(\\\"source=<<\\\"+key+\\\">>\\\", ptr, ptr+fromTitle.length);\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tbuilder.add(\\\"source=\\\"+quotedValue, ptr, ptr+fromTitle.length);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} else if (!skipSource) {\\r\\n\\t\\t\\t\\t\\tbuilder.add(toTitle, ptr, ptr+fromTitle.length);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tbuilder.impossible = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tptr = text.indexOf(']]', ptr);\\r\\n\\t\\t\\tif (makeWidget) {\\r\\n\\t\\t\\t\\tbuilder.add(\\\"/>\\\", ptr, ptr+2);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tptr += 2;\\r\\n\\t\\t} else if (attributeName === \\\"tooltip\\\") {\\r\\n\\t\\t\\tif (makeWidget) {\\r\\n\\t\\t\\t\\tptr = text.indexOf(attr.value, ptr);\\r\\n\\t\\t\\t\\tvar quotedValue = utils.wrapAttributeValue(attr.value);\\r\\n\\t\\t\\t\\tbuilder.add(\\\"tooltip=\\\"+quotedValue, ptr, ptr+attr.value.length);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tptr = relinkAttribute(this.parser, attr, builder, fromTitle, toTitle, options);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tthis.parser.pos = ptr;\\r\\n\\tif (builder.changed() || builder.impossible) {\\r\\n\\t\\timageEntry = {\\r\\n\\t\\t\\toutput: builder.results(ptr),\\r\\n\\t\\t\\timpossible: builder.impossible };\\r\\n\\t}\\r\\n\\treturn imageEntry;\\r\\n};\\r\\n\\r\\nfunction reportAttribute(parser, attribute, callback, options) {\\r\\n\\tvar text = parser.source;\\r\\n\\tvar ptr = text.indexOf(attribute.name, attribute.start);\\r\\n\\tvar end;\\r\\n\\tptr += attribute.name.length;\\r\\n\\tptr = text.indexOf('=', ptr);\\r\\n\\tif (attribute.type === \\\"string\\\") {\\r\\n\\t\\tptr = text.indexOf(attribute.value, ptr)\\r\\n\\t\\tvar quote = utils.determineQuote(text, attribute);\\r\\n\\t\\t// ignore first quote. We already passed it\\r\\n\\t\\tend = ptr + quote.length + attribute.value.length;\\r\\n\\t} else if (attribute.type === \\\"indirect\\\") {\\r\\n\\t\\tptr = text.indexOf('{{', ptr);\\r\\n\\t\\tvar end = ptr + attribute.textReference.length + 4;\\r\\n\\t\\trefHandler.report(attribute.textReference, function(title, blurb) {\\r\\n\\t\\t\\tcallback(title, '[img ' + attribute.name + '={{' + (blurb || '') + '}}]');\\r\\n\\t\\t}, options);\\r\\n\\t} else if (attribute.type === \\\"filtered\\\") {\\r\\n\\t\\tptr = text.indexOf('{{{', ptr);\\r\\n\\t\\tvar end = ptr + attribute.filter.length + 6;\\r\\n\\t\\tfilterHandler.report(attribute.filter, function(title, blurb) {\\r\\n\\t\\t\\tcallback(title, '[img ' + attribute.name + '={{{' + blurb + '}}}]');\\r\\n\\t\\t}, options);\\r\\n\\t} else if (attribute.type === \\\"macro\\\") {\\r\\n\\t\\tptr = text.indexOf(\\\"<<\\\", ptr);\\r\\n\\t\\tvar end = attribute.value.end;\\r\\n\\t\\tvar macro = attribute.value;\\r\\n\\t\\toldValue = attribute.value;\\r\\n\\t\\tmacrocall.reportAttribute(parser, macro, function(title, blurb) {\\r\\n\\t\\t\\tcallback(title, '[img ' + attribute.name + '=' + blurb + ']');\\r\\n\\t\\t}, options);\\r\\n\\t}\\r\\n\\treturn end;\\r\\n};\\r\\n\\r\\nfunction relinkAttribute(parser, attribute, builder, fromTitle, toTitle, options) {\\r\\n\\tvar text = builder.text;\\r\\n\\tvar ptr = text.indexOf(attribute.name, attribute.start);\\r\\n\\tvar end;\\r\\n\\tptr += attribute.name.length;\\r\\n\\tptr = text.indexOf('=', ptr);\\r\\n\\tif (attribute.type === \\\"string\\\") {\\r\\n\\t\\tptr = text.indexOf(attribute.value, ptr)\\r\\n\\t\\tvar quote = utils.determineQuote(text, attribute);\\r\\n\\t\\t// ignore first quote. We already passed it\\r\\n\\t\\tend = ptr + quote.length + attribute.value.length;\\r\\n\\t} else if (attribute.type === \\\"indirect\\\") {\\r\\n\\t\\tptr = text.indexOf('{{', ptr);\\r\\n\\t\\tvar end = ptr + attribute.textReference.length + 4;\\r\\n\\t\\tvar ref = refHandler.relinkInBraces(attribute.textReference, fromTitle, toTitle, options);\\r\\n\\t\\tif (ref) {\\r\\n\\t\\t\\tif (ref.impossible) {\\r\\n\\t\\t\\t\\tbuilder.impossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (ref.output) {\\r\\n\\t\\t\\t\\tbuilder.add(\\\"{{\\\"+ref.output+\\\"}}\\\", ptr, end);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t} else if (attribute.type === \\\"filtered\\\") {\\r\\n\\t\\tptr = text.indexOf('{{{', ptr);\\r\\n\\t\\tvar end = ptr + attribute.filter.length + 6;\\r\\n\\t\\tvar filter = filterHandler.relinkInBraces(attribute.filter, fromTitle, toTitle, options);\\r\\n\\t\\tif (filter !== undefined) {\\r\\n\\t\\t\\tif (filter.impossible) {\\r\\n\\t\\t\\t\\tbuilder.impossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (filter.output) {\\r\\n\\t\\t\\t\\tvar quoted = \\\"{{{\\\"+filter.output+\\\"}}}\\\";\\r\\n\\t\\t\\t\\tbuilder.add(quoted, ptr, end);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t} else if (attribute.type === \\\"macro\\\") {\\r\\n\\t\\tptr = text.indexOf(\\\"<<\\\", ptr);\\r\\n\\t\\tvar end = attribute.value.end;\\r\\n\\t\\tvar macro = attribute.value;\\r\\n\\t\\toldValue = attribute.value;\\r\\n\\t\\tvar macroEntry = macrocall.relinkAttribute(parser, macro, text, fromTitle, toTitle, options);\\r\\n\\t\\tif (macroEntry !== undefined) {\\r\\n\\t\\t\\tif (macroEntry.impossible) {\\r\\n\\t\\t\\t\\tbuilder.impossible = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (macroEntry.output) {\\r\\n\\t\\t\\t\\tbuilder.add(macroEntry.output, ptr, end);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn end;\\r\\n};\\r\\n\\r\\nfunction canBePretty(title, tooltip) {\\r\\n\\treturn title.indexOf(']') < 0 && (tooltip || title.indexOf('|') < 0);\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/image.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/import.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles import pragmas\\r\\n\\r\\n\\\\import [tag[MyTiddler]]\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\r\\nvar filterRelinker = utils.getType('filter');\\r\\nvar ImportContext = utils.getContext('import');\\r\\n\\r\\nexports.name = \\\"import\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\t// This moves the pos for us\\r\\n\\tvar parseTree = this.parse();\\r\\n\\tvar filter = parseTree[0].attributes.filter.value || '';\\r\\n\\tfilterRelinker.report(filter, function(title, blurb) {\\r\\n\\t\\tif (blurb) {\\r\\n\\t\\t\\tblurb = '\\\\\\\\import ' + blurb;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tblurb = '\\\\\\\\import';\\r\\n\\t\\t}\\r\\n\\t\\tcallback(title, blurb);\\r\\n\\t}, options);\\r\\n\\t// Before we go, we need to actually import the variables\\r\\n\\t// it's calling for, and any /relink pragma\\r\\n\\tthis.parser.context = new ImportContext(options.wiki, this.parser.context, filter);\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\t// In this one case, I'll let the parser parse out the filter and move\\r\\n\\t// the ptr.\\r\\n\\tvar start = this.matchRegExp.lastIndex,\\r\\n\\t\\tparseTree = this.parse(),\\r\\n\\t\\tfilter = parseTree[0].attributes.filter.value || '',\\r\\n\\t\\tentry = filterRelinker.relink(filter, fromTitle, toTitle, options);\\r\\n\\tif (entry !== undefined && entry.output) {\\r\\n\\t\\tvar newline = text.substring(start+filter.length, this.parser.pos);\\r\\n\\t\\tfilter = entry.output;\\r\\n\\t\\tentry.output = \\\"\\\\\\\\import \\\" + filter + newline;\\r\\n\\t}\\r\\n\\r\\n\\t// Before we go, we need to actually import the variables\\r\\n\\t// it's calling for, and any /relink pragma\\r\\n\\tthis.parser.context = new ImportContext(options.wiki, this.parser.context, filter);\\r\\n\\r\\n\\treturn entry;\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/import.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrocall.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles macro calls.\\r\\n\\r\\n<<myMacro '[[MyFilter]]' 'myTitle'>>\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\r\\nvar EntryNode = require('$:/plugins/flibbles/relink/js/utils/entry');\\r\\n\\r\\nexports.name = [\\\"macrocallinline\\\", \\\"macrocallblock\\\"];\\r\\n\\r\\n// Error thrown when a macro's definition is needed, but can't be found.\\r\\nfunction CannotFindMacroDef() {};\\r\\nCannotFindMacroDef.prototype.impossible = true;\\r\\nCannotFindMacroDef.prototype.name = \\\"macroparam\\\";\\r\\n// Failed relinks due to missing definitions aren't reported for now.\\r\\n// I may want to do something special later on.\\r\\nCannotFindMacroDef.prototype.report = function() { return []; };\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar macroInfo = getInfoFromRule(this);\\r\\n\\tthis.parser.pos = macroInfo.end;\\r\\n\\tthis.reportAttribute(this.parser, macroInfo, callback, options);\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar macroInfo = getInfoFromRule(this);\\r\\n\\tvar managedMacro = this.parser.context.getMacro(macroInfo.name);\\r\\n\\tthis.parser.pos = macroInfo.end;\\r\\n\\tif (!managedMacro) {\\r\\n\\t\\t// We don't manage this macro. Bye.\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\tvar mayBeWidget = this.parser.context.allowWidgets();\\r\\n\\tvar names = getParamNames(this.parser, macroInfo.name, macroInfo.params, options);\\r\\n\\tif (names === undefined) {\\r\\n\\t\\t// Needed the definition, and couldn't find it. So if a single\\r\\n\\t\\t// parameter needs to placeholder, just fail.\\r\\n\\t\\tmayBeWidget = false;\\r\\n\\t}\\r\\n\\tvar entry = relinkMacroInvocation(this.parser, macroInfo, text, fromTitle, toTitle, mayBeWidget, options);\\r\\n\\tif (entry && entry.output) {\\r\\n\\t\\tentry.output = macroToString(entry.output, text, names, options);\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\n/** Relinks macros that occur as attributes, like <$element attr=<<...>> />\\r\\n *  Processes the same, except it can't downgrade into a widget if the title\\r\\n *  is complicated.\\r\\n */\\r\\nexports.relinkAttribute = function(parser, macro, text, fromTitle, toTitle, options) {\\r\\n\\tvar entry = relinkMacroInvocation(parser, macro, text, fromTitle, toTitle, false, options);\\r\\n\\tif (entry && entry.output) {\\r\\n\\t\\tentry.output = macroToStringMacro(entry.output, text, options);\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\n/** As in, report a macrocall invocation that is an html attribute. */\\r\\nexports.reportAttribute = function(parser, macro, callback, options) {\\r\\n\\tvar managedMacro = parser.context.getMacro(macro.name);\\r\\n\\tif (!managedMacro) {\\r\\n\\t\\t// We don't manage this macro. Bye.\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\tfor (var managedArg in managedMacro) {\\r\\n\\t\\tvar index;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tindex = getParamIndexWithinMacrocall(parser, macro.name, managedArg, macro.params, options);\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif (index < 0) {\\r\\n\\t\\t\\t// The argument was not supplied. Move on to next.\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tvar param = macro.params[index];\\r\\n\\t\\tvar handler = managedMacro[managedArg];\\r\\n\\t\\tvar nestedOptions = Object.create(options);\\r\\n\\t\\tnestedOptions.settings = parser.context;\\r\\n\\t\\tvar entry = handler.report(param.value, function(title, blurb) {\\r\\n\\t\\t\\tvar rtn = managedArg;\\r\\n\\t\\t\\tif (blurb) {\\r\\n\\t\\t\\t\\trtn += ': \\\"' + blurb + '\\\"';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcallback(title, '<<' + macro.name + ' ' + rtn + '>>');\\r\\n\\t\\t}, nestedOptions);\\r\\n\\t}\\r\\n};\\r\\n\\r\\n/**Processes the given macro,\\r\\n * macro: {name:, params:, start:, end:}\\r\\n * each parameters: {name:, end:, value:}\\r\\n * Macro invocation returned is the same, but relinked, and may have new keys:\\r\\n * parameters: {type: macro, start:, newValue: (quoted replacement value)}\\r\\n * Output of the returned entry isn't a string, but a macro object. It needs\\r\\n * to be converted.\\r\\n */\\r\\nfunction relinkMacroInvocation(parser, macro, text, fromTitle, toTitle, mayBeWidget, options) {\\r\\n\\tvar managedMacro = parser.context.getMacro(macro.name);\\r\\n\\tvar modified = false;\\r\\n\\tif (!managedMacro) {\\r\\n\\t\\t// We don't manage this macro. Bye.\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\tvar outMacro = $tw.utils.extend({}, macro);\\r\\n\\tvar macroEntry = {};\\r\\n\\toutMacro.params = macro.params.slice();\\r\\n\\tfor (var managedArg in managedMacro) {\\r\\n\\t\\tvar index;\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tindex = getParamIndexWithinMacrocall(parser, macro.name, managedArg, macro.params, options);\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tif (e instanceof CannotFindMacroDef) {\\r\\n\\t\\t\\t\\tmacroEntry.impossible = true;\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (index < 0) {\\r\\n\\t\\t\\t// this arg either was not supplied, or we can't find\\r\\n\\t\\t\\t// the definition, so we can't tie it to an anonymous\\r\\n\\t\\t\\t// argument. Either way, move on to the next.\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tvar param = macro.params[index];\\r\\n\\t\\tvar handler = managedMacro[managedArg];\\r\\n\\t\\tvar nestedOptions = Object.create(options);\\r\\n\\t\\tnestedOptions.settings = parser.context;\\r\\n\\t\\tvar entry = handler.relink(param.value, fromTitle, toTitle, nestedOptions);\\r\\n\\t\\tif (entry === undefined) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\t// Macro parameters can only be string parameters, not\\r\\n\\t\\t// indirect, or macro, or filtered\\r\\n\\t\\tif (entry.impossible) {\\r\\n\\t\\t\\tmacroEntry.impossible = true;\\r\\n\\t\\t}\\r\\n\\t\\tif (!entry.output) {\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tvar quote = utils.determineQuote(text, param);\\r\\n\\t\\tvar quoted = utils.wrapParameterValue(entry.output, quote);\\r\\n\\t\\tvar newParam = $tw.utils.extend({}, param);\\r\\n\\t\\tif (quoted === undefined) {\\r\\n\\t\\t\\tif (!mayBeWidget || !options.placeholder) {\\r\\n\\t\\t\\t\\tmacroEntry.impossible = true;\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tvar ph = options.placeholder.getPlaceholderFor(entry.output,handler.name);\\r\\n\\t\\t\\tnewParam.newValue = \\\"<<\\\"+ph+\\\">>\\\";\\r\\n\\t\\t\\tnewParam.type = \\\"macro\\\";\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tnewParam.start = newParam.end - (newParam.value.length + (quote.length*2));\\r\\n\\t\\t\\tnewParam.value = entry.output;\\r\\n\\t\\t\\tnewParam.newValue = quoted;\\r\\n\\t\\t}\\r\\n\\t\\toutMacro.params[index] = newParam;\\r\\n\\t\\tmodified = true;\\r\\n\\t}\\r\\n\\tif (modified || macroEntry.impossible) {\\r\\n\\t\\tif (modified) {\\r\\n\\t\\t\\tmacroEntry.output = outMacro;\\r\\n\\t\\t}\\r\\n\\t\\treturn macroEntry;\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\nfunction getInfoFromRule(rule) {\\r\\n\\t// Get all the details of the match\\r\\n\\tvar macroInfo = rule.nextCall;\\r\\n\\tif (!macroInfo) {\\r\\n\\t\\t//  rule.match is used <v5.1.24\\r\\n\\t\\tvar match = rule.match,\\r\\n\\t\\t\\toffset = $tw.utils.skipWhiteSpace(match[0], match[1].length+2);\\r\\n\\t\\tmacroInfo = {\\r\\n\\t\\t\\tname: match[1],\\r\\n\\t\\t\\tstart: rule.matchRegExp.lastIndex - match[0].length,\\r\\n\\t\\t\\tend: rule.matchRegExp.lastIndex,\\r\\n\\t\\t};\\r\\n\\t\\tmacroInfo.params = parseParams(match[2], offset+macroInfo.start);\\r\\n\\t}\\r\\n\\treturn macroInfo;\\r\\n};\\r\\n\\r\\nfunction mustBeAWidget(macro) {\\r\\n\\tfor (var i = 0; i < macro.params.length; i++) {\\r\\n\\t\\tif (macro.params[i].type === \\\"macro\\\") {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n};\\r\\n\\r\\n/**Given a macro object ({name:, params:, start: end:}), and the text where\\r\\n * it was parsed from, returns a new macro that maintains any syntactic\\r\\n * structuring.\\r\\n */\\r\\nfunction macroToString(macro, text, names, options) {\\r\\n\\tif (mustBeAWidget(macro)) {\\r\\n\\t\\tvar attrs = [];\\r\\n\\t\\tfor (var i = 0; i < macro.params.length; i++) {\\r\\n\\t\\t\\tvar p = macro.params[i];\\r\\n\\t\\t\\tvar val;\\r\\n\\t\\t\\tif (p.newValue) {\\r\\n\\t\\t\\t\\tval = p.newValue;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tval = utils.wrapAttributeValue(p.value);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tattrs.push(\\\" \\\"+names[i]+\\\"=\\\"+val);\\r\\n\\t\\t}\\r\\n\\t\\treturn \\\"<$macrocall $name=\\\"+utils.wrapAttributeValue(macro.name)+attrs.join('')+\\\"/>\\\";\\r\\n\\t} else {\\r\\n\\t\\treturn macroToStringMacro(macro, text, options);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nfunction macroToStringMacro(macro, text, options) {\\r\\n\\tvar builder = new Rebuilder(text, macro.start);\\r\\n\\tfor (var i = 0; i < macro.params.length; i++) {\\r\\n\\t\\tvar param = macro.params[i];\\r\\n\\t\\tif (param.newValue) {\\r\\n\\t\\t\\tbuilder.add(param.newValue, param.start, param.end);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn builder.results(macro.end);\\r\\n};\\r\\n\\r\\n/** Returns -1 if param definitely isn't in macrocall.\\r\\n */\\r\\nfunction getParamIndexWithinMacrocall(parser, macroName, param, params, options) {\\r\\n\\tvar index, i, anonsExist = false;\\r\\n\\tfor (i = 0; i < params.length; i++) {\\r\\n\\t\\tvar name = params[i].name;\\r\\n\\t\\tif (name === param) {\\r\\n\\t\\t\\treturn i;\\r\\n\\t\\t}\\r\\n\\t\\tif (name === undefined) {\\r\\n\\t\\t\\tanonsExist = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (!anonsExist) {\\r\\n\\t\\t// If no anonymous parameters are present, and we didn't find\\r\\n\\t\\t// it among the named ones, it must not be there.\\r\\n\\t\\treturn -1;\\r\\n\\t}\\r\\n\\tvar expectedIndex = indexOfParameterDef(parser, macroName, param, options);\\r\\n\\t// We've got to skip over all the named parameter instances.\\r\\n\\tif (expectedIndex >= 0) {\\r\\n\\t\\tvar anonI = 0;\\r\\n\\t\\tfor (i = 0; i < params.length; i++) {\\r\\n\\t\\t\\tif (params[i].name === undefined) {\\r\\n\\t\\t\\t\\tif (anonI === expectedIndex) {\\r\\n\\t\\t\\t\\t\\treturn i;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tanonI++;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tvar indexOfOther = indexOfParameterDef(parser, macroName, params[i].name, options);\\r\\n\\t\\t\\t\\tif (indexOfOther < expectedIndex) {\\r\\n\\t\\t\\t\\t\\tanonI++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn -1;\\r\\n};\\r\\n\\r\\n// Looks up the definition of a macro, and figures out what the expected index\\r\\n// is for the given parameter.\\r\\nfunction indexOfParameterDef(parser, macroName, paramName, options) {\\r\\n\\tvar def = parser.context.getMacroDefinition(macroName);\\r\\n\\tif (def === undefined) {\\r\\n\\t\\tthrow new CannotFindMacroDef();\\r\\n\\t}\\r\\n\\tvar params = def.params || [];\\r\\n\\tfor (var i = 0; i < params.length; i++) {\\r\\n\\t\\tif (params[i].name === paramName) {\\r\\n\\t\\t\\treturn i;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn -1;\\r\\n};\\r\\n\\r\\nfunction getParamNames(parser, macroName, params, options) {\\r\\n\\tvar used = Object.create(null);\\r\\n\\tvar rtn = new Array(params.length);\\r\\n\\tvar anonsExist = false;\\r\\n\\tvar i;\\r\\n\\tfor (i = 0; i < params.length; i++) {\\r\\n\\t\\tvar name = params[i].name;\\r\\n\\t\\tif (name) {\\r\\n\\t\\t\\trtn[i] = name;\\r\\n\\t\\t\\tused[name] = true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tanonsExist = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (anonsExist) {\\r\\n\\t\\tvar def = parser.context.getMacroDefinition(macroName);\\r\\n\\t\\tif (def === undefined) {\\r\\n\\t\\t\\t// If there are anonymous parameters, and we can't\\r\\n\\t\\t\\t// find the definition, then we can't hope to create\\r\\n\\t\\t\\t// a widget.\\r\\n\\t\\t\\treturn undefined;\\r\\n\\t\\t}\\r\\n\\t\\tvar defParams = def.params || [];\\r\\n\\t\\tvar defPtr = 0;\\r\\n\\t\\tfor (i = 0; i < params.length; i++) {\\r\\n\\t\\t\\tif (rtn[i] === undefined) {\\r\\n\\t\\t\\t\\twhile(defPtr < defParams.length && used[defParams[defPtr].name]) {\\r\\n\\t\\t\\t\\t\\tdefPtr++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (defPtr >= defParams.length) {\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\trtn[i] = defParams[defPtr].name;\\r\\n\\t\\t\\t\\tused[defParams[defPtr].name] = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn rtn;\\r\\n};\\r\\n\\r\\nfunction parseParams(paramString, pos) {\\r\\n\\tvar params = [],\\r\\n\\t\\treParam = /\\\\s*(?:([A-Za-z0-9\\\\-_]+)\\\\s*:)?(?:\\\\s*(?:\\\"\\\"\\\"([\\\\s\\\\S]*?)\\\"\\\"\\\"|\\\"([^\\\"]*)\\\"|'([^']*)'|\\\\[\\\\[([^\\\\]]*)\\\\]\\\\]|([^\\\"'\\\\s]+)))/mg,\\r\\n\\t\\tparamMatch = reParam.exec(paramString);\\r\\n\\twhile(paramMatch) {\\r\\n\\t\\t// Process this parameter\\r\\n\\t\\tvar paramInfo = { };\\r\\n\\t\\t// We need to find the group match that isn't undefined.\\r\\n\\t\\tfor (var i = 2; i <= 6; i++) {\\r\\n\\t\\t\\tif (paramMatch[i] !== undefined) {\\r\\n\\t\\t\\t\\tparamInfo.value = paramMatch[i];\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif(paramMatch[1]) {\\r\\n\\t\\t\\tparamInfo.name = paramMatch[1];\\r\\n\\t\\t}\\r\\n\\t\\t//paramInfo.start = pos;\\r\\n\\t\\tparamInfo.end = reParam.lastIndex + pos;\\r\\n\\t\\tparams.push(paramInfo);\\r\\n\\t\\t// Find the next match\\r\\n\\t\\tparamMatch = reParam.exec(paramString);\\r\\n\\t}\\r\\n\\treturn params;\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrocall.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrodef.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles pragma macro definitions. Except we only update placeholder macros\\r\\nthat we may have previously install.\\r\\n\\r\\n\\\\define relink-?() Tough title\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils\\\");\\r\\nvar VariableContext = utils.getContext('variable');\\r\\n\\r\\nexports.name = \\\"macrodef\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar setParseTreeNode = this.parse(),\\r\\n\\t\\tm = this.match,\\r\\n\\t\\tname = m[1];\\r\\n\\tthis.parser.context = new VariableContext(this.parser.context, setParseTreeNode[0]);\\r\\n\\t// Parse set the pos pointer, but we don't want to skip the macro body.\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tvar endMatch = getBodyMatch(text, this.parser.pos, m[3]);\\r\\n\\tif (endMatch) {\\r\\n\\t\\tvar value = endMatch[2],\\r\\n\\t\\t\\thandler = utils.getType(getActiveType(name, m[2]) || 'wikitext');\\r\\n\\t\\tif (handler) {\\r\\n\\t\\t\\tvar entry = handler.report(value, function(title, blurb) {\\r\\n\\t\\t\\t\\tvar macroStr = '\\\\\\\\define ' + name + '()';\\r\\n\\t\\t\\t\\tif (blurb) {\\r\\n\\t\\t\\t\\t\\tmacroStr += ' ' + blurb;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tcallback(title, macroStr);\\r\\n\\t\\t\\t}, options);\\r\\n\\t\\t}\\r\\n\\t\\tthis.parser.pos = endMatch.index + endMatch[0].length;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar setParseTreeNode = this.parse(),\\r\\n\\t\\tentry,\\r\\n\\t\\tm = this.match,\\r\\n\\t\\tname = m[1],\\r\\n\\t\\tparams = m[2],\\r\\n\\t\\tmultiline = m[3];\\r\\n\\tthis.parser.context = new VariableContext(this.parser.context, setParseTreeNode[0]);\\r\\n\\t// Parse set the pos pointer, but we don't want to skip the macro body.\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tvar endMatch = getBodyMatch(text, this.parser.pos, multiline);\\r\\n\\tif (endMatch) {\\r\\n\\t\\tvar value = endMatch[2],\\r\\n\\t\\t\\ttype = getActiveType(name, params),\\r\\n\\t\\t\\thandler = utils.getType(type || 'wikitext');\\r\\n\\t\\tif (handler) {\\r\\n\\t\\t\\t// If this is an active relink placeholder, then let's remember it\\r\\n\\t\\t\\tif (type && options.placeholder) {\\r\\n\\t\\t\\t\\toptions.placeholder.registerExisting(name, value);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Relink the contents\\r\\n\\t\\t\\tentry = handler.relink(value, fromTitle, toTitle, options);\\r\\n\\t\\t\\tif (entry && entry.output) {\\r\\n\\t\\t\\t\\tentry.output = m[0] + endMatch[1] + entry.output + endMatch[0];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tthis.parser.pos = endMatch.index + endMatch[0].length;\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\n// Return another match for the body, but tooled uniquely\\r\\n// m[1] = whitespace before body\\r\\n// m[2] = body\\r\\n// m.index + m[0].length -> end of match\\r\\nfunction getBodyMatch(text, pos, isMultiline) {\\r\\n\\tvar whitespace,\\r\\n\\t\\tvalueRegExp;\\r\\n\\tif (isMultiline) {\\r\\n\\t\\tvalueRegExp = /\\\\r?\\\\n\\\\\\\\end[^\\\\S\\\\n\\\\r]*(?:\\\\r?\\\\n|$)/mg;\\r\\n\\t\\twhitespace = '';\\r\\n\\t} else {\\r\\n\\t\\tvalueRegExp = /(?:\\\\r?\\\\n|$)/mg;\\r\\n\\t\\tvar newPos = $tw.utils.skipWhiteSpace(text, pos);\\r\\n\\t\\twhitespace = text.substring(pos, newPos);\\r\\n\\t\\tpos = newPos;\\r\\n\\t}\\r\\n\\tvalueRegExp.lastIndex = pos;\\r\\n\\tvar match = valueRegExp.exec(text);\\r\\n\\tif (match) {\\r\\n\\t\\tmatch[1] = whitespace;\\r\\n\\t\\tmatch[2] = text.substring(pos, match.index);\\r\\n\\t}\\r\\n\\treturn match;\\r\\n};\\r\\n\\r\\nfunction getActiveType(macroName, parameters) {\\r\\n\\tvar placeholder = /^relink-(?:(\\\\w+)-)?\\\\d+$/.exec(macroName);\\r\\n\\t// normal macro or special placeholder?\\r\\n\\tif (placeholder && parameters === '') {\\r\\n\\t\\treturn placeholder[1] || 'title';\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrodef.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/prettylink.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles replacement in wiki text inline rules, like,\\r\\n\\r\\n[[Introduction]]\\r\\n\\r\\n[[link description|TiddlerTitle]]\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.name = \\\"prettylink\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar text = this.match[1],\\r\\n\\t\\tlink = this.match[2] || text;\\r\\n\\tif (!$tw.utils.isLinkExternal(link)) {\\r\\n\\t\\tcallback(link, '[[' + text + ']]');\\r\\n\\t}\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tvar caption, m = this.match;\\r\\n\\tif (m[2] === fromTitle) {\\r\\n\\t\\t// format is [[caption|MyTiddler]]\\r\\n\\t\\tcaption = m[1];\\r\\n\\t} else if (m[2] !== undefined || m[1] !== fromTitle) {\\r\\n\\t\\t// format is [[MyTiddler]], and it doesn't match\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\tvar entry = { output: utils.makePrettylink(this.parser, toTitle, caption) };\\r\\n\\tif (entry.output === undefined) {\\r\\n\\t\\tentry.impossible = true;\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/prettylink.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/relink.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: wikirule\\r\\n\\r\\nThis defines the \\\\relink inline pragma used to locally declare\\r\\nrelink rules for macros.\\r\\n\\r\\nIt takes care of providing its own relink and report rules.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\r\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\r\\n\\r\\nexports.name = \\\"relink\\\";\\r\\nexports.types = {pragma: true};\\r\\n\\r\\nexports.init = function(parser) {\\r\\n\\tthis.parser = parser;\\r\\n\\tthis.matchRegExp = /^\\\\\\\\relink[^\\\\S\\\\n]+([^(\\\\s]+)([^\\\\r\\\\n]*)(\\\\r?\\\\n)?/mg;\\r\\n};\\r\\n\\r\\n/**This makes the widget that the macro library will later parse to determine\\r\\n * new macro relink state.\\r\\n *\\r\\n * It's a <$set> widget so it can appear BEFORE \\\\define pragma and not\\r\\n * prevent that pragma from being scooped up by importvariables.\\r\\n * (importvariables stops scooping as soon as it sees something besides $set) */\\r\\nexports.parse = function() {\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tvar macroName;\\r\\n\\tvar macroParams = Object.create(null);\\r\\n\\tvar error = undefined;\\r\\n\\tvar rtn = [];\\r\\n\\tvar self = this;\\r\\n\\tthis.interpretSettings(function(macro, parameter, type) {\\r\\n\\t\\tmacroName = macro;\\r\\n\\t\\tif (type && !utils.getType(type)) {\\r\\n\\t\\t\\terror = language.getString(\\\"Error/UnrecognizedType\\\",\\r\\n\\t\\t\\t\\t{variables: {type: type}, wiki: self.parser.wiki});\\r\\n\\t\\t}\\r\\n\\t\\tmacroParams[parameter] = type;\\r\\n\\t});\\r\\n\\t// If no macroname. Return nothing, this rule will be ignored by parsers\\r\\n\\tif (macroName) {\\r\\n\\t\\tvar relink = Object.create(null);\\r\\n\\t\\trelink[macroName] = macroParams;\\r\\n\\t\\trtn.push({\\r\\n\\t\\t\\ttype: \\\"set\\\",\\r\\n\\t\\t\\tattributes: {\\r\\n\\t\\t\\t\\tname: {type: \\\"string\\\", value: \\\"\\\"}\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tchildren: [],\\r\\n\\t\\t\\tisMacroDefinition: true,\\r\\n\\t\\t\\trelink: relink});\\r\\n\\t}\\r\\n\\tif (error) {\\r\\n\\t\\trtn.push({\\r\\n\\t\\t\\ttype: \\\"element\\\", tag: \\\"span\\\", attributes: {\\r\\n\\t\\t\\t\\t\\\"class\\\": {\\r\\n\\t\\t\\t\\t\\ttype: \\\"string\\\",\\r\\n\\t\\t\\t\\t\\tvalue: \\\"tc-error tc-relink-error\\\"\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}, children: [\\r\\n\\t\\t\\t\\t{type: \\\"text\\\", text: error}\\r\\n\\t\\t\\t]});\\r\\n\\t}\\r\\n\\treturn rtn;\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar parser = this.parser;\\r\\n\\tvar currentTiddler = parser.context.widget.variables.currentTiddler.value;\\r\\n\\tparser.pos = this.matchRegExp.lastIndex;\\r\\n\\tthis.interpretSettings(function(macro, parameter, type) {\\r\\n\\t\\toptions.settings.addSetting(parser.wiki, macro, parameter, type, currentTiddler);\\r\\n\\t});\\r\\n\\t// Return nothing, because this rule is ignored by the parser\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\nexports.interpretSettings = function(block) {\\r\\n\\tvar paramString = this.match[2];\\r\\n\\tif (paramString !== \\\"\\\") {\\r\\n\\t\\tvar macro = this.match[1];\\r\\n\\t\\tvar reParam = /\\\\s*([A-Za-z0-9\\\\-_]+)(?:\\\\s*:\\\\s*([^\\\\s]+))?/mg;\\r\\n\\t\\tvar paramMatch = reParam.exec(paramString);\\r\\n\\t\\twhile (paramMatch) {\\r\\n\\t\\t\\tvar parameter = paramMatch[1];\\r\\n\\t\\t\\tvar type = paramMatch[2];\\r\\n\\t\\t\\tblock(macro, parameter, type);\\r\\n\\t\\t\\tparamMatch = reParam.exec(paramString);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\",\"module-type\":\"wikirule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/relink.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/rules.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nParses and acknowledges any pragma rules a tiddler has.\\r\\n\\r\\n\\\\rules except html wikilink\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.name = \\\"rules\\\";\\r\\n\\r\\n/**This is all we have to do. The rules rule doesn't parse. It just amends\\r\\n * the rules, which is exactly what I want it to do too.\\r\\n * It also takes care of moving the pos pointer forward.\\r\\n */\\r\\nexports.relink = function() {\\r\\n\\tthis.parse();\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\n// Same deal\\r\\nexports.report = exports.relink;\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/rules.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/syslink.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles sys links\\r\\n\\r\\n$:/sys/link\\r\\n\\r\\nbut not:\\r\\n\\r\\n~$:/sys/link\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.name = \\\"syslink\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar title = this.match[0];\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tif (title[0] !== \\\"~\\\") {\\r\\n\\t\\tcallback(title, '~' + title);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar entry = undefined;\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tif (this.match[0] === fromTitle && this.match[0][0] !== \\\"~\\\") {\\r\\n\\t\\tentry = {output: this.makeSyslink(toTitle, options)};\\r\\n\\t\\tif (entry.output === undefined) {\\r\\n\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\nexports.makeSyslink = function(title, options) {\\r\\n\\tvar match = title.match(this.matchRegExp);\\r\\n\\tif (match && match[0] === title && title[0] !== \\\"~\\\") {\\r\\n\\t\\treturn title;\\r\\n\\t} else {\\r\\n\\t\\treturn utils.makePrettylink(this.parser, title);\\r\\n\\t}\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/syslink.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/transclude.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles replacement of transclusions in wiki text like,\\r\\n\\r\\n{{RenamedTiddler}}\\r\\n{{RenamedTiddler||TemplateTitle}}\\r\\n\\r\\nThis renames both the tiddler and the template field.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar refHandler = require(\\\"$:/plugins/flibbles/relink/js/fieldtypes/reference\\\");\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.name = ['transcludeinline', 'transcludeblock'];\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar m = this.match,\\r\\n\\t\\trefString = $tw.utils.trim(m[1]),\\r\\n\\t\\tref = parseTextReference(refString);\\r\\n\\t\\ttemplate = $tw.utils.trim(m[2]);\\r\\n\\tif (ref.title) {\\r\\n\\t\\tvar suffix = '';\\r\\n\\t\\tif (ref.index) {\\r\\n\\t\\t\\tsuffix = '##' + ref.index;\\r\\n\\t\\t} else if (ref.field) {\\r\\n\\t\\t\\tsuffix = '!!' + ref.field;\\r\\n\\t\\t}\\r\\n\\t\\tif (template) {\\r\\n\\t\\t\\tsuffix = suffix + '||' + template;\\r\\n\\t\\t}\\r\\n\\t\\tcallback(ref.title, '{{' + suffix + '}}')\\r\\n\\t}\\r\\n\\tif (template) {\\r\\n\\t\\tcallback(template, '{{' + refString + '||}}');\\r\\n\\t}\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar m = this.match,\\r\\n\\t\\treference = parseTextReference(m[1]),\\r\\n\\t\\ttemplate = m[2],\\r\\n\\t\\tentry = undefined,\\r\\n\\t\\tmodified = false;\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tif ($tw.utils.trim(reference.title) === fromTitle) {\\r\\n\\t\\t// preserve user's whitespace\\r\\n\\t\\treference.title = reference.title.replace(fromTitle, toTitle);\\r\\n\\t\\tmodified = true;\\r\\n\\t}\\r\\n\\tif ($tw.utils.trim(template) === fromTitle) {\\r\\n\\t\\ttemplate = template.replace(fromTitle, toTitle);\\r\\n\\t\\tmodified = true;\\r\\n\\t}\\r\\n\\tif (modified) {\\r\\n\\t\\tvar output = this.makeTransclude(this.parser, reference, template);\\r\\n\\t\\tif (output) {\\r\\n\\t\\t\\t// Adding any newline that might have existed is\\r\\n\\t\\t\\t// what allows this relink method to work for both\\r\\n\\t\\t\\t// the block and inline filter wikitext rule.\\r\\n\\t\\t\\tentry = {output: output + utils.getEndingNewline(m[0])};\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tentry = {impossible: true}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\n// I have my own because the core one is deficient for my needs.\\r\\nfunction parseTextReference(textRef) {\\r\\n\\t// Separate out the title, field name and/or JSON indices\\r\\n\\tvar reTextRef = /^([\\\\w\\\\W]*?)(?:!!(\\\\S[\\\\w\\\\W]*)|##(\\\\S[\\\\w\\\\W]*))?$/g;\\r\\n\\t\\tmatch = reTextRef.exec(textRef),\\r\\n\\t\\tresult = {};\\r\\n\\tif(match) {\\r\\n\\t\\t// Return the parts\\r\\n\\t\\tresult.title = match[1];\\r\\n\\t\\tresult.field = match[2];\\r\\n\\t\\tresult.index = match[3];\\r\\n\\t} else {\\r\\n\\t\\t// If we couldn't parse it\\r\\n\\t\\tresult.title = textRef\\r\\n\\t}\\r\\n\\treturn result;\\r\\n};\\r\\n\\r\\n/** This converts a reference and a template into a string representation\\r\\n *  of a transclude.\\r\\n */\\r\\nexports.makeTransclude = function(parser, reference, template) {\\r\\n\\tvar rtn;\\r\\n\\tif (!canBePrettyTemplate(template)) {\\r\\n\\t\\tvar widget = utils.makeWidget(parser, '$transclude', {\\r\\n\\t\\t\\ttiddler: $tw.utils.trim(template),\\r\\n\\t\\t\\tfield: reference.field,\\r\\n\\t\\t\\tindex: reference.index});\\r\\n\\t\\tif (reference.title && widget !== undefined) {\\r\\n\\t\\t\\trtn = utils.makeWidget(parser, '$tiddler', {tiddler: $tw.utils.trim(reference.title)}, widget);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trtn = widget;\\r\\n\\t\\t}\\r\\n\\t} else if (!canBePrettyTitle(reference.title)) {\\r\\n\\t\\t// This block and the next account for the 1%...\\r\\n\\t\\tvar reducedRef = {field: reference.field, index: reference.index};\\r\\n\\t\\trtn = utils.makeWidget(parser, '$tiddler', {tiddler: $tw.utils.trim(reference.title)}, prettyTransclude(reducedRef, template));\\r\\n\\t} else {\\r\\n\\t\\t// This block takes care of 99% of all cases\\r\\n\\t\\trtn = prettyTransclude(reference, template);\\r\\n\\t}\\r\\n\\treturn rtn;\\r\\n};\\r\\n\\r\\nfunction canBePrettyTitle(value) {\\r\\n\\treturn refHandler.canBePretty(value) && canBePrettyTemplate(value);\\r\\n};\\r\\n\\r\\nfunction canBePrettyTemplate(value) {\\r\\n\\treturn !value || (value.indexOf('}') < 0 && value.indexOf('{') < 0 && value.indexOf('|') < 0);\\r\\n};\\r\\n\\r\\nfunction prettyTransclude(textReference, template) {\\r\\n\\tif (typeof textReference !== \\\"string\\\") {\\r\\n\\t\\ttextReference = refHandler.toString(textReference);\\r\\n\\t}\\r\\n\\tif (!textReference) {\\r\\n\\t\\ttextReference = '';\\r\\n\\t}\\r\\n\\tif (template !== undefined) {\\r\\n\\t\\treturn \\\"{{\\\"+textReference+\\\"||\\\"+template+\\\"}}\\\";\\r\\n\\t} else {\\r\\n\\t\\treturn \\\"{{\\\"+textReference+\\\"}}\\\";\\r\\n\\t}\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/transclude.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/utils.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: library\\r\\n\\r\\nUtility methods for the wikitext relink rules.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nexports.makeWidget = function(parser, tag, attributes, body) {\\r\\n\\tif (!parser.context.allowWidgets()) {\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n\\tvar string = '<' + tag;\\r\\n\\tfor (var attr in attributes) {\\r\\n\\t\\tvar value = attributes[attr];\\r\\n\\t\\tif (value !== undefined) {\\r\\n\\t\\t\\tvar quoted = exports.wrapAttributeValue(value);\\r\\n\\t\\t\\tif (!quoted) {\\r\\n\\t\\t\\t\\tif (!parser.options.placeholder) {\\r\\n\\t\\t\\t\\t\\t// It's not possible to make this widget\\r\\n\\t\\t\\t\\t\\treturn undefined;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tvar category = getPlaceholderCategory(parser.context, tag, attr);\\r\\n\\t\\t\\t\\tquoted = '<<' + parser.placeholder.getPlaceholderFor(value, category) + '>>';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tstring += ' ' + attr + '=' + quoted;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (body !== undefined) {\\r\\n\\t\\tstring += '>' + body + '</' + tag + '>';\\r\\n\\t} else {\\r\\n\\t\\tstring += '/>';\\r\\n\\t}\\r\\n\\treturn string;\\r\\n};\\r\\n\\r\\nfunction getPlaceholderCategory(context, tag, attribute) {\\r\\n\\tvar element = context.getAttribute(tag);\\r\\n\\tvar rule = element && element[attribute];\\r\\n\\t// titles go to relink-\\\\d\\r\\n\\t// plaintext goes to relink-plaintext-\\\\d\\r\\n\\t// because titles are way more common, also legacy\\r\\n\\tif (rule === undefined) {\\r\\n\\t\\treturn 'plaintext';\\r\\n\\t} else {\\r\\n\\t\\trule = rule.fields.text;\\r\\n\\t\\tif (rule === 'title') {\\r\\n\\t\\t\\trule = undefined;\\r\\n\\t\\t}\\r\\n\\t\\treturn rule;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.makePrettylink = function(parser, title, caption) {\\r\\n\\tvar output;\\r\\n\\tif (parser.context.allowPrettylinks() && canBePrettylink(title, caption)) {\\r\\n\\t\\tif (caption !== undefined) {\\r\\n\\t\\t\\toutput = \\\"[[\\\" + caption + \\\"|\\\" + title + \\\"]]\\\";\\r\\n\\t\\t} else {\\r\\n\\t\\t\\toutput = \\\"[[\\\" + title + \\\"]]\\\";\\r\\n\\t\\t}\\r\\n\\t} else if (caption !== undefined) {\\r\\n\\t\\tvar safeCaption = sanitizeCaption(parser, caption);\\r\\n\\t\\tif (safeCaption !== undefined) {\\r\\n\\t\\t\\toutput = exports.makeWidget(parser, '$link', {to: title}, safeCaption);\\r\\n\\t\\t}\\r\\n\\t} else if (exports.shorthandPrettylinksSupported(parser.wiki)) {\\r\\n\\t\\toutput = exports.makeWidget(parser, '$link', {to: title});\\r\\n\\t} else if (parser.context.allowWidgets() && parser.placeholder) {\\r\\n\\t\\t// If we don't have a caption, we must resort to\\r\\n\\t\\t// placeholders anyway to prevent link/caption desync\\r\\n\\t\\t// from later relinks.\\r\\n\\t\\t// It doesn't matter whether the tiddler is quotable.\\r\\n\\t\\tvar ph = parser.placeholder.getPlaceholderFor(title);\\r\\n\\t\\toutput = \\\"<$link to=<<\\\"+ph+\\\">>><$text text=<<\\\"+ph+\\\">>/></$link>\\\";\\r\\n\\t}\\r\\n\\treturn output;\\r\\n};\\r\\n\\r\\n/**In version 5.1.20, Tiddlywiki made it so <$link to\\\"something\\\" /> would\\r\\n * use \\\"something\\\" as a caption. This is preferable. However, Relink works\\r\\n * going back to 5.1.14, so we need to have different handling for both\\r\\n * cases.\\r\\n */\\r\\nvar _supported;\\r\\nexports.shorthandPrettylinksSupported = function(wiki) {\\r\\n\\tif (_supported === undefined) {\\r\\n\\t\\tvar test = wiki.renderText(\\\"text/plain\\\", \\\"text/vnd.tiddlywiki\\\", \\\"<$link to=test/>\\\");\\r\\n\\t\\t_supported = (test === \\\"test\\\");\\r\\n\\t}\\r\\n\\treturn _supported;\\r\\n};\\r\\n\\r\\n/**Return true if value can be used inside a prettylink.\\r\\n */\\r\\nfunction canBePrettylink(value, customCaption) {\\r\\n\\treturn value.indexOf(\\\"]]\\\") < 0 && value[value.length-1] !== ']' && (customCaption !== undefined || value.indexOf('|') < 0);\\r\\n};\\r\\n\\r\\nfunction sanitizeCaption(parser, caption) {\\r\\n\\tvar plaintext = parser.wiki.renderText(\\\"text/plain\\\", \\\"text/vnd.tiddlywiki\\\", caption);\\r\\n\\tif (plaintext === caption && caption.indexOf(\\\"</$link>\\\") <= 0) {\\r\\n\\t\\treturn caption;\\r\\n\\t} else {\\r\\n\\t\\treturn exports.makeWidget(parser, '$text', {text: caption});\\r\\n\\t}\\r\\n};\\r\\n\\r\\n/**Finds an appropriate quote mark for a given value.\\r\\n *\\r\\n *Tiddlywiki doesn't have escape characters for attribute values. Instead,\\r\\n * we just have to find the type of quotes that'll work for the given title.\\r\\n * There exist titles that simply can't be quoted.\\r\\n * If it can stick with the preference, it will.\\r\\n *\\r\\n * return: Returns the wrapped value, or undefined if it's impossible to wrap\\r\\n */\\r\\nexports.wrapAttributeValue = function(value, preference) {\\r\\n\\tvar whitelist = [\\\"\\\", \\\"'\\\", '\\\"', '\\\"\\\"\\\"'];\\r\\n\\tvar choices = {\\r\\n\\t\\t\\\"\\\": function(v) {return !/([\\\\/\\\\s<>\\\"'=])/.test(v) && v.length > 0; },\\r\\n\\t\\t\\\"'\\\": function(v) {return v.indexOf(\\\"'\\\") < 0; },\\r\\n\\t\\t'\\\"': function(v) {return v.indexOf('\\\"') < 0; },\\r\\n\\t\\t'\\\"\\\"\\\"': function(v) {return v.indexOf('\\\"\\\"\\\"') < 0 && v[v.length-1] != '\\\"';}\\r\\n\\t};\\r\\n\\tif (choices[preference] && choices[preference](value)) {\\r\\n\\t\\treturn wrap(value, preference);\\r\\n\\t}\\r\\n\\tfor (var i = 0; i < whitelist.length; i++) {\\r\\n\\t\\tvar quote = whitelist[i];\\r\\n\\t\\tif (choices[quote](value)) {\\r\\n\\t\\t\\treturn wrap(value, quote);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// No quotes will work on this\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\n/**Like wrapAttribute value, except for macro parameters, not attributes.\\r\\n *\\r\\n * These are more permissive. Allows brackets,\\r\\n * and slashes and '<' in unquoted values.\\r\\n */\\r\\nexports.wrapParameterValue = function(value, preference) {\\r\\n\\tvar whitelist = [\\\"\\\", \\\"'\\\", '\\\"', '[[', '\\\"\\\"\\\"'];\\r\\n\\tvar choices = {\\r\\n\\t\\t\\\"\\\": function(v) {return !/([\\\\s>\\\"'=])/.test(v); },\\r\\n\\t\\t\\\"'\\\": function(v) {return v.indexOf(\\\"'\\\") < 0; },\\r\\n\\t\\t'\\\"': function(v) {return v.indexOf('\\\"') < 0; },\\r\\n\\t\\t\\\"[[\\\": canBePrettyOperand,\\r\\n\\t\\t'\\\"\\\"\\\"': function(v) {return v.indexOf('\\\"\\\"\\\"') < 0 && v[v.length-1] != '\\\"';}\\r\\n\\t};\\r\\n\\tif (choices[preference] && choices[preference](value)) {\\r\\n\\t\\treturn wrap(value, preference);\\r\\n\\t}\\r\\n\\tfor (var i = 0; i < whitelist.length; i++) {\\r\\n\\t\\tvar quote = whitelist[i];\\r\\n\\t\\tif (choices[quote](value)) {\\r\\n\\t\\t\\treturn wrap(value, quote);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t// No quotes will work on this\\r\\n\\treturn undefined;\\r\\n};\\r\\n\\r\\nfunction wrap(value, wrapper) {\\r\\n\\tvar wrappers = {\\r\\n\\t\\t\\\"\\\": function(v) {return v; },\\r\\n\\t\\t\\\"'\\\": function(v) {return \\\"'\\\"+v+\\\"'\\\"; },\\r\\n\\t\\t'\\\"': function(v) {return '\\\"'+v+'\\\"'; },\\r\\n\\t\\t'\\\"\\\"\\\"': function(v) {return '\\\"\\\"\\\"'+v+'\\\"\\\"\\\"'; },\\r\\n\\t\\t\\\"[[\\\": function(v) {return \\\"[[\\\"+v+\\\"]]\\\"; }\\r\\n\\t};\\r\\n\\tvar chosen = wrappers[wrapper];\\r\\n\\tif (chosen) {\\r\\n\\t\\treturn chosen(value);\\r\\n\\t} else {\\r\\n\\t\\treturn undefined;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nfunction canBePrettyOperand(value) {\\r\\n\\treturn value.indexOf(']') < 0;\\r\\n};\\r\\n\\r\\n/**Given some text, and a param or  attribute within that text, this returns\\r\\n * what type of quotation that attribute is using.\\r\\n *\\r\\n * param: An object in the form {end:, ...}\\r\\n */\\r\\nexports.determineQuote = function(text, param) {\\r\\n\\tvar pos = param.end-1;\\r\\n\\tif (text[pos] === \\\"'\\\") {\\r\\n\\t\\treturn \\\"'\\\";\\r\\n\\t}\\r\\n\\tif (text[pos] === '\\\"') {\\r\\n\\t\\tif (text.substr(pos-2, 3) === '\\\"\\\"\\\"') {\\r\\n\\t\\t\\treturn '\\\"\\\"\\\"';\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn '\\\"';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (text.substr(pos-1,2) === ']]' && text.substr((pos-param.value.length)-3, 2) === '[[') {\\r\\n\\t\\treturn \\\"[[\\\";\\r\\n\\t}\\r\\n\\treturn '';\\r\\n};\\r\\n\\r\\n// Finds the newline at the end of a string and returns it. Empty string if\\r\\n// none exists.\\r\\nexports.getEndingNewline = function(string) {\\r\\n\\tvar l = string.length;\\r\\n\\tif (string[l-1] === '\\\\n') {\\r\\n\\t\\treturn (string[l-2] === '\\\\r') ? \\\"\\\\r\\\\n\\\" : \\\"\\\\n\\\";\\r\\n\\t}\\r\\n\\treturn \\\"\\\";\\r\\n};\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/utils.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/wikilink.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: relinkwikitextrule\\r\\n\\r\\nHandles CamelCase links\\r\\n\\r\\nWikiLink\\r\\n\\r\\nbut not:\\r\\n\\r\\n~WikiLink\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require(\\\"./utils.js\\\");\\r\\n\\r\\nexports.name = \\\"wikilink\\\";\\r\\n\\r\\nexports.report = function(text, callback, options) {\\r\\n\\tvar title = this.match[0],\\r\\n\\t\\tunlink = $tw.config.textPrimitives.unWikiLink;\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tif (title[0] !== unlink) {\\r\\n\\t\\tcallback(title, unlink + title);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nexports.relink = function(text, fromTitle, toTitle, options) {\\r\\n\\tvar entry = undefined,\\r\\n\\t\\ttitle = this.match[0];\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\tif (title === fromTitle && title[0] !== $tw.config.textPrimitives.unWikiLink) {\\r\\n\\t\\tentry = { output: this.makeWikilink(toTitle, options) };\\r\\n\\t\\tif (entry.output === undefined) {\\r\\n\\t\\t\\tentry.impossible = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn entry;\\r\\n};\\r\\n\\r\\nexports.makeWikilink = function(title, options) {\\r\\n\\tif (title.match(this.matchRegExp) && title[0] !== $tw.config.textPrimitives.unWikiLink) {\\r\\n\\t\\treturn title;\\r\\n\\t} else {\\r\\n\\t\\treturn utils.makePrettylink(this.parser, title);\\r\\n\\t}\\r\\n};\\r\\n\",\"module-type\":\"relinkwikitextrule\",\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/wikilink.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/context.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nBase class for relink contexts.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nfunction Context() {\\r\\n};\\r\\n\\r\\nexports.context = Context;\\r\\n\\r\\n// This class does no special handling of fields, operators, or attributes.\\r\\n// we pass it along to the parent.\\r\\nContext.prototype.getFields = function() {\\r\\n\\treturn this.parent.getFields();\\r\\n};\\r\\n\\r\\nContext.prototype.getOperator = function(name, index) {\\r\\n\\treturn this.parent.getOperator(name, index);\\r\\n};\\r\\n\\r\\nContext.prototype.getOperators = function() {\\r\\n\\treturn this.parent.getOperators();\\r\\n};\\r\\n\\r\\nContext.prototype.getAttribute = function(elementName) {\\r\\n\\treturn this.parent.getAttribute(elementName);\\r\\n};\\r\\n\\r\\nContext.prototype.getAttributes = function() {\\r\\n\\treturn this.parent.getAttributes();\\r\\n};\\r\\n\\r\\nContext.prototype.getMacro = function(macroName) {\\r\\n\\treturn this.parent.getMacro(macroName);\\r\\n};\\r\\n\\r\\nContext.prototype.getMacros = function() {\\r\\n\\treturn this.parent.getMacros();\\r\\n};\\r\\n\\r\\nContext.prototype.allowPrettylinks = function() {\\r\\n\\treturn this.parent.allowPrettylinks();\\r\\n};\\r\\n\\r\\nContext.prototype.allowWidgets = function() {\\r\\n\\treturn this.parent.allowWidgets();\\r\\n};\\r\\n\\r\\nContext.prototype.hasImports = function(value) {\\r\\n\\treturn this.parent.hasImports(value);\\r\\n};\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/context.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/import.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nThis handles the fetching and distribution of relink settings.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar WidgetContext = require('./widget').widget;\\r\\n\\r\\nfunction ImportContext(wiki, parent, filter) {\\r\\n\\tthis.parent = parent;\\r\\n\\tthis.wiki = wiki;\\r\\n\\tvar importWidget = createImportWidget(filter, this.wiki, this.parent.widget);\\r\\n\\tthis._compileList(importWidget.tiddlerList);\\r\\n\\t// This only works if only one filter is imported\\r\\n\\tthis.widget = this.getBottom(importWidget);\\r\\n\\t// Trickle this up, so that any containing tiddlercontext knows that this\\r\\n\\t// tiddler does some importing, and must be checked regularly.\\r\\n\\tparent.hasImports(true);\\r\\n};\\r\\n\\r\\nexports.import = ImportContext;\\r\\n\\r\\nImportContext.prototype = new WidgetContext();\\r\\n\\r\\nImportContext.prototype.changed = function(changes) {\\r\\n\\treturn this.widget && this.widget.refresh(changes)\\r\\n};\\r\\n\\r\\nfunction createImportWidget(filter, wiki, parent) {\\r\\n\\tvar widget = wiki.makeWidget( { tree: [{\\r\\n\\t\\ttype: \\\"importvariables\\\",\\r\\n\\t\\tattributes: {\\r\\n\\t\\t\\t\\\"filter\\\": {\\r\\n\\t\\t\\t\\ttype: \\\"string\\\",\\r\\n\\t\\t\\t\\tvalue: filter\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}] }, { parentWidget: parent} );\\r\\n\\tif (parent) {\\r\\n\\t\\tparent.children.push(widget);\\r\\n\\t}\\r\\n\\twidget.execute();\\r\\n\\twidget.renderChildren();\\r\\n\\tvar importWidget = widget.children[0];\\r\\n\\treturn importWidget;\\r\\n};\\r\\n\\r\\nImportContext.prototype._compileList = function(titleList) {\\r\\n\\tfor (var i = 0; i < titleList.length; i++) {\\r\\n\\t\\tvar parser = this.wiki.parseTiddler(titleList[i]);\\r\\n\\t\\tif (parser) {\\r\\n\\t\\t\\tvar parseTreeNode = parser.tree[0];\\r\\n\\t\\t\\twhile (parseTreeNode && parseTreeNode.type === \\\"set\\\") {\\r\\n\\t\\t\\t\\tif (parseTreeNode.relink) {\\r\\n\\t\\t\\t\\t\\tfor (var macroName in parseTreeNode.relink) {\\r\\n\\t\\t\\t\\t\\t\\tvar parameters = parseTreeNode.relink[macroName];\\r\\n\\t\\t\\t\\t\\t\\tfor (paramName in parameters) {\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.addSetting(this.wiki, macroName, paramName, parameters[paramName], titleList[i]);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tparseTreeNode = parseTreeNode.children && parseTreeNode.children[0];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/import.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/tiddler.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nContext for a tiddler. Defines nothing but makes an entry point to test if\\r\\na tiddler must be refreshed.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar WidgetContext = require('./widget.js').widget;\\r\\n\\r\\nfunction TiddlerContext(wiki, parentContext, title) {\\r\\n\\tthis.title = title;\\r\\n\\tthis.parent = parentContext;\\r\\n\\tvar globalWidget = parentContext && parentContext.widget;\\r\\n\\tvar parentWidget = wiki.makeWidget(null, {parentWidget: globalWidget});\\r\\n\\tparentWidget.setVariable('currentTiddler', title);\\r\\n\\tthis.widget = wiki.makeWidget(null, {parentWidget: parentWidget});\\r\\n};\\r\\n\\r\\nexports.tiddler = TiddlerContext;\\r\\n\\r\\nTiddlerContext.prototype = new WidgetContext();\\r\\n\\r\\nTiddlerContext.prototype.changed = function(changes) {\\r\\n\\treturn this.widget && this.widget.refresh(changes);\\r\\n};\\r\\n\\r\\n// By default, a tiddler context does not use imports, unless an import\\r\\n// statement is later discovered somewhere in the fields.\\r\\nTiddlerContext.prototype.hasImports = function(value) {\\r\\n\\treturn this._hasImports || (this._hasImports = value);\\r\\n};\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/tiddler.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/variable.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nThis handles the context for variables. Either from $set, $vars, or \\\\define\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar WidgetContext = require('./widget').widget;\\r\\n\\r\\nfunction VariableContext(parent, setParseTreeNode) {\\r\\n\\tthis.parent = parent;\\r\\n\\t// Now create a new widget and attach it.\\r\\n\\tvar attachPoint = parent.widget;\\r\\n\\tvar setWidget = attachPoint.makeChildWidget(setParseTreeNode);\\r\\n\\tattachPoint.children.push(setWidget);\\r\\n\\tsetWidget.computeAttributes();\\r\\n\\tsetWidget.execute();\\r\\n\\t// point our widget to bottom, where any other contexts would attach to\\r\\n\\tthis.widget = this.getBottom(setWidget);\\r\\n};\\r\\n\\r\\nexports.variable = VariableContext;\\r\\n\\r\\nVariableContext.prototype = new WidgetContext();\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/variable.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/whitelist.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nThis top-level context manages settings inside the whitelist. It never has\\r\\na parent.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require('../utils');\\r\\nvar Context = require('./context').context;\\r\\n\\r\\nvar prefix = \\\"$:/config/flibbles/relink/\\\";\\r\\n\\r\\nfunction WhitelistContext(wiki) {\\r\\n\\tbuild(this, wiki);\\r\\n};\\r\\n\\r\\nexports.whitelist = WhitelistContext;\\r\\n\\r\\nWhitelistContext.prototype = new Context();\\r\\n\\r\\n/**Hot directories are directories for which if anything changes inside them,\\r\\n * then Relink must completely rebuild its index.\\r\\n * By default, this includes the whitelist settings, but relink-titles also\\r\\n * includes its rules disabling directory.\\r\\n * This is the FIRST solution I came up with to this problem. If you're\\r\\n * looking at this, please make a github issue so I have a chance to understand\\r\\n * your needs. This is currently a HACK solution.\\r\\n */\\r\\nWhitelistContext.hotDirectories = [prefix];\\r\\n\\r\\nWhitelistContext.prototype.getAttribute = function(elementName) {\\r\\n\\treturn this.attributes[elementName];\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.getAttributes = function() {\\r\\n\\treturn flatten(this.attributes);\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.getFields = function() {\\r\\n\\treturn this.fields;\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.getOperator = function(operatorName, operandIndex) {\\r\\n\\tvar op = this.operators[operatorName];\\r\\n\\treturn op && op[operandIndex || 1];\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.getOperators = function() {\\r\\n\\tvar signatures = Object.create(null);\\r\\n\\tfor (var op in this.operators) {\\r\\n\\t\\tvar operandSet = this.operators[op];\\r\\n\\t\\tfor (var index in operandSet) {\\r\\n\\t\\t\\tvar entry = operandSet[index];\\r\\n\\t\\t\\tsignatures[entry.key] = entry;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn signatures;\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.getMacro = function(macroName) {\\r\\n\\treturn this.macros[macroName];\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.getMacros = function() {\\r\\n\\treturn flatten(this.macros);\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.changed = function(changedTiddlers) {\\r\\n\\tfor (var i = 0; i < WhitelistContext.hotDirectories.length; i++) {\\r\\n\\t\\tvar dir = WhitelistContext.hotDirectories[i];\\r\\n\\t\\tfor (var title in changedTiddlers) {\\r\\n\\t\\t\\tif (title.substr(0, dir.length) === dir) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false;\\r\\n};\\r\\n\\r\\nWhitelistContext.prototype.hasImports = function(value) {\\r\\n\\t// We don't care if imports are used. This is the global level.\\r\\n\\treturn false;\\r\\n};\\r\\n\\r\\n/**Factories define methods that create settings given config tiddlers.\\r\\n * for factory method 'example', it will be called once for each:\\r\\n * \\\"$:/config/flibbles/relink/example/...\\\" tiddler that exists.\\r\\n * the argument \\\"key\\\" will be set to the contents of \\\"...\\\"\\r\\n *\\r\\n * The reason I build relink settings in this convoluted way is to minimize\\r\\n * the number of times tiddlywiki has to run through EVERY tiddler looking\\r\\n * for relink config tiddlers.\\r\\n *\\r\\n * Also, by exporting \\\"factories\\\", anyone who extends relink can patch in\\r\\n * their own factory methods to create settings that are generated exactly\\r\\n * once per rename.\\r\\n */\\r\\nvar factories = {\\r\\n\\tattributes: function(attributes, data, key) {\\r\\n\\t\\tvar elem = root(key);\\r\\n\\t\\tvar attr = key.substr(elem.length+1);\\r\\n\\t\\tattributes[elem] = attributes[elem] || Object.create(null);\\r\\n\\t\\tattributes[elem][attr] = data;\\r\\n\\t},\\r\\n\\tfields: function(fields, data, name) {\\r\\n\\t\\tfields[name] = data;\\r\\n\\t},\\r\\n\\tmacros: function(macros, data, key) {\\r\\n\\t\\t// We take the last index, not the first, because macro\\r\\n\\t\\t// parameters can't have slashes, but macroNames can.\\r\\n\\t\\tvar name = dir(key);\\r\\n\\t\\tvar arg = key.substr(name.length+1);\\r\\n\\t\\tmacros[name] = macros[name] || Object.create(null);\\r\\n\\t\\tmacros[name][arg] = data;\\r\\n\\t},\\r\\n\\toperators: function(operators, data, key) {\\r\\n\\t\\t// We take the last index, not the first, because the operator\\r\\n\\t\\t// may have a slash to indicate parameter number\\r\\n\\t\\tvar pair = key.split('/');\\r\\n\\t\\tvar name = pair[0];\\r\\n\\t\\tdata.key = key;\\r\\n\\t\\toperators[name] = operators[name] || Object.create(null);\\r\\n\\t\\toperators[name][pair[1] || 1] = data;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nfunction build(settings, wiki) {\\r\\n\\tfor (var name in factories) {\\r\\n\\t\\tsettings[name] = Object.create(null);\\r\\n\\t}\\r\\n\\twiki.eachShadowPlusTiddlers(function(tiddler, title) {\\r\\n\\t\\tif (title.substr(0, prefix.length) === prefix) {\\r\\n\\t\\t\\tvar remainder = title.substr(prefix.length);\\r\\n\\t\\t\\tvar category = root(remainder);\\r\\n\\t\\t\\tvar factory = factories[category];\\r\\n\\t\\t\\tif (factory) {\\r\\n\\t\\t\\t\\tvar name = remainder.substr(category.length+1);\\r\\n\\t\\t\\t\\tvar data = utils.getType(tiddler.fields.text.trim());\\r\\n\\t\\t\\t\\tif (data) {\\r\\n\\t\\t\\t\\t\\tdata.source = title;\\r\\n\\t\\t\\t\\t\\t// Secret feature. You can access a config tiddler's\\r\\n\\t\\t\\t\\t\\t// fields from inside the fieldtype handler. Cool\\r\\n\\t\\t\\t\\t\\t// tricks can be done with this.\\r\\n\\t\\t\\t\\t\\tdata.fields = tiddler.fields;\\r\\n\\t\\t\\t\\t\\tfactory(settings[category], data, name);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t});\\r\\n};\\r\\n\\r\\n/* Returns first bit of a path. path/to/tiddler -> path\\r\\n */\\r\\nfunction root(string) {\\r\\n\\tvar index = string.indexOf('/');\\r\\n\\tif (index >= 0) {\\r\\n\\t\\treturn string.substr(0, index);\\r\\n\\t}\\r\\n};\\r\\n\\r\\n/* Returns all but the last bit of a path. path/to/tiddler -> path/to\\r\\n */\\r\\nfunction dir(string) {\\r\\n\\tvar index = string.lastIndexOf('/');\\r\\n\\tif (index >= 0) {\\r\\n\\t\\treturn string.substr(0, index);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/* Turns {dir: {file1: 'value1', file2: 'value2'}}\\r\\n * into {dir/file1: 'value1', dir/file2: 'value2'}\\r\\n */\\r\\nfunction flatten(set) {\\r\\n\\tvar signatures = Object.create(null);\\r\\n\\tfor (var outerName in set) {\\r\\n\\t\\tvar setItem = set[outerName];\\r\\n\\t\\tfor (var innerName in setItem) {\\r\\n\\t\\t\\tsignatures[outerName + \\\"/\\\" + innerName] = setItem[innerName];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn signatures;\\r\\n};\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/whitelist.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/widget.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nThis is a virtual subclass of context for contexts that exist within widgets\\r\\nof a specific tiddler.\\r\\n\\r\\nAll widget contexts must have a widget member.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar Context = require('./context.js').context;\\r\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\r\\n\\r\\nfunction WidgetContext() {};\\r\\n\\r\\nexports.widget = WidgetContext;\\r\\n\\r\\nWidgetContext.prototype = new Context();\\r\\n\\r\\nWidgetContext.prototype.getMacroDefinition = function(variableName) {\\r\\n\\t// widget.variables is prototyped, so it looks up into all its parents too\\r\\n\\treturn this.widget.variables[variableName] || $tw.macros[variableName];\\r\\n};\\r\\n\\r\\nWidgetContext.prototype.addSetting = function(wiki, macroName, parameter, type, sourceTitle) {\\r\\n\\tthis.macros = this.macros || Object.create(null);\\r\\n\\tvar macro = this.macros[macroName];\\r\\n\\ttype = type || utils.getDefaultType(wiki);\\r\\n\\tif (macro === undefined) {\\r\\n\\t\\tmacro = this.macros[macroName] = Object.create(null);\\r\\n\\t}\\r\\n\\tvar handler = utils.getType(type);\\r\\n\\tif (handler) {\\r\\n\\t\\thandler.source = sourceTitle;\\r\\n\\t\\t// We attach the fields of the defining tiddler for the benefit\\r\\n\\t\\t// of any 3rd party field types that want access to them.\\r\\n\\t\\tvar tiddler = wiki.getTiddler(sourceTitle);\\r\\n\\t\\thandler.fields = tiddler.fields;\\r\\n\\t\\tmacro[parameter] = handler;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nWidgetContext.prototype.getMacros = function() {\\r\\n\\tvar signatures = this.parent.getMacros();\\r\\n\\tif (this.macros) {\\r\\n\\t\\tfor (var macroName in this.macros) {\\r\\n\\t\\t\\tvar macro = this.macros[macroName];\\r\\n\\t\\t\\tfor (var param in macro) {\\r\\n\\t\\t\\t\\tsignatures[macroName + \\\"/\\\" + param] = macro[param];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn signatures;\\r\\n};\\r\\n\\r\\n/**This does strange handling because it's possible for a macro to have\\r\\n * its individual parameters whitelisted in separate places.\\r\\n * Don't know WHY someone would do this, but it can happen.\\r\\n */\\r\\nWidgetContext.prototype.getMacro = function(macroName) {\\r\\n\\tvar theseSettings = this.macros && this.macros[macroName];\\r\\n\\tvar parentSettings;\\r\\n\\tif (this.parent) {\\r\\n\\t\\tparentSettings = this.parent.getMacro(macroName);\\r\\n\\t}\\r\\n\\tif (theseSettings && parentSettings) {\\r\\n\\t\\t// gotta merge them without changing either. This is expensive,\\r\\n\\t\\t// but it'll happen rarely.\\r\\n\\t\\tvar rtnSettings = $tw.utils.extend(Object.create(null), theseSettings, parentSettings);\\r\\n\\t\\treturn rtnSettings;\\r\\n\\t}\\r\\n\\treturn theseSettings || parentSettings;\\r\\n};\\r\\n\\r\\n/**Returns the deepest descendant of the given widget.\\r\\n */\\r\\nWidgetContext.prototype.getBottom = function(widget) {\\r\\n\\twhile (widget.children.length > 0) {\\r\\n\\t\\twidget = widget.children[0];\\r\\n\\t}\\r\\n\\treturn widget;\\r\\n};\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/widget.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/wikitext.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nContext for wikitext. It can contain rules about what's allowed in this\\r\\ncurrent layer of wikitext.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar WidgetContext = require('./widget.js').widget;\\r\\n\\r\\nfunction WikitextContext(parentContext) {\\r\\n\\tthis.parent = parentContext;\\r\\n\\tthis.widget = parentContext.widget;\\r\\n};\\r\\n\\r\\nexports.wikitext = WikitextContext;\\r\\n\\r\\nWikitextContext.prototype = new WidgetContext();\\r\\n\\r\\n// Unless this specific context has rules about it, widgets and prettyLInks are allowed.\\r\\nWikitextContext.prototype.allowWidgets = enabled;\\r\\nWikitextContext.prototype.allowPrettylinks = enabled;\\r\\n\\r\\nfunction enabled() { return true; };\\r\\n\",\"module-type\":\"relinkcontext\",\"title\":\"$:/plugins/flibbles/relink/js/contexts/wikitext.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/backupIndexer.js\":{\"text\":\"/*\\\\\\r\\nmodule-type: library\\r\\n\\r\\nThis is a backup indexer Relink uses if the real one is disabled, or we're\\r\\n<V5.1.23. It's not nearly as good, but it caches some.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\r\\nvar TiddlerContext = utils.getContext('tiddler');\\r\\n\\r\\n// This is the indexer we use if the current wiki doesn't support indexers.\\r\\nfunction BackupIndexer(wiki) {\\r\\n\\tthis.wiki = wiki;\\r\\n};\\r\\n\\r\\nmodule.exports = BackupIndexer;\\r\\n\\r\\nBackupIndexer.prototype.lookup = function(title) {\\r\\n\\treturn getCache(this.wiki).lookup[title];\\r\\n};\\r\\n\\r\\nBackupIndexer.prototype.reverseLookup = function(title) {\\r\\n\\tvar index = getCache(this.wiki);\\r\\n\\tif (!index.reverse[title]) {\\r\\n\\t\\tvar record = Object.create(null);\\r\\n\\t\\tfor (var other in index.lookup) {\\r\\n\\t\\t\\tif (index.lookup[other][title]) {\\r\\n\\t\\t\\t\\trecord[other] = index.lookup[other][title];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tindex.reverse[title] = record;\\r\\n\\t}\\r\\n\\treturn index.reverse[title];\\r\\n};\\r\\n\\r\\n/* The backup indexer doesn't bother caching relink reports. It would always\\r\\n * be called after a draft tiddler had changed, which would defeat the point.\\r\\n */\\r\\nBackupIndexer.prototype.relinkLookup = function(fromTitle, toTitle, options) {\\r\\n\\tvar cache = getCache(this.wiki);\\r\\n\\tif (cache.lastRelinkFrom === fromTitle && cache.lastRelinkTo === toTitle) {\\r\\n\\t\\toptions.cache = cache.lastRelinkCache;\\r\\n\\t\\treturn cache.lastRelink;\\r\\n\\t}\\r\\n\\tcache.lastRelink = utils.getRelinkResults(this.wiki, fromTitle, toTitle, cache.context, undefined, options);\\r\\n\\tcache.lastRelinkFrom = fromTitle;\\r\\n\\tcache.lastRelinkTo = toTitle;\\r\\n\\tcache.lastRelinkCache = options.cache;\\r\\n\\treturn cache.lastRelink;\\r\\n};\\r\\n\\r\\nfunction getCache(wiki) {\\r\\n\\treturn wiki.getGlobalCache('relink', function() {\\r\\n\\t\\tvar tiddlerList = wiki.getRelinkableTitles();\\r\\n\\t\\tvar index = Object.create(null);\\r\\n\\t\\tvar wikiContext = utils.getWikiContext(wiki);\\r\\n\\t\\tfor (var i = 0; i < tiddlerList.length; i++) {\\r\\n\\t\\t\\tvar title = tiddlerList[i];\\r\\n\\t\\t\\tvar tiddler = wiki.getTiddler(title);\\r\\n\\t\\t\\tif (tiddler && !tiddler.fields[\\\"plugin-type\\\"]) {\\r\\n\\t\\t\\t\\tvar context = new TiddlerContext(wiki, wikiContext, title);\\r\\n\\t\\t\\t\\tindex[title] = utils.getTiddlerRelinkReferences(wiki, title, context);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tlookup: index,\\r\\n\\t\\t\\treverse: Object.create(null),\\r\\n\\t\\t\\tcontext: wikiContext};\\r\\n\\t});\\r\\n};\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/utils/backupIndexer.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/entry.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nEntries are deprecated. Don't use them. These classes are here just so that\\r\\nany 3rd party modules built for Relink V1 don't break.\\r\\n\\r\\nJust return an object like, {output: \\\"string\\\", impossible: true|undefined}\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nfunction EntryNode() {\\r\\n\\tthis.children = [];\\r\\n};\\r\\n\\r\\nmodule.exports = EntryNode;\\r\\n\\r\\n/**  PURE VIRTUAL\\r\\n * EntryNode.prototype.report = function() -> [\\\"string\\\", ...]\\r\\n */\\r\\n\\r\\nEntryNode.newType = function() {\\r\\n\\treturn EntryNode;\\r\\n};\\r\\n\\r\\nEntryNode.prototype.add = function(entry) {\\r\\n\\tthis.children.push(entry);\\r\\n};\\r\\n\\r\\nfunction EntryCollection() {\\r\\n\\tthis.children = Object.create(null);\\r\\n\\tthis.types = Object.create(null);\\r\\n};\\r\\n\\r\\nEntryNode.newCollection = function(name) {\\r\\n\\treturn EntryCollection;\\r\\n};\\r\\n\\r\\n// Again. I reiterate. Don't use this. All this is just legacy support.\\r\\nObject.defineProperty(EntryCollection, 'impossible', {\\r\\n\\tget: function() {\\r\\n\\t\\tvar imp = this._impossible;\\r\\n\\t\\tthis.eachChild(function(child) { imp = imp || child.impossible; });\\r\\n\\t\\treturn imp;\\r\\n\\t},\\r\\n\\tset: function(impossible) {\\r\\n\\t\\tthis._impossible = true;\\r\\n\\t}\\r\\n});\\r\\n\\r\\nEntryCollection.prototype.eachChild = function(method) {\\r\\n\\tfor (var child in this.children) {\\r\\n\\t\\tmethod(this.children[child]);\\r\\n\\t}\\r\\n};\\r\\n\\r\\nEntryCollection.prototype.addChild = function(child, name, type) {\\r\\n\\tthis.children[name] = child;\\r\\n\\tthis.types[name] = type;\\r\\n};\\r\\n\\r\\nEntryCollection.prototype.hasChildren = function() {\\r\\n\\treturn Object.keys(this.children).length > 0;\\r\\n};\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/utils/entry.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/placeholder.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nA method which doles out placeholders when requested, and constructs\\r\\nthe necessary supporting pragma when requested.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nvar utils = require('../utils');\\r\\n\\r\\nfunction Placeholder() {\\r\\n\\tthis.placeholders = Object.create(null);\\r\\n\\tthis.reverseMap = {};\\r\\n\\tthis.used = Object.create(null);\\r\\n};\\r\\n\\r\\nmodule.exports = Placeholder;\\r\\n\\r\\nPlaceholder.prototype.getPlaceholderFor = function(value, category) {\\r\\n\\tthis.reverseMap[category] = this.reverseMap[category] || Object.create(null);\\r\\n\\tvar placeholder = this.reverseMap[category][value];\\r\\n\\tif (placeholder) {\\r\\n\\t\\treturn placeholder;\\r\\n\\t}\\r\\n\\tvar config = (this.parser && this.parser.context) || utils.getWikiContext(this.parser.wiki);\\r\\n\\tvar number = 0;\\r\\n\\tvar prefix = \\\"relink-\\\"\\r\\n\\tif (category && category !== \\\"title\\\") {\\r\\n\\t\\t// I don't like \\\"relink-title-1\\\". \\\"relink-1\\\" should be for\\r\\n\\t\\t// titles. lists, and filters can have descriptors though.\\r\\n\\t\\tprefix += category + \\\"-\\\";\\r\\n\\t}\\r\\n\\tdo {\\r\\n\\t\\tnumber += 1;\\r\\n\\t\\tplaceholder = prefix + number;\\r\\n\\t} while (config.getMacroDefinition(placeholder) || this.used[placeholder]);\\r\\n\\tthis.placeholders[placeholder] = value;\\r\\n\\tthis.reverseMap[category][value] = placeholder;\\r\\n\\tthis.used[placeholder] = true;\\r\\n\\treturn placeholder;\\r\\n};\\r\\n\\r\\n// For registering placeholders that already existed\\r\\nPlaceholder.prototype.registerExisting = function(key, value) {\\r\\n\\tthis.reverseMap[value] = key;\\r\\n\\tthis.used[key] = true;\\r\\n};\\r\\n\\r\\nPlaceholder.prototype.getPreamble = function() {\\r\\n\\tvar results = [];\\r\\n\\tvar keys = Object.keys(this.placeholders);\\r\\n\\tif (keys.length > 0) {\\r\\n\\t\\tkeys.sort();\\r\\n\\t\\tfor (var i = 0; i < keys.length; i++) {\\r\\n\\t\\t\\tvar name = keys[i];\\r\\n\\t\\t\\tvar val = this.placeholders[name];\\r\\n\\t\\t\\tresults.push(\\\"\\\\\\\\define \\\"+name+\\\"() \\\"+val+\\\"\\\\n\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn results.join('');\\r\\n};\\r\\n\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/utils/placeholder.js\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/rebuilder.js\":{\"text\":\"/*\\\\\\r\\n\\r\\nThis helper class aids in reconstructing an existing string with new parts.\\r\\n\\r\\n\\\\*/\\r\\n\\r\\nfunction Rebuilder(text, start) {\\r\\n\\tthis.text = text;\\r\\n\\tthis.index = start || 0;\\r\\n\\tthis.pieces = [];\\r\\n};\\r\\n\\r\\nmodule.exports = Rebuilder;\\r\\n\\r\\n/**Pieces must be added consecutively.\\r\\n * Start and end are the indices in the old string specifying where to graft\\r\\n * in the new piece.\\r\\n */\\r\\nRebuilder.prototype.add = function(value, start, end) {\\r\\n\\tthis.pieces.push(this.text.substring(this.index, start), value);\\r\\n\\tthis.index = end;\\r\\n};\\r\\n\\r\\nRebuilder.prototype.changed = function() {\\r\\n\\treturn this.pieces.length > 0;\\r\\n};\\r\\n\\r\\nRebuilder.prototype.results = function(end) {\\r\\n\\tif (this.changed()) {\\r\\n\\t\\tthis.pieces.push(this.text.substring(this.index, end));\\r\\n\\t\\treturn this.pieces.join('');\\r\\n\\t}\\r\\n\\treturn undefined;\\r\\n};\\r\\n\",\"module-type\":\"library\",\"title\":\"$:/plugins/flibbles/relink/js/utils/rebuilder.js\",\"type\":\"application/javascript\"},\"$:/config/flibbles/relink/attributes/$button/set\":{\"title\":\"$:/config/flibbles/relink/attributes/$button/set\",\"text\":\"reference\"},\"$:/config/flibbles/relink/attributes/$button/setTo\":{\"title\":\"$:/config/flibbles/relink/attributes/$button/setTo\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$button/to\":{\"title\":\"$:/config/flibbles/relink/attributes/$button/to\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$checkbox/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$checkbox/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$checkbox/tag\":{\"title\":\"$:/config/flibbles/relink/attributes/$checkbox/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$count/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$count/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$draggable/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$draggable/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$draggable/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$draggable/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$edit-bitmap/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$edit-bitmap/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$edit-text/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$edit-text/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$edit/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$edit/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$encrypt/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$encrypt/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$fieldmangler/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$fieldmangler/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$fields/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$fields/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$image/source\":{\"title\":\"$:/config/flibbles/relink/attributes/$image/source\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$importvariables/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$importvariables/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$linkcatcher/to\":{\"title\":\"$:/config/flibbles/relink/attributes/$linkcatcher/to\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$linkcatcher/set\":{\"title\":\"$:/config/flibbles/relink/attributes/$linkcatcher/set\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$link/to\":{\"title\":\"$:/config/flibbles/relink/attributes/$link/to\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$list/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$list/template\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$list/editTemplate\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/editTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$list/emptyMessage\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/emptyMessage\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/attributes/$list/history\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/history\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$navigator/story\":{\"title\":\"$:/config/flibbles/relink/attributes/$navigator/story\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$navigator/history\":{\"title\":\"$:/config/flibbles/relink/attributes/$navigator/history\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$radio/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$radio/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$range/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$range/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$reveal/stateTitle\":{\"title\":\"$:/config/flibbles/relink/attributes/$reveal/stateTitle\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$select/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$select/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$setvariable/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$setvariable/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$setvariable/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$setvariable/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$setvariable/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$setvariable/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$set/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$set/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$set/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$set/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$set/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$set/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$tiddler/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$tiddler/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$transclude/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$transclude/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$transclude/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$transclude/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$view/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$view/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$view/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$view/subtiddler\",\"text\":\"title\"},\"$:/plugins/flibbles/relink/configuration\":{\"title\":\"$:/plugins/flibbles/relink/configuration\",\"text\":\"<div class=\\\"tc-control-panel\\\">\\r\\n<<tabs \\\"[all[shadows+tiddlers]tag[$:/tags/flibbles/relink/Configuration]!has[draft.of]]\\\" \\\"$:/plugins/flibbles/relink/ui/configuration/Fields\\\">>\\r\\n</div>\\r\\n\"},\"$:/config/flibbles/relink/fields/caption\":{\"title\":\"$:/config/flibbles/relink/fields/caption\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/fields/filter\":{\"title\":\"$:/config/flibbles/relink/fields/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/fields/list\":{\"title\":\"$:/config/flibbles/relink/fields/list\",\"text\":\"list\"},\"$:/config/flibbles/relink/fields/list-after\":{\"title\":\"$:/config/flibbles/relink/fields/list-after\",\"text\":\"title\"},\"$:/config/flibbles/relink/fields/list-before\":{\"title\":\"$:/config/flibbles/relink/fields/list-before\",\"text\":\"title\"},\"$:/config/flibbles/relink/fields/tags\":{\"title\":\"$:/config/flibbles/relink/fields/tags\",\"text\":\"list\"},\"$:/plugins/flibbles/relink/language/Buttons/Delete/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/Delete/Hint\",\"text\":\"delete\"},\"$:/plugins/flibbles/relink/language/Buttons/LinkToInline/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/LinkToInline/Hint\",\"text\":\"go to defining tiddler\"},\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Hint\",\"text\":\"Specify a new widget/element attribute to be updated whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewField/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewField/Hint\",\"text\":\"Specify a new field to be updated whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewField/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewField/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Hint\",\"text\":\"Specify a new filter operator to be considered whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Hint\",\"text\":\"Specify a new macro parameter to be updated whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Error/InvalidAttributeName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidAttributeName\",\"text\":\"Illegal characters in attribute name \\\"<$text text=<<attributeName>>/>\\\". Attributes cannot contain slashes ('/'), closing angle or square brackets ('>' or ']'), quotes or apostrophes ('\\\"' or \\\"'\\\"), equals ('='), or whitespace\"},\"$:/plugins/flibbles/relink/language/Error/InvalidElementName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidElementName\",\"text\":\"Illegal characters in element/widget name \\\"<$text text=<<elementName>>/>\\\". Element tags can only contain letters and the characters hyphen (`-`) and dollar sign (`$`)\"},\"$:/plugins/flibbles/relink/language/Error/InvalidMacroName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidMacroName\",\"text\":\"Illegal characters in macro name \\\"<$text text=<<macroName>>/>\\\". Macros cannot contain whitespace\"},\"$:/plugins/flibbles/relink/language/Error/InvalidParameterName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidParameterName\",\"text\":\"Illegal characters in parameter name \\\"<$text text=<<parameterName>>/>\\\". Parameters can only contain letters, digits, and the characters underscore (`_`) and hyphen (`-`)\"},\"$:/plugins/flibbles/relink/language/Error/RelinkFilterOperator\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/RelinkFilterOperator\",\"text\":\"Filter Error: Unknown suffix for the 'relink' filter operator\"},\"$:/plugins/flibbles/relink/language/Error/ReportFailedRelinks\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/ReportFailedRelinks\",\"text\":\"Relink could not update '<<from>>' to '<<to>>' inside the following tiddlers:\"},\"$:/plugins/flibbles/relink/language/Error/UnrecognizedType\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/UnrecognizedType\",\"text\":\"Relink parse error: Unrecognized field type '<<type>>'\"},\"$:/plugins/flibbles/relink/language/Help/Attributes\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Attributes\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Attributes]]}}}>Attributes documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/Help/Fields\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Fields\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Fields]]}}}>Fields documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/Help/Macros\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Macros\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Macros]]}}}>Macros documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/Help/Operators\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Operators\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Operators]]}}}>Operators documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Empty\":{\"title\":\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Empty\",\"text\":\"No tiddlers contain any fields, links, macros, transclusions, or widgets referencing this one\"},\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Description\":{\"title\":\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Description\",\"text\":\"The following tiddlers contain fields, links, macros, transclusions, or widgets referencing this one:\"},\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Caption\",\"text\":\"//Relink// References\"},\"$:/plugins/flibbles/relink/language/ui/Attributes/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Attributes/Caption\",\"text\":\"Attributes\"},\"$:/plugins/flibbles/relink/language/ui/Fields/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Fields/Caption\",\"text\":\"Fields\"},\"$:/plugins/flibbles/relink/language/ui/Macros/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Macros/Caption\",\"text\":\"Macros\"},\"$:/plugins/flibbles/relink/language/ui/Operators/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Operators/Caption\",\"text\":\"Operators\"},\"$:/plugins/flibbles/relink/license\":{\"title\":\"$:/plugins/flibbles/relink/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<a href={{$:/plugins/flibbles/relink!!demo}}>Relink Plugin</a> Copyright (c) 2019-<<now YYYY>> Cameron Fischer\\n\\n[[BSD 3-Clause License|https://raw.githubusercontent.com/flibbles/tw5-relink/master/LICENSE]]\\r\\n\"},\"$:/config/flibbles/relink/macros/csvtiddlers/filter\":{\"title\":\"$:/config/flibbles/relink/macros/csvtiddlers/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/datauri/title\":{\"title\":\"$:/config/flibbles/relink/macros/datauri/title\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/jsontiddler/title\":{\"title\":\"$:/config/flibbles/relink/macros/jsontiddler/title\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/jsontiddlers/filter\":{\"title\":\"$:/config/flibbles/relink/macros/jsontiddlers/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/list-links/filter\":{\"title\":\"$:/config/flibbles/relink/macros/list-links/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/list-links-draggable/tiddler\":{\"title\":\"$:/config/flibbles/relink/macros/list-links-draggable/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/list-links-draggable/itemTemplate\":{\"title\":\"$:/config/flibbles/relink/macros/list-links-draggable/itemTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/list-tagged-draggable/tag\":{\"title\":\"$:/config/flibbles/relink/macros/list-tagged-draggable/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/list-tagged-draggable/itemTemplate\":{\"title\":\"$:/config/flibbles/relink/macros/list-tagged-draggable/itemTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tabs/buttonTemplate\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/buttonTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tabs/default\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/default\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tabs/tabsList\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/tabsList\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/tabs/template\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tag/tag\":{\"title\":\"$:/config/flibbles/relink/macros/tag/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tag-pill/tag\":{\"title\":\"$:/config/flibbles/relink/macros/tag-pill/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/timeline/subfilter\":{\"title\":\"$:/config/flibbles/relink/macros/timeline/subfilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc/itemClassFilter\":{\"title\":\"$:/config/flibbles/relink/macros/toc/itemClassFilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc-expandable/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-expandable/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-expandable/itemClassFilter\":{\"title\":\"$:/config/flibbles/relink/macros/toc-expandable/itemClassFilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc-expandable/exclude\":{\"title\":\"$:/config/flibbles/relink/macros/toc-expandable/exclude\",\"text\":\"list\"},\"$:/config/flibbles/relink/macros/toc-selective-expandable/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-selective-expandable/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-selective-expandable/itemClassFilter\":{\"title\":\"$:/config/flibbles/relink/macros/toc-selective-expandable/itemClassFilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc-selective-expandable/exclude\":{\"title\":\"$:/config/flibbles/relink/macros/toc-selective-expandable/exclude\",\"text\":\"list\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/selectedTiddler\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/selectedTiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/unselectedText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/unselectedText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/missingText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/missingText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/template\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/selectedTiddler\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/selectedTiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/unselectedText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/unselectedText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/missingText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/missingText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/template\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/operators/list\":{\"title\":\"$:/config/flibbles/relink/operators/list\",\"text\":\"reference\"},\"$:/config/flibbles/relink/operators/tag\":{\"title\":\"$:/config/flibbles/relink/operators/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/operators/title\":{\"title\":\"$:/config/flibbles/relink/operators/title\",\"text\":\"title\"},\"$:/config/flibbles/relink/operators/field:title\":{\"title\":\"$:/config/flibbles/relink/operators/field:title\",\"text\":\"title\"},\"$:/language/EditTemplate/Title/Impossibles/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/Impossibles/Prompt\",\"text\":\"''Warning:'' Not all references in the following tiddlers can be updated by //Relink// due to the complexity of the new title:\"},\"$:/language/EditTemplate/Title/References/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/References/Prompt\",\"text\":\"The following tiddlers will be updated if relinking:\"},\"$:/language/EditTemplate/Title/Relink/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/Relink/Prompt\",\"text\":\"Use //Relink// to update ''<$text text=<<fromTitle>>/>'' to ''<$text text=<<toTitle>>/>'' across all other tiddlers\"},\"$:/core/ui/EditTemplate/title\":{\"title\":\"$:/core/ui/EditTemplate/title\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"<$edit-text field=\\\"draft.title\\\" class=\\\"tc-titlebar tc-edit-texteditor\\\" focus=\\\"true\\\" tabindex={{$:/config/EditTabIndex}}/>\\n\\n<$reveal state=\\\"!!draft.title\\\" type=\\\"nomatch\\\" text={{!!draft.of}} tag=\\\"div\\\">\\n\\n<$vars pattern=\\\"\\\"\\\"[\\\\|\\\\[\\\\]{}]\\\"\\\"\\\" bad-chars=\\\"\\\"\\\"`| [ ] { }`\\\"\\\"\\\">\\n\\n<$list filter=\\\"[all[current]regexp:draft.title<pattern>]\\\" variable=\\\"listItem\\\">\\n\\n<div class=\\\"tc-message-box\\\">\\n\\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/BadCharacterWarning}}\\n\\n</div>\\n\\n</$list>\\n\\n</$vars>\\n\\n<$list filter=\\\"[{!!draft.title}!is[missing]]\\\" variable=\\\"listItem\\\">\\n\\n<div class=\\\"tc-message-box\\\">\\n\\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/Exists/Prompt}}\\n\\n</div>\\n\\n</$list>\\n\\n<$list filter=\\\"[{!!draft.of}!is[missing]]\\\" variable=\\\"listItem\\\">\\n\\n<$vars fromTitle={{!!draft.of}} toTitle={{!!draft.title}}>\\n\\n<$checkbox tiddler=\\\"$:/config/RelinkOnRename\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> {{$:/language/EditTemplate/Title/Relink/Prompt}}</$checkbox>\\n\\n<$tiddler tiddler=<<fromTitle>> >\\n\\n<$list filter=\\\"[relink:wouldchange<toTitle>limit[1]]\\\" variable=\\\"listItem\\\">\\n\\n<$vars stateTiddler=<<qualify \\\"$:/state/edit/references\\\">> >\\n\\n<$set\\r\\n\\tname=\\\"prompt\\\"\\r\\n\\tfilter=\\\"[relink:wouldchange<toTitle>relink:impossible<toTitle>]\\\"\\r\\n\\tvalue=\\\"EditTemplate/Title/Impossibles/Prompt\\\"\\r\\n\\temptyValue=\\\"EditTemplate/Title/References/Prompt\\\" >\\r\\n<$reveal type=\\\"nomatch\\\" state=<<stateTiddler>> text=\\\"show\\\">\\r\\n<$button set=<<stateTiddler>> setTo=\\\"show\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/right-arrow}}\\r\\n<$macrocall $name=lingo title=<<prompt>> />\\r\\n</$button>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" state=<<stateTiddler>> text=\\\"show\\\">\\r\\n<$button set=<<stateTiddler>> setTo=\\\"hide\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/down-arrow}}\\r\\n<$macrocall $name=lingo title=<<prompt>> />\\r\\n</$button>\\r\\n</$reveal>\\r\\n</$set>\\n\\n<$reveal type=\\\"match\\\" state=<<stateTiddler>> text=\\\"show\\\">\\r\\n<$list variable=\\\"listItem\\\" filter=\\\"[relink:wouldchange<toTitle>!title[$:/StoryList]sort[title]]\\\" template=\\\"$:/plugins/flibbles/relink/ui/ListItemTemplate\\\">\\r\\n</$list>\\r\\n</$reveal>\\n\\n</$vars>\\n\\n</$list>\\n\\n</$tiddler>\\n\\n</$vars>\\n\\n</$list>\\n\\n</$reveal>\\r\\n\"},\"$:/config/flibbles/relink/PluginLibrary\":{\"title\":\"$:/config/flibbles/relink/PluginLibrary\",\"caption\":\"//Relink// Library\",\"url\":\"https://flibbles.github.io/tw5-relink/library/index.html\",\"tags\":\"$:/tags/PluginLibrary\",\"text\":\"The //Relink// library contains //Relink// as well as its supplemental plugins. It is maintained by Flibbles. See the [[github page|https://github.com/flibbles/tw5-relink]] for more information.\\r\\n\"},\"$:/plugins/flibbles/relink/readme\":{\"title\":\"$:/plugins/flibbles/relink/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When renaming a tiddler, Relink can update the fields, filters, and widgets\\r\\nof all other tiddlers. However, it works through whitelisting.\\n\\nIt's already configured to update tiddler titles for all core widgets, filters,\\r\\nand fields, but the whitelists can be customized for each of this in the\\r\\nconfiguration panel.\\n\\nSee <a href={{$:/plugins/flibbles/relink!!source}}>the tw5-relink website</a> for more details and examples.\\r\\n\"},\"$:/config/flibbles/relink/settings/default-type\":{\"title\":\"$:/config/flibbles/relink/settings/default-type\",\"text\":\"title\"},\"$:/plugins/flibbles/relink/ui/ListItemTemplate\":{\"title\":\"$:/plugins/flibbles/relink/ui/ListItemTemplate\",\"text\":\"<$set\\r\\n\\tname=\\\"classes\\\"\\r\\n\\tfilter=\\\"[<listItem>relink:impossible<toTitle>]\\\"\\r\\n\\tvalue=\\\"tc-menu-list-item tc-relink-impossible\\\"\\r\\n\\temptyValue=\\\"tc-menu-list-item\\\">\\r\\n<div class=<<classes>>>\\r\\n<$link to=<<listItem>>><$text text=<<listItem>> /></$link>\\r\\n</div>\\r\\n</$set>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/TiddlerInfo/References\":{\"title\":\"$:/plugins/flibbles/relink/ui/TiddlerInfo/References\",\"caption\":\"{{$:/plugins/flibbles/relink/language/TiddlerInfo/References/Caption}}\",\"tags\":\"$:/tags/TiddlerInfo\",\"text\":\"\\\\define lingo-base() $:/plugins/flibbles/relink/language/TiddlerInfo/\\r\\n\\\\define filter() [all[current]relink:backreferences[]!title[$:/StoryList]!prefix[$:/temp/]sort[title]]\\r\\n<$list filter=\\\"[subfilter<filter>first[]]\\\">\\n\\n<<lingo References/Description>>\\r\\n</$list>\\n\\n<table class=\\\"tc-relink-references-table\\\">\\r\\n<tbody>\\r\\n<$list filter=<<filter>> emptyMessage=<<lingo References/Empty>> variable=\\\"listItem\\\" template=\\\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\\\" />\\r\\n</tbody>\\r\\n</table>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\":{\"title\":\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\",\"text\":\"<tr class=\\\"tc-relink-references\\\">\\r\\n<td class=\\\"tc-relink-references-title\\\">\\r\\n<$link to=<<listItem>>/>\\r\\n</td>\\r\\n<td class=\\\"tc-relink-references-report\\\">\\r\\n<$list filter=\\\"[<listItem>relink:report<currentTiddler>]\\\">\\n\\n<$text text=<<currentTiddler>> />\\r\\n</$list>\\n\\n</td>\\r\\n</tr>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/components/button-delete\":{\"title\":\"$:/plugins/flibbles/relink/ui/components/button-delete\",\"text\":\"\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\r\\n\\\\define prefix() $:/config/flibbles/relink/\\n\\n<$list filter=\\\"[all[current]prefix<prefix>]\\\" >\\r\\n<$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/plugins/flibbles/relink/language/Buttons/Delete/Hint}}><$list filter=\\\"[all[current]is[tiddler]]\\\">\\r\\n<$action-deletetiddler $tiddler=<<currentTiddler>> />\\r\\n</$list><$list filter=\\\"[all[current]is[shadow]]\\\">\\r\\n<$action-setfield $tiddler=<<tiddlerName>> text=\\\"\\\" />\\r\\n</$list>\\r\\n{{$:/core/images/delete-button}}\\r\\n</$button>\\r\\n</$list><$list filter=\\\"[all[current]!prefix<prefix>]\\\">\\r\\n<$link><$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/plugins/flibbles/relink/language/Buttons/LinkToInline/Hint}}>{{$:/core/images/link}}</$button></$link>\\r\\n</$list>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/components/select-fieldtype\":{\"title\":\"$:/plugins/flibbles/relink/ui/components/select-fieldtype\",\"text\":\"\\\\define prefix() $:/config/flibbles/relink/\\n\\n<$vars type={{{ [<signature>relink:type[]] }}} >\\r\\n<$list filter=\\\"[all[current]prefix<prefix>]\\\" >\\r\\n<$select tiddler=<<currentTiddler>> >\\r\\n<$list variable=\\\"option\\\" filter=\\\"[relink:types[]]\\\">\\r\\n<option><$text text=<<option>> /></option>\\r\\n</$list>\\r\\n</$select>\\r\\n</$list><$list filter=\\\"[all[current]!prefix<prefix>]\\\">\\r\\n<$text text=<<type>> />\\r\\n</$list>\\r\\n</$vars>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/components/tables\":{\"title\":\"$:/plugins/flibbles/relink/ui/components/tables\",\"text\":\"\\\\define .make-table(title, plugin, default-table-state:yes)\\n\\n<$list variable=\\\"render\\\" filter=\\\"[relink:signatures<__plugin__>prefix<__category__>first[]]\\\">\\r\\n<$set name=\\\"table-state\\\" value=<<qualify \\\"\\\"\\\"$:/state/flibbles/relink/tables/$title$\\\"\\\"\\\">>>\\r\\n<tr><th class=\\\"tc-relink-header-plugin\\\" colspan=<<column-count>> >\\r\\n<$reveal type=\\\"nomatch\\\" state=<<table-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-table-state$\\\"\\\"\\\">\\r\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<table-state>> setTo=\\\"yes\\\">\\r\\n{{$:/core/images/right-arrow}} ''$title$''\\r\\n</$button>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" state=<<table-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-table-state$\\\"\\\"\\\">\\r\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<table-state>> setTo=\\\"no\\\">\\r\\n{{$:/core/images/down-arrow}} ''$title$''\\r\\n</$button>\\r\\n</$reveal>\\r\\n</th></tr>\\r\\n<$list\\r\\n\\tvariable=\\\"signature\\\"\\r\\n\\tfilter=\\\"[relink:signatures<__plugin__>prefix<__category__>sort[]]\\\">\\r\\n<$vars key={{{ [<signature>removeprefix<__category__>removeprefix[/]] }}} >\\r\\n<$tiddler tiddler={{{[<signature>relink:source[]]}}} >\\r\\n<$reveal tag=\\\"tr\\\" type=\\\"match\\\" state=<<table-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-table-state$\\\"\\\"\\\">\\r\\n<$macrocall $name=<<__list-row-macro__>> signature=<<signature>> />\\r\\n<td class=\\\"tc-relink-column-type\\\">{{||$:/plugins/flibbles/relink/ui/components/select-fieldtype}}</td>\\r\\n<td class=\\\"tc-relink-column-delete\\\">{{||$:/plugins/flibbles/relink/ui/components/button-delete}}</td>\\r\\n</$reveal>\\r\\n</$tiddler>\\r\\n</$vars>\\r\\n</$list>\\r\\n</$set>\\r\\n</$list>\\r\\n\\\\end\\n\\n\\\\define tables(category, list-row-macro, header-list)\\r\\n<$vars\\r\\n\\tcolumn-count={{{[enlist<__header-list__>] [[DeleteColumn]] +[count[]]}}}>\\n\\n<table class=\\\"tc-relink-whitelist\\\"><tbody>\\r\\n<tr>\\r\\n<$list variable=\\\"header\\\" filter=\\\"[enlist<__header-list__>butlast[]]\\\"><th><<header>></th></$list>\\r\\n<!-- We have the last column extend into the delete/link column, which is unlabeled. -->\\r\\n<th colspan=2><$text text={{{ [enlist<__header-list__>last[]] }}} /></th>\\r\\n</tr>\\n\\n<<.make-table Custom \\\"\\\" yes>>\\n\\n<$list\\r\\n\\tfilter=\\\"[plugin-type[plugin]![$:/core]![$:/plugins/flibbles/relink]]\\\">\\r\\n<$set name=\\\"subtitle\\\" value={{!!description}} emptyValue={{!!title}} >\\r\\n<$macrocall $name=\\\".make-table\\\" title=<<subtitle>> plugin=<<currentTiddler>> />\\r\\n</$set>\\r\\n</$list>\\n\\n<<.make-table Core \\\"$:/plugins/flibbles/relink\\\">>\\n\\n</tbody></table>\\r\\n</$vars>\\r\\n\\\\end\\r\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Attributes\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Attributes\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Attributes/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\r\\n\\\\define prefix-attr() $:/config/flibbles/relink/attributes/\\r\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\r\\n\\\\define element-name-tiddler() $:/state/flibbles/relink/element-name\\r\\n\\\\define attribute-name-tiddler() $:/state/flibbles/relink/attribute-name\\n\\n\\\\define row()\\r\\n<$set name=\\\"element\\\"\\r\\n      filter=\\\"[<key>splitbefore[/]removesuffix[/]]\\\">\\r\\n<$set name=\\\"attribute\\\"\\r\\n      filter=\\\"[<key>removeprefix<element>removeprefix[/]]\\\">\\r\\n<td><$text text=<<element>> /></td>\\r\\n<td><$text text=<<attribute>> /></td>\\r\\n</$set></$set>\\r\\n\\\\end\\r\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Attributes}}\\n\\n<em class=\\\"tc-edit\\\">Add a new attribute:</em>\\r\\n<$edit-text\\r\\n\\ttiddler=<<element-name-tiddler>>\\r\\n\\ttag=\\\"input\\\"\\r\\n\\tdefault=\\\"\\\"\\r\\n\\tplaceholder=\\\"widget/element\\\" />\\r\\n<$edit-text\\r\\n\\ttiddler=<<attribute-name-tiddler>>\\r\\n\\ttag=\\\"input\\\"\\r\\n\\tdefault=\\\"\\\"\\r\\n\\tplaceholder=\\\"attribute\\\" />\\r\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<element-name-tiddler>> >\\r\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<attribute-name-tiddler>> >\\r\\n<$relinkmangler>\\r\\n<$button\\r\\n\\ttooltip={{$(lingo-base)$NewAttribute/Hint}}\\r\\n\\taria-label={{$(lingo-base)$NewAttribute/Caption}}>\\r\\n<$action-sendmessage\\r\\n\\t$message=\\\"relink-add-attribute\\\"\\r\\n\\telement={{$(element-name-tiddler)$}}\\r\\n\\tattribute={{$(attribute-name-tiddler)$}} />\\r\\n<$action-deletetiddler $tiddler=<<attribute-name-tiddler>> />\\r\\n<$action-deletetiddler $tiddler=<<element-name-tiddler>> />\\r\\n<$text text={{$(lingo-base)$NewAttribute/Caption}}/>\\r\\n</$button>\\r\\n</$relinkmangler>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<attribute-name-tiddler>> >\\r\\n<$button>\\r\\n<$text text={{$(lingo-base)$NewAttribute/Caption}}/>\\r\\n</$button>\\r\\n</$reveal>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<element-name-tiddler>> >\\r\\n<$button>\\r\\n<$text text={{$(lingo-base)$NewAttribute/Caption}}/>\\r\\n</$button>\\r\\n</$reveal>\\n\\n<$macrocall\\r\\n\\t$name=tables\\r\\n\\tcategory=\\\"attributes\\\"\\r\\n\\theader-list=\\\"[[Widget/HTML Element]] Attribute Type\\\"\\r\\n\\tlist-row-macro=\\\"row\\\" />\\r\\n\\\\end\\n\\n<<body>>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Fields\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Fields\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Fields/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\r\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\r\\n\\\\define field-name-tiddler() $:/state/flibbles/relink/field-name\\n\\n\\\\define row()\\r\\n<td><$text text=<<key>> /></td>\\r\\n\\\\end\\r\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Fields}}\\n\\n<em class=\\\"tc-edit\\\">Add a new field:</em>\\r\\n<$edit-text\\r\\n\\ttiddler=<<field-name-tiddler>>\\r\\n\\ttag=\\\"input\\\"\\r\\n\\tdefault=\\\"\\\"\\r\\n\\tplaceholder=\\\"field name\\\" />\\r\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<field-name-tiddler>> >\\r\\n<$relinkmangler>\\r\\n<$button\\r\\n\\ttooltip={{$(lingo-base)$NewField/Hint}}\\r\\n\\taria-label={{$(lingo-base)$NewField/Caption}}>\\r\\n<$action-sendmessage\\r\\n\\t$message=\\\"relink-add-field\\\"\\r\\n\\tfield={{$(field-name-tiddler)$}} />\\r\\n<$action-deletetiddler $tiddler=<<field-name-tiddler>> />\\r\\n<$text text={{$(lingo-base)$NewField/Caption}}/>\\r\\n</$button>\\r\\n</$relinkmangler>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<field-name-tiddler>> >\\r\\n<$button>\\r\\n<$text text={{$(lingo-base)$NewField/Caption}}/>\\r\\n</$button>\\r\\n</$reveal>\\n\\n\\r\\n<$macrocall\\r\\n\\t$name=tables\\r\\n\\tcategory=\\\"fields\\\"\\r\\n\\theader-list=\\\"[[Field Name]] [[Field Type]]\\\"\\r\\n\\tlist-row-macro=\\\"row\\\" />\\r\\n\\\\end\\n\\n<<body>>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Macros\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Macros\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Macros/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\r\\n\\\\define prefix-macro() $:/config/flibbles/relink/macros/\\r\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\r\\n\\\\define macro-name-tiddler() $:/state/flibbles/relink/macro-name\\r\\n\\\\define parameter-name-tiddler() $:/state/flibbles/relink/parameter-name\\n\\n\\\\define row()\\r\\n<$set name=\\\"parameter\\\"\\r\\n      filter=\\\"[<key>relink:splitafter[/]]\\\">\\r\\n<$set name=\\\"macro\\\"\\r\\n      filter=\\\"[<key>removesuffix<parameter>removesuffix[/]]\\\">\\r\\n<td><$text text=<<macro>> /></td>\\r\\n<td><$text text=<<parameter>> /></td>\\r\\n</$set></$set>\\r\\n\\\\end\\r\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Macros}}\\n\\n<em class=\\\"tc-edit\\\">Add a new macro parameter:</em>\\r\\n<$edit-text\\r\\n\\ttiddler=<<macro-name-tiddler>>\\r\\n\\ttag=\\\"input\\\"\\r\\n\\tdefault=\\\"\\\"\\r\\n\\tplaceholder=\\\"macro\\\" />\\r\\n<$edit-text\\r\\n\\ttiddler=<<parameter-name-tiddler>>\\r\\n\\ttag=\\\"input\\\"\\r\\n\\tdefault=\\\"\\\"\\r\\n\\tplaceholder=\\\"parameter\\\" />\\r\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<macro-name-tiddler>> >\\r\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<parameter-name-tiddler>> >\\r\\n<$relinkmangler>\\r\\n<$button\\r\\n\\ttooltip={{$(lingo-base)$NewParameter/Hint}}\\r\\n\\taria-label={{$(lingo-base)$NewParameter/Caption}}>\\r\\n<$action-sendmessage\\r\\n\\t$message=\\\"relink-add-parameter\\\"\\r\\n\\tmacro={{$(macro-name-tiddler)$}}\\r\\n\\tparameter={{$(parameter-name-tiddler)$}} />\\r\\n<$action-deletetiddler $tiddler=<<parameter-name-tiddler>> />\\r\\n<$action-deletetiddler $tiddler=<<macro-name-tiddler>> />\\r\\n<$text text={{$(lingo-base)$NewParameter/Caption}}/>\\r\\n</$button>\\r\\n</$relinkmangler>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<parameter-name-tiddler>> >\\r\\n<$button>\\r\\n<$text text={{$(lingo-base)$NewParameter/Caption}}/>\\r\\n</$button>\\r\\n</$reveal>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<macro-name-tiddler>> >\\r\\n<$button>\\r\\n<$text text={{$(lingo-base)$NewParameter/Caption}}/>\\r\\n</$button>\\r\\n</$reveal>\\n\\n\\r\\n<$macrocall\\r\\n\\t$name=tables\\r\\n\\tcategory=\\\"macros\\\"\\r\\n\\theader-list=\\\"Macro Parameter Type\\\"\\r\\n\\tlist-row-macro=\\\"row\\\" />\\r\\n\\\\end\\n\\n<<body>>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Operators\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Operators\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Operators/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\r\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\r\\n\\\\define operator-name-tiddler() $:/state/flibbles/relink/operator-name\\n\\n\\\\define row()\\r\\n<td><$text text=<<key>> /></td>\\r\\n\\\\end\\r\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Operators}}\\n\\n<em class=\\\"tc-edit\\\">Add a new filter operator:</em>\\r\\n<$edit-text\\r\\n\\ttiddler=<<operator-name-tiddler>>\\r\\n\\ttag=\\\"input\\\"\\r\\n\\tdefault=\\\"\\\"\\r\\n\\tplaceholder=\\\"operator name\\\" />\\r\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<operator-name-tiddler>>>\\r\\n<$relinkmangler>\\r\\n<$button\\r\\n\\ttooltip={{$(lingo-base)$NewOperator/Hint}}\\r\\n\\taria-label={{$(lingo-base)$NewOperator/Caption}}>\\r\\n<$action-sendmessage\\r\\n\\t$message=\\\"relink-add-operator\\\"\\r\\n\\toperator={{$(operator-name-tiddler)$}} />\\r\\n<$action-deletetiddler $tiddler=<<operator-name-tiddler>> />\\r\\n<$text text={{$(lingo-base)$NewOperator/Caption}}/>\\r\\n</$button>\\r\\n</$relinkmangler>\\r\\n</$reveal>\\r\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<operator-name-tiddler>>>\\r\\n<$button>\\r\\n<$text text={{$(lingo-base)$NewOperator/Caption}}/>\\r\\n</$button>\\r\\n</$reveal>\\n\\n<$macrocall\\r\\n\\t$name=tables\\r\\n\\tcategory=\\\"operators\\\"\\r\\n\\theader-list=\\\"[[Filter Operator]] [[Operand Type]]\\\"\\r\\n\\tlist-row-macro=\\\"row\\\" />\\r\\n\\\\end\\n\\n<<body>>\\r\\n\"},\"$:/plugins/flibbles/relink/ui/stylesheet.css\":{\"title\":\"$:/plugins/flibbles/relink/ui/stylesheet.css\",\"text\":\".tc-relink-references {\\r\\n}\\r\\n\\r\\n.tc-relink-references-table {\\r\\n\\twidth: 100%;\\r\\n\\tborder: none;\\r\\n}\\r\\n\\r\\n.tc-relink-references-table td {\\r\\n\\tborder-left: none;\\r\\n}\\r\\n\\r\\n.tc-relink-references-table tr:first-child td {\\r\\n\\tborder-top: none;\\r\\n}\\r\\n\\r\\n.tc-relink-references-title {\\r\\n\\ttext-align: left;\\r\\n\\tvertical-align: top;\\r\\n}\\r\\n\\r\\n.tc-relink-references-occurrence {\\r\\n\\tfont-style: italic;\\r\\n\\ttext-align: left;\\r\\n\\tfont-weight: 200;\\r\\n\\tpadding-left: 25px;\\r\\n\\tvertical-align: top;\\r\\n}\\r\\n\\r\\n.tc-relink-header-plugin {\\r\\n\\ttext-align: left;\\r\\n}\\r\\n\\r\\n.tc-relink-header-plugin button {\\r\\n\\twidth: 100%\\r\\n}\\r\\n\\r\\n.tc-relink-column-type {\\r\\n\\twidth: 8em;\\r\\n}\\r\\n\\r\\n.tc-relink-column-type select {\\r\\n\\twidth: 100%;\\r\\n}\\r\\n\\r\\n.tc-relink-column-delete {\\r\\n\\tborder-left: none;\\r\\n\\ttext-align: left;\\r\\n}\\r\\n\\r\\n.tc-relink-column-delete button {\\r\\n\\tpadding-left: 1em;\\r\\n}\\r\\n\\r\\n.tc-relink-impossible a.tc-tiddlylink {\\r\\n\\tcolor: red;\\r\\n}\\r\\n\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\"}}}"}