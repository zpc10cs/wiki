{"title":"$:/plugins/souk21/commandpalette","description":"Command palette","author":"Souk21","version":"0.0.5","core-version":">=5.0.8","source":"https://github.com/souk21/TW-commandpalette","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/config/ShortcutInfo/insert-command-palette-result\":{\"title\":\"$:/config/ShortcutInfo/insert-command-palette-result\",\"created\":\"20200604175511112\",\"modified\":\"20200604175520378\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Insert the current result in the previously focused element\"},\"$:/config/ShortcutInfo/open-command-palette-command-mode\":{\"title\":\"$:/config/ShortcutInfo/open-command-palette-command-mode\",\"created\":\"20200604175511112\",\"modified\":\"20200604175520378\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Open the command palette in command mode\"},\"$:/config/ShortcutInfo/open-command-palette-selection\":{\"title\":\"$:/config/ShortcutInfo/open-command-palette-selection\",\"created\":\"20200604175511112\",\"modified\":\"20200604175520378\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Open the command palette with current selection\"},\"$:/config/ShortcutInfo/open-command-palette\":{\"title\":\"$:/config/ShortcutInfo/open-command-palette\",\"created\":\"20200531223953066\",\"modified\":\"20200531224011568\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Open the command palette\"},\"$:/config/shortcuts/insert-command-palette-result\":{\"title\":\"$:/config/shortcuts/insert-command-palette-result\",\"created\":\"20200604175539239\",\"modified\":\"20200604175658624\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl+shift+I\"},\"$:/config/shortcuts/open-command-palette-command-mode\":{\"title\":\"$:/config/shortcuts/open-command-palette-command-mode\",\"created\":\"20200604175539239\",\"modified\":\"20200604175658624\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl-shift-P\"},\"$:/config/shortcuts/open-command-palette-selection\":{\"title\":\"$:/config/shortcuts/open-command-palette-selection\",\"created\":\"20200604175539239\",\"modified\":\"20200604175658624\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\"},\"$:/config/shortcuts/open-command-palette\":{\"title\":\"$:/config/shortcuts/open-command-palette\",\"created\":\"20200531223906490\",\"modified\":\"20200604175559200\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl-P\"},\"$:/plugins/souk21/commandpalette/Browser Refresh\":{\"title\":\"$:/plugins/souk21/commandpalette/Browser Refresh\",\"command-palette-name\":\"Browser Refresh\",\"command-palette-type\":\"message\",\"created\":\"20200604212446283\",\"modified\":\"20200604212453363\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-browser-refresh\\r\\n\"},\"$:/plugins/souk21/commandpalette/Cancel Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/Cancel Tiddler\",\"command-palette-mode\":\"drafts\",\"command-palette-name\":\"Cancel Tiddler\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose Draft to cancel\",\"created\":\"20200605221333412\",\"modified\":\"20200605221425246\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-cancel-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Clone Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/Clone Tiddler\",\"command-palette-name\":\"Clone Tiddler\",\"command-palette-type\":\"history\",\"cp-hint\":\"Chose tiddler to clone\",\"created\":\"20200605211432310\",\"modified\":\"20200605211434831\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-new-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Close All Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/Close All Tiddlers\",\"command-palette-name\":\"Close All Tiddlers\",\"command-palette-type\":\"message\",\"created\":\"20200604001529132\",\"modified\":\"20200610112248371\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-close-all-tiddlers\\r\\n\"},\"$:/plugins/souk21/commandpalette/Close Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/Close Tiddler\",\"command-palette-name\":\"Close Tiddler\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose tiddler to close\",\"created\":\"20200605211324321\",\"modified\":\"20200605211327367\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-close-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Close other Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/Close other Tiddlers\",\"command-palette-name\":\"Close other Tiddlers\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose tiddler to keep\",\"created\":\"20200605211357951\",\"modified\":\"20200605211404900\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-close-other-tiddlers\\r\\n\"},\"$:/plugins/souk21/commandpalette/Command Palette Settings\":{\"title\":\"$:/plugins/souk21/commandpalette/Command Palette Settings\",\"command-palette-name\":\"Command Palette Settings\",\"command-palette-type\":\"prompt\",\"created\":\"20200604001529132\",\"modified\":\"20200610112433842\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"|\\r\\n\"},\"$:/core/ui/KeyboardShortcuts/CommandPalette\":{\"title\":\"$:/core/ui/KeyboardShortcuts/CommandPalette\",\"created\":\"20200531223354098\",\"key\":\"((open-command-palette))\",\"modified\":\"20200604175332730\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"open-command-palette\\\"/>\"},\"$:/plugins/souk21/commandpalette/CommandPaletteCommandMode\":{\"title\":\"$:/plugins/souk21/commandpalette/CommandPaletteCommandMode\",\"created\":\"20200604175339522\",\"key\":\"((open-command-palette-command-mode))\",\"modified\":\"20200604175716862\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"open-command-palette\\\" $param=\\\">\\\"/>\"},\"$:/plugins/souk21/commandpalette/CommandPaletteHistory\":{\"text\":\"{\\r\\n    \\\"history\\\": [\\r\\n        \\\"Explorer\\\",\\r\\n        \\\"Clone Tiddler\\\",\\r\\n        \\\"See Drafts\\\",\\r\\n        \\\"Refresh Server\\\",\\r\\n        \\\"Permaview\\\",\\r\\n        \\\"See Themes\\\",\\r\\n        \\\"Refresh Command Palette\\\",\\r\\n        \\\"See Shadows Tiddlers\\\",\\r\\n        \\\"See Orphans Tiddlers\\\",\\r\\n        \\\"Remove tag\\\",\\r\\n        \\\"Add tag to tiddler\\\",\\r\\n        \\\"Delete Tiddler\\\",\\r\\n        \\\"Close Tiddler\\\",\\r\\n        \\\"Recent Tiddlers\\\",\\r\\n        \\\"New Task with Title\\\",\\r\\n        \\\"Edit Tiddler\\\",\\r\\n        \\\"See Mising Tiddlers\\\",\\r\\n        \\\"Show CommandTiddlers\\\",\\r\\n        \\\"See untagged Tiddlers\\\",\\r\\n        \\\"See Languages\\\",\\r\\n        \\\"See Plugins\\\",\\r\\n        \\\"New Command Wizard\\\",\\r\\n        \\\"Cancel Tiddler\\\",\\r\\n        \\\"Save Tiddler\\\",\\r\\n        \\\"Close other Tiddlers\\\",\\r\\n        \\\"Permalink\\\",\\r\\n        \\\"Create Command\\\",\\r\\n        \\\"Unfold All Tiddlers\\\",\\r\\n        \\\"Fold All Tiddlers\\\",\\r\\n        \\\"Print\\\",\\r\\n        \\\"Close All Tiddlers\\\",\\r\\n        \\\"Save Wiki\\\",\\r\\n        \\\"Home\\\",\\r\\n        \\\"Toggle Fullscreen\\\",\\r\\n        \\\"New Tiddler\\\"\\r\\n    ]\\r\\n}\",\"type\":\"application/json\",\"created\":\"20200603153247010\",\"modified\":\"20200610112340290\",\"title\":\"$:/plugins/souk21/commandpalette/CommandPaletteHistory\"},\"$:/plugins/souk21/commandpalette/CommandPaletteSearchSteps\":{\"text\":\"{\\r\\n    \\\"steps\\\": [\\r\\n          {\\\"filter\\\": \\\"[!is[system]search:title[]]\\\", \\\"hint\\\": \\\"in title\\\", \\\"caret\\\": \\\"25\\\"},\\r\\n          {\\\"filter\\\": \\\"[all[system+shadows]search:title[]]\\\", \\\"hint\\\": \\\"in title (system)\\\", \\\"caret\\\": \\\"33\\\"},\\r\\n          {\\\"filter\\\": \\\"[search[]]\\\", \\\"hint\\\": \\\"all\\\", \\\"caret\\\": \\\"8\\\"},\\r\\n          {\\\"filter\\\": \\\"[all[shadows]search[]]\\\", \\\"hint\\\": \\\"shadows\\\", \\\"caret\\\": \\\"20\\\"}\\r\\n    ]\\r\\n}\",\"type\":\"application/json\",\"created\":\"20200604123820982\",\"modified\":\"20200610112355489\",\"title\":\"$:/plugins/souk21/commandpalette/CommandPaletteSearchSteps\"},\"$:/plugins/souk21/commandpalette/CommandPaletteSelection\":{\"title\":\"$:/plugins/souk21/commandpalette/CommandPaletteSelection\",\"created\":\"20200604175339522\",\"key\":\"((open-command-palette-selection))\",\"modified\":\"20200604175716862\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"open-command-palette-selection\\\"/>\"},\"$:/plugins/souk21/commandpalette/CommandPaletteSettings\":{\"text\":\"{\\r\\n    \\\"maxResults\\\": \\\"30\\\",\\r\\n    \\\"maxResultHintSize\\\": 45,\\r\\n    \\\"neverBasic\\\": \\\"false\\\",\\r\\n    \\\"smoothScroll\\\": \\\"false\\\"\\r\\n}\",\"type\":\"application/json\",\"created\":\"20200604160432063\",\"modified\":\"20200610112626066\",\"title\":\"$:/plugins/souk21/commandpalette/CommandPaletteSettings\"},\"$:/plugins/souk21/commandpalette/Compact.css\":{\"title\":\"$:/plugins/souk21/commandpalette/Compact.css\",\"created\":\"20200603190000307\",\"modified\":\"20200623022617588\",\"tags\":\"$:/tags/CommandPaletteTheme $:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\r\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\\r\\n:root {\\r\\n    --palette-radius: 5px;\\r\\n}\\r\\n.commandpalette {\\r\\n    position: fixed;\\r\\n    background: <<colour background>>;\\r\\n    z-index: 9999999;\\r\\n    left: 50%;\\r\\n    top: 10%;\\r\\n    transform: translate(-50%, 0%);\\r\\n    width: 500px;\\r\\n    display: none;\\r\\n    flex-direction: column;\\r\\n    font-size: 21px;\\r\\n    border-radius: var(--palette-radius);\\r\\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\\r\\n    border: 2px solid <<colour page-background>>;\\r\\n}\\r\\n.inputhintwrapper {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    border-bottom: 1px solid <<colour page-background>>;\\r\\n}\\r\\n.commandpalette input {\\r\\n    border: 0;\\r\\n    background: 0;\\r\\n    height: 40px;\\r\\n    color: <<colour foreground>>;\\r\\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\\r\\n    outline: 0;\\r\\n    min-width: 50px;\\r\\n    flex: 1;\\r\\n    padding-left: 7px;\\r\\n}\\r\\n.commandpalettehint {\\r\\n    color:  <<colour foreground>>;\\r\\n    font-size: 13px;\\r\\n    text-align: right;\\r\\n    flex-shrink: 0;\\r\\n    padding-right: 7px;\\r\\n    opacity: 0.6;\\r\\n}\\r\\n.commandpaletteresultselected>.commandpalettehint {\\r\\n    color: <<colour background>>;\\r\\n    opacity: 1;\\r\\n}\\r\\n.commandpalettehintmain {\\n\\n}\\r\\n.commandpaletteresult {\\r\\n    background: <<colour background>>;\\r\\n    font-size: 15px;\\r\\n    color: <<colour foreground>>;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: space-between;\\r\\n    padding-left: 6px;\\r\\n    padding-top: 4px;\\r\\n    padding-bottom: 4px;\\r\\n    cursor: pointer;\\r\\n}\\r\\n.commandpaletteresult:not(:last-child) {\\r\\n    border-bottom: <<colour page-background>> solid 1px;\\r\\n}\\r\\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\\r\\n    background: <<colour page-background>>;\\r\\n}\\r\\n.commandpaletteresultselected {\\r\\n    background: <<colour primary>>;\\r\\n    color: <<colour page-background>>;\\r\\n}\\r\\n.cp-scroll{\\r\\n    max-height: 50vh;\\r\\n    overflow-y: auto;\\r\\n    position: relative;\\r\\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\\r\\n}\"},\"$:/plugins/souk21/commandpalette/ControlPanel Command\":{\"title\":\"$:/plugins/souk21/commandpalette/ControlPanel Command\",\"command-palette-name\":\"Show Control Panel\",\"command-palette-type\":\"actionString\",\"created\":\"20200604143925638\",\"modified\":\"20200610112527794\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-navigate $to=\\\"$:/ControlPanel\\\"/>\"},\"$:/plugins/souk21/commandpalette/Delete Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/Delete Tiddler\",\"command-palette-name\":\"Delete Tiddler\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose tiddler to delete\",\"created\":\"20200605211241408\",\"modified\":\"20200605211244812\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-delete-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Edit Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/Edit Tiddler\",\"command-palette-name\":\"Edit Tiddler\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose tiddler to edit\",\"created\":\"20200605211111710\",\"modified\":\"20200605211127693\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-edit-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Filter operation\":{\"title\":\"$:/plugins/souk21/commandpalette/Filter operation\",\"command-palette-name\":\"Filter operation\",\"command-palette-type\":\"prompt\",\"created\":\"20200604001529132\",\"modified\":\"20200610112604366\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[\\r\\n\"},\"$:/plugins/souk21/commandpalette/Fold All Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/Fold All Tiddlers\",\"command-palette-name\":\"Fold All Tiddlers\",\"command-palette-type\":\"message\",\"created\":\"20200604212356931\",\"modified\":\"20200604212403497\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-fold-all-tiddlers\\r\\n\"},\"$:/plugins/souk21/commandpalette/Home\":{\"title\":\"$:/plugins/souk21/commandpalette/Home\",\"command-palette-name\":\"Home\",\"command-palette-type\":\"message\",\"created\":\"20200604212243502\",\"modified\":\"20200604212247135\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-home\\r\\n\"},\"$:/plugins/souk21/commandpalette/InsertCommandPaletteResult\":{\"title\":\"$:/plugins/souk21/commandpalette/InsertCommandPaletteResult\",\"created\":\"20200604175339522\",\"key\":\"((insert-command-palette-result))\",\"modified\":\"20200604175716862\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"insert-command-palette-result\\\"/>\"},\"$:/plugins/souk21/commandpalette/New Journal Command\":{\"title\":\"$:/plugins/souk21/commandpalette/New Journal Command\",\"command-palette-name\":\"New Journal\",\"command-palette-type\":\"actionString\",\"created\":\"20200604143925638\",\"modified\":\"20200610112527794\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/core/ui/Actions/new-journal}}\\r\\n\"},\"$:/plugins/souk21/commandpalette/New Tiddler with title\":{\"title\":\"$:/plugins/souk21/commandpalette/New Tiddler with title\",\"command-palette-name\":\"New Tiddler with title\",\"command-palette-type\":\"prompt\",\"created\":\"20200604000707983\",\"modified\":\"20200610112449264\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"+\\r\\n\"},\"$:/plugins/souk21/commandpalette/New Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/New Tiddler\",\"command-palette-name\":\"New Tiddler\",\"command-palette-type\":\"message\",\"created\":\"20200604211924196\",\"modified\":\"20200604212110424\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-new-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Original.css\":{\"title\":\"$:/plugins/souk21/commandpalette/Original.css\",\"created\":\"20200603190000307\",\"modified\":\"20200623022617588\",\"tags\":\"$:/tags/CommandPaletteTheme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\r\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\\r\\n:root {\\r\\n    --palette-radius: 5px;\\r\\n}\\r\\n.commandpalette {\\r\\n    position: fixed;\\r\\n    background:<<colour page-background>>;\\r\\n    z-index: 9999999;\\r\\n    left: 50%;\\r\\n    top: 10%;\\r\\n    transform: translate(-50%, 0%);\\r\\n    width: 500px;\\r\\n    display: none;\\r\\n    flex-direction: column;\\r\\n    font-size: 21px;\\r\\n    border-radius: var(--palette-radius);\\r\\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\\r\\n    border: 4px solid rgba(0, 0, 0, 0);\\r\\n}\\r\\n.commandpalette input {\\r\\n    border: 0;\\r\\n    height: 40px;\\r\\n    color: <<colour foreground>>;\\r\\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\\r\\n    padding-left: 11px;\\r\\n    padding-right: 11px;\\r\\n    width: 100%;\\r\\n    outline: 0;\\r\\n}\\r\\n.commandpalettehint {\\r\\n    color:  <<colour foreground>>;\\r\\n    font-size: 13px;\\r\\n    text-align: right;\\r\\n    flex-shrink: 0;\\r\\n    padding-right: 7px;\\r\\n    opacity: 0.6;\\r\\n}\\r\\n.commandpaletteresultselected>.commandpalettehint {\\r\\n    color: <<colour background>>;\\r\\n    opacity: 1;\\r\\n}\\r\\n.commandpalettehintmain {\\r\\n}\\r\\n.commandpaletteresult {\\r\\n    background: <<colour background>>;\\r\\n    font-size: 15px;\\r\\n    color: <<colour foreground>>;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: space-between;\\r\\n    padding-left: 6px;\\r\\n    padding-top: 4px;\\r\\n    padding-bottom: 4px;\\r\\n    cursor: pointer;\\r\\n}\\r\\n.commandpaletteresult:not(:last-child) {\\r\\n    border-bottom: <<colour page-background>> solid 1px;\\r\\n}\\r\\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\\r\\n    background: <<colour page-background>>;\\r\\n}\\r\\n.commandpaletteresultselected {\\r\\n    background: <<colour primary>>;\\r\\n    color: <<colour page-background>>;\\r\\n}\\r\\n.cp-scroll{\\r\\n    max-height: 50vh;\\r\\n    overflow-y: auto;\\r\\n    position: relative;\\r\\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\\r\\n}\"},\"$:/plugins/souk21/commandpalette/Permalink\":{\"title\":\"$:/plugins/souk21/commandpalette/Permalink\",\"command-palette-name\":\"Permalink\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose tiddler to permaling\",\"created\":\"20200605211220042\",\"modified\":\"20200605211221257\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-permalink\\r\\n\"},\"$:/plugins/souk21/commandpalette/Permaview\":{\"title\":\"$:/plugins/souk21/commandpalette/Permaview\",\"command-palette-name\":\"Permaview\",\"command-palette-type\":\"message\",\"created\":\"20200604212411320\",\"modified\":\"20200604212415435\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-permaview\\r\\n\"},\"$:/plugins/souk21/commandpalette/Print\":{\"title\":\"$:/plugins/souk21/commandpalette/Print\",\"command-palette-name\":\"Print\",\"command-palette-type\":\"message\",\"created\":\"20200604212424040\",\"modified\":\"20200604212427027\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-print\\r\\n\"},\"$:/plugins/souk21/commandpalette/Recent Tiddlers Command\":{\"title\":\"$:/plugins/souk21/commandpalette/Recent Tiddlers Command\",\"command-palette-caret\":\"33\",\"command-palette-name\":\"Recent Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604001529132\",\"modified\":\"20200610112702585\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!is[system]!sort[created]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/Refresh Server\":{\"title\":\"$:/plugins/souk21/commandpalette/Refresh Server\",\"command-palette-name\":\"Refresh Server\",\"command-palette-type\":\"message\",\"created\":\"20200604212332329\",\"modified\":\"20200604212339404\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-server-refresh\\r\\n\"},\"$:/plugins/souk21/commandpalette/Save Tiddler\":{\"title\":\"$:/plugins/souk21/commandpalette/Save Tiddler\",\"command-palette-mode\":\"drafts\",\"command-palette-name\":\"Save Tiddler\",\"command-palette-type\":\"history\",\"cp-hint\":\"Choose Draft to save\",\"created\":\"20200605221150599\",\"modified\":\"20200605221400754\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-save-tiddler\\r\\n\"},\"$:/plugins/souk21/commandpalette/Save Wiki\":{\"title\":\"$:/plugins/souk21/commandpalette/Save Wiki\",\"command-palette-name\":\"Save Wiki\",\"command-palette-type\":\"message\",\"created\":\"20200604212312470\",\"modified\":\"20200604212316943\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-save-wiki\\r\\n\"},\"$:/plugins/souk21/commandpalette/Search Tags\":{\"title\":\"$:/plugins/souk21/commandpalette/Search Tags\",\"command-palette-name\":\"Search Tags\",\"command-palette-type\":\"prompt\",\"created\":\"20200604001529132\",\"modified\":\"20200610112728489\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"#\\r\\n\"},\"$:/plugins/souk21/commandpalette/Search fields\":{\"title\":\"$:/plugins/souk21/commandpalette/Search fields\",\"command-palette-caret\":\"16\",\"command-palette-name\":\"Search fields\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604023259497\",\"modified\":\"20200610112923528\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[fields[]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/Search tiddlers with tag\":{\"title\":\"$:/plugins/souk21/commandpalette/Search tiddlers with tag\",\"command-palette-name\":\"Search tiddlers with tag\",\"command-palette-type\":\"prompt\",\"created\":\"20200604001529132\",\"modified\":\"20200610112742356\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"@\\r\\n\"},\"$:/plugins/souk21/commandpalette/Search\":{\"title\":\"$:/plugins/souk21/commandpalette/Search\",\"command-palette-name\":\"Search\",\"command-palette-type\":\"prompt\",\"created\":\"20200604001529132\",\"modified\":\"20200610112649578\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/plugins/souk21/commandpalette/See Drafts\":{\"title\":\"$:/plugins/souk21/commandpalette/See Drafts\",\"command-palette-caret\":\"27\",\"command-palette-name\":\"See Drafts\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604001529132\",\"modified\":\"20200610112802828\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[has:field[draft.of]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See Languages\":{\"title\":\"$:/plugins/souk21/commandpalette/See Languages\",\"command-palette-caret\":\"43\",\"command-palette-name\":\"See Languages\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200606102156692\",\"modified\":\"20200606102215081\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!has[draft.of]plugin-type[language]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See Missing Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/See Missing Tiddlers\",\"command-palette-caret\":\"20\",\"command-palette-name\":\"See Mising Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604203347766\",\"modified\":\"20200610112812369\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[missing]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See Orphans Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/See Orphans Tiddlers\",\"command-palette-caret\":\"20\",\"command-palette-name\":\"See Orphans Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604203457770\",\"modified\":\"20200610112820353\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[orphans]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See Plugins\":{\"title\":\"$:/plugins/souk21/commandpalette/See Plugins\",\"command-palette-caret\":\"41\",\"command-palette-name\":\"See Plugins\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200606101904501\",\"modified\":\"20200606101924380\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!has[draft.of]plugin-type[plugin]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See Shadows Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/See Shadows Tiddlers\",\"command-palette-caret\":\"20\",\"command-palette-name\":\"See Shadows Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604203634770\",\"modified\":\"20200610112829887\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[shadows]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See Story List\":{\"title\":\"$:/plugins/souk21/commandpalette/See Story List\",\"command-palette-caret\":\"26\",\"command-palette-name\":\"See Story List\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604203347766\",\"modified\":\"20200610112812369\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[list[$:/StoryList]search[]]\"},\"$:/plugins/souk21/commandpalette/See Themes\":{\"title\":\"$:/plugins/souk21/commandpalette/See Themes\",\"command-palette-caret\":\"40\",\"command-palette-name\":\"See Themes\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200606102041205\",\"modified\":\"20200606102101828\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!has[draft.of]plugin-type[theme]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See all content-types\":{\"title\":\"$:/plugins/souk21/commandpalette/See all content-types\",\"command-palette-caret\":\"48\",\"command-palette-name\":\"See all content-type\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604201605853\",\"modified\":\"20200610112751272\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[tiddlers+shadows]each[type]get[type]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/See untagged tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/See untagged tiddlers\",\"command-palette-caret\":\"29\",\"command-palette-name\":\"See untagged Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604020335070\",\"modified\":\"20200610112839898\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[untagged[]!is[system]search[]]\\r\\n\"},\"$:/plugins/souk21/commandpalette/Show help\":{\"title\":\"$:/plugins/souk21/commandpalette/Show help\",\"command-palette-name\":\"Show help\",\"command-palette-type\":\"prompt\",\"created\":\"20200604001529132\",\"modified\":\"20200610112849596\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"?\\r\\n\"},\"$:/plugins/souk21/commandpalette/Toggle Fullscreen\":{\"title\":\"$:/plugins/souk21/commandpalette/Toggle Fullscreen\",\"command-palette-name\":\"Toggle Fullscreen\",\"command-palette-type\":\"message\",\"created\":\"20200604212224319\",\"modified\":\"20200604212229222\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-full-screen\\r\\n\"},\"$:/plugins/souk21/commandpalette/Unfold All Tiddlers\":{\"title\":\"$:/plugins/souk21/commandpalette/Unfold All Tiddlers\",\"command-palette-name\":\"Unfold All Tiddlers\",\"command-palette-type\":\"actionString\",\"created\":\"20200605205037837\",\"modified\":\"20200605205546285\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"tm-unfold-all-tiddlers\\\" foldedStatePrefix=\\\"$:/state/folded/\\\"/>\\r\\n\"},\"$:/plugins/souk21/commandpalette/Version\":{\"title\":\"$:/plugins/souk21/commandpalette/Version\",\"command-palette-caret\":\"49\",\"command-palette-name\":\"Version\",\"command-palette-type\":\"prompt-basic\",\"created\":\"20200604001529132\",\"modified\":\"20200610112802828\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[$:/plugins/souk21/commandpalette]get[version]]\"},\"$:/plugins/souk21/commandpalette/View\":{\"title\":\"$:/plugins/souk21/commandpalette/View\",\"created\":\"20200601134627220\",\"modified\":\"20200606112407150\",\"tags\":\"$:/tags/AboveStory\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$commandpalettewidget/>\\r\\n\"},\"$:/plugins/souk21/commandpalette/show tiddler commands\":{\"title\":\"$:/plugins/souk21/commandpalette/show tiddler commands\",\"command-palette-name\":\"Show CommandTiddlers\",\"command-palette-type\":\"prompt\",\"created\":\"20200603235441202\",\"modified\":\"20200610112900184\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"@$:/tags/CommandPaletteCommand\\r\\n\"},\"$:/core/modules/widgets/commandpalettewidget.js\":{\"title\":\"$:/core/modules/widgets/commandpalettewidget.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/core/modules/widgets/commandpalettewidget.js\\r\\ntype: application/javascript\\r\\nmodule-type: widget\\r\\n\\r\\nCommand Palette Widget\\r\\n\\r\\n\\\\*/\\r\\n(function () {\\r\\n\\r\\n\\t/*jslint node: true, browser: true */\\r\\n\\t/*global $tw: false */\\r\\n\\t'use strict';\\r\\n\\r\\n\\tvar Widget = require('$:/core/modules/widgets/widget.js').widget;\\r\\n\\r\\n\\tclass CommandPaletteWidget extends Widget {\\r\\n\\t\\tconstructor(parseTreeNode, options) {\\r\\n\\t\\t\\tsuper(parseTreeNode, options);\\r\\n\\t\\t\\tthis.initialise(parseTreeNode, options);\\r\\n\\t\\t\\tthis.currentSelection = 0; //0 is nothing selected, 1 is first result,...\\r\\n\\t\\t\\tthis.symbolProviders = {};\\r\\n\\t\\t\\tthis.actions = [];\\r\\n\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\tthis.defaultSettings = {\\r\\n\\t\\t\\t\\tmaxResults: 15,\\r\\n\\t\\t\\t\\tmaxResultHintSize: 45,\\r\\n\\t\\t\\t\\tneverBasic: false,\\r\\n\\t\\t\\t\\tshowHistoryOnOpen: true,\\r\\n\\t\\t\\t\\tescapeGoesBack: true,\\r\\n\\t\\t\\t\\talwaysPassSelection: true,\\r\\n\\t\\t\\t\\ttheme: '$:/plugins/souk21/commandpalette/Compact.css',\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tthis.settings = {};\\r\\n\\t\\t\\tthis.commandHistoryPath = '$:/plugins/souk21/commandpalette/CommandPaletteHistory';\\r\\n\\t\\t\\tthis.settingsPath = '$:/plugins/souk21/commandpalette/CommandPaletteSettings';\\r\\n\\t\\t\\tthis.searchStepsPath = '$:/plugins/souk21/commandpalette/CommandPaletteSearchSteps';\\r\\n\\t\\t\\tthis.customCommandsTag = '$:/tags/CommandPaletteCommand';\\r\\n\\t\\t\\tthis.themesTag = '$:/tags/CommandPaletteTheme';\\r\\n\\t\\t\\tthis.typeField = 'command-palette-type';\\r\\n\\t\\t\\tthis.nameField = 'command-palette-name';\\r\\n\\t\\t\\tthis.hintField = 'cp-hint';\\r\\n\\t\\t\\tthis.modeField = 'command-palette-mode';\\r\\n\\t\\t\\tthis.caretField = 'command-palette-caret';\\r\\n\\t\\t\\tthis.immediateField = 'command-palette-immediate';\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tactionStringBuilder(text) {\\r\\n\\t\\t\\treturn (e) => this.invokeActionString(text, this, e);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinvokeFieldMangler(tiddler, message, param, e) {\\r\\n\\t\\t\\tlet action = `<$fieldmangler tiddler=\\\"${tiddler}\\\">\\r\\n\\t\\t\\t<$action-sendmessage $message=\\\"${message}\\\" $param=\\\"${param}\\\"/>\\r\\n\\t\\t\\t</$fieldmangler>`;\\r\\n\\t\\t\\tthis.invokeActionString(action, this, e);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//filter = (tiddler, terms) => [tiddlers]\\r\\n\\t\\ttagOperation(e, hintTiddler, hintTag, filter, allowNoSelection, message) {\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tif (allowNoSelection) this.allowInputFieldSelection = true;\\r\\n\\t\\t\\tthis.currentProvider = this.historyProviderBuilder(hintTiddler);\\r\\n\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\t\\tlet tiddler = this.currentResults[this.currentSelection - 1].result.name;\\r\\n\\t\\t\\t\\tthis.currentProvider = (terms) => {\\r\\n\\t\\t\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\t\\t\\tthis.hint.innerText = hintTag;\\r\\n\\t\\t\\t\\t\\tlet searches = filter(tiddler, terms);\\r\\n\\t\\t\\t\\t\\tsearches = searches.map(s => { return { name: s }; });\\r\\n\\t\\t\\t\\t\\tthis.showResults(searches);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tthis.input.value = \\\"\\\";\\r\\n\\t\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\t\\tif (!allowNoSelection && this.currentSelection === 0) return;\\r\\n\\t\\t\\t\\t\\tlet tag = this.input.value;\\r\\n\\t\\t\\t\\t\\tif (this.currentSelection !== 0) {\\r\\n\\t\\t\\t\\t\\t\\ttag = this.currentResults[this.currentSelection - 1].result.name;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tthis.invokeFieldMangler(tiddler, message, tag, e);\\r\\n\\t\\t\\t\\t\\tif (!e.getModifierState('Shift')) {\\r\\n\\t\\t\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.input.value = \\\"\\\";\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trefreshThemes(e) {\\r\\n\\t\\t\\tthis.themes = this.getTiddlersWithTag(this.themesTag);\\r\\n\\t\\t\\tlet found = false;\\r\\n\\t\\t\\tfor (let theme of this.themes) {\\r\\n\\t\\t\\t\\tlet themeName = theme.fields.title;\\r\\n\\t\\t\\t\\tif (themeName === this.settings.theme) {\\r\\n\\t\\t\\t\\t\\tfound = true;\\r\\n\\t\\t\\t\\t\\tthis.addTagIfNecessary(themeName, '$:/tags/Stylesheet', e);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tthis.invokeFieldMangler(themeName, 'tm-remove-tag', '$:/tags/Stylesheet', e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (found) return;\\r\\n\\t\\t\\tthis.addTagIfNecessary(this.defaultSettings.theme, '$:/tags/Stylesheet', e);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Re-adding an existing tag changes modification date\\r\\n\\t\\taddTagIfNecessary(tiddler, tag, e) {\\r\\n\\t\\t\\tif (this.hasTag(tiddler, tag)) return;\\r\\n\\t\\t\\tthis.invokeFieldMangler(tiddler, 'tm-add-tag', tag, e);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thasTag(tiddler, tag) {\\r\\n\\t\\t\\treturn $tw.wiki.getTiddler(tiddler).fields.tags.includes(tag);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trefreshCommands() {\\r\\n\\t\\t\\tthis.actions = [];\\r\\n\\t\\t\\tthis.actions.push({ name: \\\"Refresh Command Palette\\\", action: (e) => { this.refreshCommandPalette(); this.promptCommand('') }, keepPalette: true });\\r\\n\\t\\t\\tthis.actions.push({ name: \\\"Explorer\\\", action: (e) => this.explorer(e), keepPalette: true });\\r\\n\\t\\t\\tthis.actions.push({ name: \\\"See History\\\", action: (e) => this.showHistory(e), keepPalette: true });\\r\\n\\t\\t\\tthis.actions.push({ name: \\\"New Command Wizard\\\", action: (e) => this.newCommandWizard(e), keepPalette: true });\\r\\n\\t\\t\\tthis.actions.push({\\r\\n\\t\\t\\t\\tname: \\\"Add tag to tiddler\\\",\\r\\n\\t\\t\\t\\taction: (e) => this.tagOperation(e, 'Pick tiddler to tag', 'Pick tag to add (⇧⏎ to add multiple)',\\r\\n\\t\\t\\t\\t\\t(tiddler, terms) => $tw.wiki.filterTiddlers(`[!is[system]tags[]] [is[system]tags[]] -[[${tiddler}]tags[]] +[search[${terms}]]`),\\r\\n\\t\\t\\t\\t\\ttrue,\\r\\n\\t\\t\\t\\t\\t'tm-add-tag'),\\r\\n\\t\\t\\t\\tkeepPalette: true\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tthis.actions.push({\\r\\n\\t\\t\\t\\tname: \\\"Remove tag\\\",\\r\\n\\t\\t\\t\\taction: (e) => this.tagOperation(e, 'Pick tiddler to untag', 'Pick tag to remove (⇧⏎ to remove multiple)',\\r\\n\\t\\t\\t\\t\\t(tiddler, terms) => $tw.wiki.filterTiddlers(`[[${tiddler}]tags[]] +[search[${terms}]]`),\\r\\n\\t\\t\\t\\t\\tfalse,\\r\\n\\t\\t\\t\\t\\t'tm-remove-tag'),\\r\\n\\t\\t\\t\\tkeepPalette: true\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tlet commandTiddlers = this.getTiddlersWithTag(this.customCommandsTag);\\r\\n\\t\\t\\tfor (let tiddler of commandTiddlers) {\\r\\n\\t\\t\\t\\tif (!tiddler.fields[this.nameField] === undefined) continue;\\r\\n\\t\\t\\t\\tif (!tiddler.fields[this.typeField] === undefined) continue;\\r\\n\\t\\t\\t\\tlet name = tiddler.fields[this.nameField];\\r\\n\\t\\t\\t\\tlet type = tiddler.fields[this.typeField];\\r\\n\\t\\t\\t\\tlet text = tiddler.fields.text;\\r\\n\\t\\t\\t\\tif (text === undefined) text = '';\\r\\n\\t\\t\\t\\tlet textFirstLine = text.match(/^.*/)[0];\\r\\n\\r\\n\\t\\t\\t\\tif (type === 'prompt') {\\r\\n\\t\\t\\t\\t\\tlet immediate = !!tiddler.fields[this.immediateField];\\r\\n\\t\\t\\t\\t\\tlet caret = tiddler.fields[this.caretField];\\r\\n\\t\\t\\t\\t\\tlet action = { name: name, action: () => this.promptCommand(textFirstLine, caret), keepPalette: !immediate, immediate: immediate };\\r\\n\\t\\t\\t\\t\\tthis.actions.push(action);\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (type === 'prompt-basic') {\\r\\n\\t\\t\\t\\t\\tlet caret = tiddler.fields[this.caretField];\\r\\n\\t\\t\\t\\t\\tlet action = { name: name, action: () => this.promptCommandBasic(textFirstLine, caret, name), keepPalette: true };\\r\\n\\t\\t\\t\\t\\tthis.actions.push(action);\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (type === 'message') {\\r\\n\\t\\t\\t\\t\\tthis.actions.push({ name: name, action: (e) => this.tmMessageBuilder(textFirstLine)(e) });\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (type === 'actionString') {\\r\\n\\t\\t\\t\\t\\tthis.actions.push({ name: name, action: (e) => this.actionStringBuilder(text)(e) });\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (type === 'history') {\\r\\n\\t\\t\\t\\t\\tlet hint = tiddler.fields[this.hintField];\\r\\n\\t\\t\\t\\t\\tlet mode = tiddler.fields[this.modeField];\\r\\n\\t\\t\\t\\t\\tthis.actions.push({ name: name, action: (e) => this.commandWithHistoryPicker(textFirstLine, hint, mode).handler(e), keepPalette: true });\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tnewCommandWizard() {\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\tthis.hint.innerText = 'Command Name';\\r\\n\\t\\t\\tlet name = '';\\r\\n\\t\\t\\tlet type = '';\\r\\n\\t\\t\\tlet hint = '';\\r\\n\\r\\n\\t\\t\\tlet messageStep = () => {\\r\\n\\t\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\t\\tthis.hint.innerText = 'Enter Message';\\r\\n\\t\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\t\\tthis.tmMessageBuilder('tm-new-tiddler',\\r\\n\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\ttitle: '$:/' + name,\\r\\n\\t\\t\\t\\t\\t\\t\\ttags: this.customCommandsTag,\\r\\n\\t\\t\\t\\t\\t\\t\\t[this.typeField]: type,\\r\\n\\t\\t\\t\\t\\t\\t\\t[this.nameField]: name,\\r\\n\\t\\t\\t\\t\\t\\t\\t[this.hintField]: hint,\\r\\n\\t\\t\\t\\t\\t\\t\\ttext: this.input.value\\r\\n\\t\\t\\t\\t\\t\\t})(e);\\r\\n\\t\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tlet hintStep = () => {\\r\\n\\t\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\t\\tthis.hint.innerText = 'Enter hint';\\r\\n\\t\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\t\\thint = this.input.value;\\r\\n\\t\\t\\t\\t\\tmessageStep();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\tlet typeStep = () => {\\r\\n\\t\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\t\\tthis.hint.innerText = 'Enter type (prompt, prompt-basic, message, actionString, history)'\\r\\n\\t\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\t\\ttype = this.input.value;\\r\\n\\t\\t\\t\\t\\tif (type === 'history') {\\r\\n\\t\\t\\t\\t\\t\\thintStep();\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tthis.tmMessageBuilder('tm-new-tiddler',\\r\\n\\t\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttitle: '$:/' + name,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttags: this.customCommandsTag,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[this.typeField]: type,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[this.nameField]: name\\r\\n\\t\\t\\t\\t\\t\\t\\t})(e);\\r\\n\\t\\t\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.currentProvider = (terms) => { }\\r\\n\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\tif (this.input.value.length === 0) return;\\r\\n\\t\\t\\t\\tname = this.input.value;\\r\\n\\t\\t\\t\\ttypeStep();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.showResults([]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\texplorer(e) {\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tthis.input.value = '$:/';\\r\\n\\t\\t\\tthis.lastExplorerInput = '$:/';\\r\\n\\t\\t\\tthis.hint.innerText = 'Explorer (⇧⏎ to add multiple)';\\r\\n\\t\\t\\tthis.currentProvider = (terms) => this.explorerProvider('$:/', terms);\\r\\n\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\t\\tthis.currentResults[this.currentSelection - 1].result.action(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.onInput();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\texplorerProvider(url, terms) {\\r\\n\\t\\t\\tlet switchFolder = (url) => {\\r\\n\\t\\t\\t\\tthis.input.value = url;\\r\\n\\t\\t\\t\\tthis.lastExplorerInput = this.input.value;\\r\\n\\t\\t\\t\\tthis.currentProvider = (terms) => this.explorerProvider(url, terms);\\r\\n\\t\\t\\t\\tthis.onInput();\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tif (!this.input.value.startsWith(url)) {\\r\\n\\t\\t\\t\\tthis.input.value = this.lastExplorerInput;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.lastExplorerInput = this.input.value;\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tlet search = this.input.value.substr(url.length);\\r\\n\\t\\t\\tlet tiddlers = $tw.wiki.filterTiddlers(`[removeprefix[${url}]splitbefore[/]sort[]search[${search}]]`);\\r\\n\\t\\t\\tlet folders = [];\\r\\n\\t\\t\\tlet files = [];\\r\\n\\t\\t\\tfor (let tiddler of tiddlers) {\\r\\n\\t\\t\\t\\tif (tiddler.endsWith('/')) {\\r\\n\\t\\t\\t\\t\\tfolders.push({ name: tiddler, action: (e) => switchFolder(`${url}${tiddler}`) });\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tfiles.push({\\r\\n\\t\\t\\t\\t\\t\\tname: tiddler, action: (e) => {\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.navigateTo(`${url}${tiddler}`);\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!e.getModifierState('Shift')) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet topResult;\\r\\n\\t\\t\\tif (url !== '$:/') {\\r\\n\\t\\t\\t\\tlet splits = url.split('/');\\r\\n\\t\\t\\t\\tsplits.splice(splits.length - 2);\\r\\n\\t\\t\\t\\tlet parent = splits.join('/') + '/';\\r\\n\\t\\t\\t\\ttopResult = { name: '..', action: (e) => switchFolder(parent) };\\r\\n\\t\\t\\t\\tthis.showResults([topResult, ...folders, ...files]);\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.showResults([...folders, ...files]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsetSetting(name, value) {\\r\\n\\t\\t\\t//doing the validation here too (it's also done in refreshSettings, so you can load you own settings with a json file)\\r\\n\\t\\t\\tif (typeof value === 'string') {\\r\\n\\t\\t\\t\\tif (value === 'true') value = true;\\r\\n\\t\\t\\t\\tif (value === 'false') value = false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.settings[name] = value;\\r\\n\\t\\t\\t$tw.wiki.setTiddlerData(this.settingsPath, this.settings);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//loadSettings?\\r\\n\\t\\trefreshSettings() {\\r\\n\\t\\t\\t//get user or default settings\\r\\n\\t\\t\\tthis.settings = $tw.wiki.getTiddlerData(this.settingsPath, { ...this.defaultSettings });\\r\\n\\t\\t\\t//Adding eventual missing properties to current user settings\\r\\n\\t\\t\\tfor (let prop in this.defaultSettings) {\\r\\n\\t\\t\\t\\tif (!this.defaultSettings.hasOwnProperty(prop)) continue;\\r\\n\\t\\t\\t\\tif (this.settings[prop] === undefined) {\\r\\n\\t\\t\\t\\t\\tthis.settings[prop] = this.defaultSettings[prop];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//cast all booleans\\r\\n\\t\\t\\tfor (let prop in this.settings) {\\r\\n\\t\\t\\t\\tif (!this.settings.hasOwnProperty(prop)) continue;\\r\\n\\t\\t\\t\\tif (typeof this.settings[prop] !== 'string') continue;\\r\\n\\t\\t\\t\\tif (this.settings[prop].toLowerCase() === 'true') this.settings[prop] = true;\\r\\n\\t\\t\\t\\tif (this.settings[prop].toLowerCase() === 'false') this.settings[prop] = false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//helper function to retrieve all tiddlers (+ their fields) with a tag\\r\\n\\t\\tgetTiddlersWithTag(tag) {\\r\\n\\t\\t\\tlet tiddlers = $tw.wiki.getTiddlersWithTag(tag);\\r\\n\\t\\t\\treturn tiddlers.map(t => $tw.wiki.getTiddler(t));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trender(parent, nextSibling) {\\r\\n\\t\\t\\tthis.parentDomNode = parent;\\r\\n\\t\\t\\tthis.execute();\\r\\n\\t\\t\\tthis.history = $tw.wiki.getTiddlerData(this.commandHistoryPath, { history: [] }).history;\\r\\n\\r\\n\\t\\t\\t$tw.rootWidget.addEventListener('open-command-palette', (e) => this.openPalette(e));\\r\\n\\t\\t\\t$tw.rootWidget.addEventListener('open-command-palette-selection', (e) => this.openPaletteSelection(e));\\r\\n\\t\\t\\t$tw.rootWidget.addEventListener('insert-command-palette-result', (e) => this.insertSelectedResult(e));\\r\\n\\r\\n\\t\\t\\tlet inputAndMainHintWrapper = this.createElement('div', { className: 'inputhintwrapper' });\\r\\n\\t\\t\\tthis.div = this.createElement('div', { className: 'commandpalette' }, { display: 'none' });\\r\\n\\t\\t\\tthis.input = this.createElement('input', { type: 'text' });\\r\\n\\t\\t\\tthis.hint = this.createElement('div', { className: 'commandpalettehint commandpalettehintmain' });\\r\\n\\t\\t\\tinputAndMainHintWrapper.append(this.input, this.hint);\\r\\n\\t\\t\\tthis.scrollDiv = this.createElement('div', { className: 'cp-scroll' });\\r\\n\\t\\t\\tthis.div.append(inputAndMainHintWrapper, this.scrollDiv);\\r\\n\\t\\t\\tthis.input.addEventListener('keydown', (e) => this.onKeyDown(e));\\r\\n\\t\\t\\tthis.input.addEventListener('input', () => this.onInput(this.input.value));\\r\\n\\t\\t\\twindow.addEventListener('click', (e) => this.onClick(e));\\r\\n\\t\\t\\tparent.insertBefore(this.div, nextSibling);\\r\\n\\r\\n\\t\\t\\tthis.refreshCommandPalette();\\r\\n\\r\\n\\t\\t\\tthis.symbolProviders['>'] = { searcher: (terms) => this.actionProvider(terms), resolver: (e) => this.actionResolver(e) };\\r\\n\\t\\t\\tthis.symbolProviders['#'] = { searcher: (terms) => this.tagListProvider(terms), resolver: (e) => this.tagListResolver(e) };\\r\\n\\t\\t\\tthis.symbolProviders['@'] = { searcher: (terms) => this.tagProvider(terms), resolver: (e) => this.defaultResolver(e) };\\r\\n\\t\\t\\tthis.symbolProviders['?'] = { searcher: (terms) => this.helpProvider(terms), resolver: (e) => this.helpResolver(e) };\\r\\n\\t\\t\\tthis.symbolProviders['['] = { searcher: (terms, hint) => this.filterProvider(terms, hint), resolver: (e) => this.filterResolver(e) };\\r\\n\\t\\t\\tthis.symbolProviders['+'] = { searcher: (terms) => this.createTiddlerProvider(terms), resolver: (e) => this.createTiddlerResolver() };\\r\\n\\t\\t\\tthis.symbolProviders['|'] = { searcher: (terms) => this.settingsProvider(terms), resolver: (e) => this.settingsResolver() };\\r\\n\\t\\t\\tthis.currentResults = [];\\r\\n\\t\\t\\tthis.currentProvider = {};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trefreshSearchSteps() {\\r\\n\\t\\t\\tthis.searchSteps = [];\\r\\n\\t\\t\\tlet steps = $tw.wiki.getTiddlerData(this.searchStepsPath);\\r\\n\\t\\t\\tsteps = steps.steps;\\r\\n\\t\\t\\tfor (let step of steps) {\\r\\n\\t\\t\\t\\tthis.searchSteps.push(this.searchStepBuilder(step.filter, step.caret, step.hint));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trefreshCommandPalette() {\\r\\n\\t\\t\\tthis.refreshSettings();\\r\\n\\t\\t\\tthis.refreshThemes();\\r\\n\\t\\t\\tthis.refreshCommands();\\r\\n\\t\\t\\tthis.refreshSearchSteps();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tupdateCommandHistory(command) {\\r\\n\\t\\t\\tthis.history = Array.from(new Set([command.name, ...this.history]));\\r\\n\\t\\t\\t$tw.wiki.setTiddlerData(this.commandHistoryPath, { history: this.history });\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thistoryProviderBuilder(hint, mode) {\\r\\n\\t\\t\\treturn (terms) => {\\r\\n\\t\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\t\\tthis.hint.innerText = hint;\\r\\n\\t\\t\\t\\tlet results;\\r\\n\\t\\t\\t\\tif (mode !== undefined && mode === 'drafts') {\\r\\n\\t\\t\\t\\t\\tresults = $tw.wiki.filterTiddlers('[has:field[draft.of]]');\\r\\n\\t\\t\\t\\t} else if (mode !== undefined && mode === 'story') {\\r\\n\\t\\t\\t\\t\\tresults = $tw.wiki.filterTiddlers('[list[$:/StoryList]]');\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tresults = this.getHistory();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tresults = results.map(r => { return { name: r } });\\r\\n\\t\\t\\t\\tthis.showResults(results);\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcommandWithHistoryPicker(message, hint, mode) {\\r\\n\\t\\t\\tlet handler = (e) => {\\r\\n\\t\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\t\\tthis.allowInputFieldSelection = true;\\r\\n\\t\\t\\t\\tthis.currentProvider = provider;\\r\\n\\t\\t\\t\\tthis.currentResolver = resolver;\\r\\n\\t\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet provider = this.historyProviderBuilder(hint, mode);\\r\\n\\t\\t\\tlet resolver = (e) => {\\r\\n\\t\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\t\\tlet title = this.currentResults[this.currentSelection - 1].result.name;\\r\\n\\t\\t\\t\\tthis.parentWidget.dispatchEvent({\\r\\n\\t\\t\\t\\t\\ttype: message,\\r\\n\\t\\t\\t\\t\\tparam: title,\\r\\n\\t\\t\\t\\t\\ttiddlerTitle: title,\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn {\\r\\n\\t\\t\\t\\thandler,\\r\\n\\t\\t\\t\\tprovider,\\r\\n\\t\\t\\t\\tresolver\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tonInput(text) {\\r\\n\\t\\t\\tif (this.blockProviderChange) { //prevent provider changes\\r\\n\\t\\t\\t\\tthis.currentProvider(text);\\r\\n\\t\\t\\t\\tthis.setSelectionToFirst();\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet { resolver, provider, terms } = this.parseCommand(text);\\r\\n\\t\\t\\tthis.currentResolver = resolver;\\r\\n\\t\\t\\tthis.currentProvider = provider;\\r\\n\\t\\t\\tthis.currentProvider(terms);\\r\\n\\t\\t\\tthis.setSelectionToFirst();\\r\\n\\t\\t}\\r\\n\\t\\tparseCommand(text) {\\r\\n\\t\\t\\tlet terms = \\\"\\\";\\r\\n\\t\\t\\tlet prefix = text.substr(0, 1);\\r\\n\\t\\t\\tlet resolver;\\r\\n\\t\\t\\tlet provider;\\r\\n\\t\\t\\tlet providerSymbol = Object.keys(this.symbolProviders).find(p => p === prefix);\\r\\n\\t\\t\\tif (providerSymbol === undefined) {\\r\\n\\t\\t\\t\\tresolver = this.defaultResolver;\\r\\n\\t\\t\\t\\tprovider = this.defaultProvider;\\r\\n\\t\\t\\t\\tterms = text;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tprovider = this.symbolProviders[providerSymbol].searcher;\\r\\n\\t\\t\\t\\tresolver = this.symbolProviders[providerSymbol].resolver;\\r\\n\\t\\t\\t\\tterms = text.substring(1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn { prefix: providerSymbol, resolver, provider, terms }\\r\\n\\t\\t}\\r\\n\\t\\tonClick(e) {\\r\\n\\t\\t\\tif (this.isOpened && !this.div.contains(e.target)) {\\r\\n\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\topenPaletteSelection(e) {\\r\\n\\t\\t\\tlet selection = this.getCurrentSelection();\\r\\n\\t\\t\\te.param = selection;\\r\\n\\t\\t\\tthis.openPalette(e);\\r\\n\\t\\t}\\r\\n\\t\\topenPalette(e) {\\r\\n\\t\\t\\tthis.isOpened = true;\\r\\n\\t\\t\\tthis.allowInputFieldSelection = false;\\r\\n\\t\\t\\tthis.goBack = undefined;\\r\\n\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\tlet activeElement = this.getActiveElement();\\r\\n\\t\\t\\tthis.previouslyFocused = { element: activeElement, start: activeElement.selectionStart, end: activeElement.selectionEnd, caretPos: activeElement.selectionEnd };\\r\\n\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\tif (e.param !== undefined) {\\r\\n\\t\\t\\t\\tthis.input.value = e.param;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (this.settings.alwaysPassSelection) {\\r\\n\\t\\t\\t\\tthis.input.value += this.getCurrentSelection();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.onInput(this.input.value); //Trigger results on open\\r\\n\\t\\t\\tthis.div.style.display = 'flex';\\r\\n\\t\\t\\tthis.input.focus();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinsertSelectedResult() {\\r\\n\\t\\t\\tif (!this.isOpened) return;\\r\\n\\t\\t\\tif (this.currentSelection === 0) return; //TODO: what to do here?\\r\\n\\t\\t\\tlet previous = this.previouslyFocused;\\r\\n\\t\\t\\tlet previousValue = previous.element.value;\\r\\n\\t\\t\\tif (previousValue === undefined) return;\\r\\n\\t\\t\\tlet selection = this.currentResults[this.currentSelection - 1].result.name;\\r\\n\\t\\t\\tif (previous.start !== previous.end) {\\r\\n\\t\\t\\t\\tthis.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.end);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tthis.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.start);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.previouslyFocused.caretPos = previous.start + selection.length;\\r\\n\\t\\t\\tthis.closePalette();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tclosePalette() {\\r\\n\\t\\t\\tthis.div.style.display = 'none';\\r\\n\\t\\t\\tthis.isOpened = false;\\r\\n\\t\\t\\tthis.focusAtCaretPosition(this.previouslyFocused.element, this.previouslyFocused.caretPos);\\r\\n\\t\\t}\\r\\n\\t\\tonKeyDown(e) {\\r\\n\\t\\t\\tif (e.key === 'Escape') {\\r\\n\\t\\t\\t\\t//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\\/ There's no previous state\\r\\n\\t\\t\\t\\tif (!this.settings.escapeGoesBack || this.goBack === undefined) {\\r\\n\\t\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tthis.goBack();\\r\\n\\t\\t\\t\\t\\tthis.goBack = undefined;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (e.key === 'ArrowUp') {\\r\\n\\t\\t\\t\\te.preventDefault();\\r\\n\\t\\t\\t\\te.stopPropagation();\\r\\n\\t\\t\\t\\tlet sel = this.currentSelection - 1;\\r\\n\\r\\n\\t\\t\\t\\tif (sel === 0) {\\r\\n\\t\\t\\t\\t\\tif (!this.allowInputFieldSelection) {\\r\\n\\t\\t\\t\\t\\t\\tsel = this.currentResults.length;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} else if (sel < 0) {\\r\\n\\t\\t\\t\\t\\tsel = this.currentResults.length;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tthis.setSelection(sel);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (e.key === 'ArrowDown') {\\r\\n\\t\\t\\t\\te.preventDefault();\\r\\n\\t\\t\\t\\te.stopPropagation();\\r\\n\\t\\t\\t\\tlet sel = (this.currentSelection + 1) % (this.currentResults.length + 1);\\r\\n\\t\\t\\t\\tif (!this.allowInputFieldSelection && sel === 0 && this.currentResults.length !== 0) {\\r\\n\\t\\t\\t\\t\\tsel = 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tthis.setSelection(sel);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (e.key === 'Enter') {\\r\\n\\t\\t\\t\\te.preventDefault();\\r\\n\\t\\t\\t\\te.stopPropagation();\\r\\n\\t\\t\\t\\tthis.validateSelection(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\taddResult(result, id) {\\r\\n\\t\\t\\tlet resultDiv = this.createElement('div', { className: 'commandpaletteresult', innerText: result.name });\\r\\n\\t\\t\\tif (result.hint !== undefined) {\\r\\n\\t\\t\\t\\tlet hint = this.createElement('div', { className: 'commandpalettehint', innerText: result.hint });\\r\\n\\t\\t\\t\\tresultDiv.append(hint);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tresultDiv.result = result;\\r\\n\\t\\t\\tthis.currentResults.push(resultDiv);\\r\\n\\t\\t\\tresultDiv.addEventListener('click', (e) => { this.setSelection(id + 1); this.validateSelection(e); });\\r\\n\\t\\t\\tthis.scrollDiv.append(resultDiv);\\r\\n\\t\\t}\\r\\n\\t\\tvalidateSelection(e) {\\r\\n\\t\\t\\tthis.currentResolver(e);\\r\\n\\t\\t}\\r\\n\\t\\tdefaultResolver(e) {\\r\\n\\t\\t\\tif (e.getModifierState('Shift')) {\\r\\n\\t\\t\\t\\tthis.input.value = '+' + this.input.value; //this resolver expects that the input starts with +\\r\\n\\t\\t\\t\\tthis.createTiddlerResolver(e);\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\tlet selectionTitle = this.currentResults[this.currentSelection - 1].result.name;\\r\\n\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\tthis.navigateTo(selectionTitle);\\r\\n\\t\\t}\\r\\n\\t\\tnavigateTo(title) {\\r\\n\\t\\t\\tthis.parentWidget.dispatchEvent({\\r\\n\\t\\t\\t\\ttype: 'tm-navigate',\\r\\n\\t\\t\\t\\tparam: title,\\r\\n\\t\\t\\t\\tnavigateTo: title\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tshowHistory() {\\r\\n\\t\\t\\tthis.hint.innerText = 'History';\\r\\n\\t\\t\\tthis.currentProvider = (terms) => {\\r\\n\\t\\t\\t\\tlet results;\\r\\n\\t\\t\\t\\tif (terms.length === 0) {\\r\\n\\t\\t\\t\\t\\tresults = this.getHistory();\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tresults = this.getHistory().filter(h => h.includes(terms));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tresults = results.map(r => { return { name: r, action: () => { this.navigateTo(r); this.closePalette(); } } });\\r\\n\\t\\t\\t\\tthis.showResults(results);\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\t\\tthis.currentResults[this.currentSelection - 1].result.action(e);\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsetSelectionToFirst() {\\r\\n\\t\\t\\tlet sel = 1;\\r\\n\\t\\t\\tif (this.allowInputFieldSelection || this.currentResults.length === 0) {\\r\\n\\t\\t\\t\\tsel = 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.setSelection(sel)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsetSelection(id) {\\r\\n\\t\\t\\tthis.currentSelection = id;\\r\\n\\t\\t\\tfor (let i = 0; i < this.currentResults.length; i++) {\\r\\n\\t\\t\\t\\tlet selected = this.currentSelection === i + 1;\\r\\n\\t\\t\\t\\tthis.currentResults[i].className = selected ? 'commandpaletteresult commandpaletteresultselected' : 'commandpaletteresult';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (this.currentSelection === 0) {\\r\\n\\t\\t\\t\\tthis.scrollDiv.scrollTop = 0;\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet scrollHeight = this.scrollDiv.offsetHeight;\\r\\n\\t\\t\\tlet scrollPos = this.scrollDiv.scrollTop;\\r\\n\\t\\t\\tlet selectionPos = this.currentResults[this.currentSelection - 1].offsetTop;\\r\\n\\t\\t\\tlet selectionHeight = this.currentResults[this.currentSelection - 1].offsetHeight;\\r\\n\\r\\n\\t\\t\\tif (selectionPos < scrollPos || selectionPos >= scrollPos + scrollHeight) {\\r\\n\\t\\t\\t\\t//select the closest scrolling position showing the selection\\r\\n\\t\\t\\t\\tlet a = selectionPos;\\r\\n\\t\\t\\t\\tlet b = selectionPos - scrollHeight + selectionHeight;\\r\\n\\t\\t\\t\\ta = Math.abs(a - scrollPos);\\r\\n\\t\\t\\t\\tb = Math.abs(b - scrollPos);\\r\\n\\t\\t\\t\\tif (a < b) {\\r\\n\\t\\t\\t\\t\\tthis.scrollDiv.scrollTop = selectionPos;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tthis.scrollDiv.scrollTop = selectionPos - scrollHeight + selectionHeight;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgetHistory() {\\r\\n\\t\\t\\tlet history = $tw.wiki.getTiddlerData('$:/HistoryList');\\r\\n\\t\\t\\tif (history === undefined) {\\r\\n\\t\\t\\t\\thistory = [];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thistory = [...history.reverse().map(x => x.title), ...$tw.wiki.filterTiddlers('[list[$:/StoryList]]')];\\r\\n\\t\\t\\treturn Array.from(new Set(history.filter(t => this.tiddlerOrShadowExists(t))));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ttiddlerOrShadowExists(title) {\\r\\n\\t\\t\\treturn $tw.wiki.tiddlerExists(title) || $tw.wiki.isShadowTiddler(title);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdefaultProvider(terms) {\\r\\n\\t\\t\\tthis.hint.innerText = 'Search tiddlers (⇧⏎ to create)';\\r\\n\\t\\t\\tlet searches;\\r\\n\\t\\t\\tif (terms.startsWith('\\\\\\\\')) terms = terms.substr(1);\\r\\n\\t\\t\\tif (terms.length === 0) {\\r\\n\\t\\t\\t\\tif (this.settings.showHistoryOnOpen) {\\r\\n\\t\\t\\t\\t\\tsearches = this.getHistory().map(s => { return { name: s, hint: 'history' } });\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tsearches = [];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tsearches = this.searchSteps.reduce((a, c) => [...a, ...c(terms)], []);\\r\\n\\t\\t\\t\\tsearches = Array.from(new Set(searches));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.showResults(searches);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsearchStepBuilder(filter, caret, hint) {\\r\\n\\t\\t\\treturn (terms) => {\\r\\n\\t\\t\\t\\tlet search = filter.substr(0, caret) + terms + filter.substr(caret);\\r\\n\\t\\t\\t\\tlet results = $tw.wiki.filterTiddlers(search).map(s => { return { name: s, hint: hint } });\\r\\n\\t\\t\\t\\treturn results;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ttagListProvider(terms) {\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = 'Search tags';\\r\\n\\t\\t\\tlet searches;\\r\\n\\t\\t\\tif (terms.length === 0) {\\r\\n\\t\\t\\t\\tsearches = $tw.wiki.filterTiddlers('[!is[system]tags[]][is[system]tags[]][all[shadows]tags[]]');\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tsearches = $tw.wiki.filterTiddlers('[all[]tags[]!is[system]search[' + terms + ']][all[]tags[]is[system]search[' + terms + ']][all[shadows]tags[]search[' + terms + ']]');\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tsearches = searches.map(s => { return { name: s }; });\\r\\n\\t\\t\\tthis.showResults(searches);\\r\\n\\t\\t}\\r\\n\\t\\ttagListResolver(e) {\\r\\n\\t\\t\\tif (this.currentSelection === 0) {\\r\\n\\t\\t\\t\\tlet input = this.input.value.substr(1);\\r\\n\\t\\t\\t\\tlet exist = $tw.wiki.filterTiddlers('[tag[' + input + ']]');\\r\\n\\t\\t\\t\\tif (!exist)\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t\\tthis.input.value = '@' + input;\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet result = this.currentResults[this.currentSelection - 1];\\r\\n\\t\\t\\tthis.input.value = '@' + result.innerText;\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\t\\ttagProvider(terms) {\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = 'Search tiddlers with @tag(s)';\\r\\n\\t\\t\\tlet searches = [];\\r\\n\\t\\t\\tif (terms.length !== 0) {\\r\\n\\t\\t\\t\\tlet { tags, searchTerms, tagsFilter } = this.parseTags(this.input.value);\\r\\n\\t\\t\\t\\tlet taggedTiddlers = $tw.wiki.filterTiddlers(tagsFilter);\\r\\n\\r\\n\\t\\t\\t\\tif (taggedTiddlers.length !== 0) {\\r\\n\\t\\t\\t\\t\\tif (tags.length === 1) {\\r\\n\\t\\t\\t\\t\\t\\tlet tag = tags[0];\\r\\n\\t\\t\\t\\t\\t\\tlet tagTiddlerExists = this.tiddlerOrShadowExists(tag);\\r\\n\\t\\t\\t\\t\\t\\tif (tagTiddlerExists && searchTerms.some(s => tag.includes(s))) searches.push(tag);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tsearches = [...searches, ...taggedTiddlers];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tsearches = searches.map(s => { return { name: s } });\\r\\n\\t\\t\\tthis.showResults(searches);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tparseTags(input) {\\r\\n\\t\\t\\tlet splits = input.split(' ').filter(s => s !== '');\\r\\n\\t\\t\\tlet tags = [];\\r\\n\\t\\t\\tlet searchTerms = [];\\r\\n\\t\\t\\tfor (let i = 0; i < splits.length; i++) {\\r\\n\\t\\t\\t\\tif (splits[i].startsWith('@')) {\\r\\n\\t\\t\\t\\t\\ttags.push(splits[i].substr(1));\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tsearchTerms.push(splits[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet tagsFilter = `[all[tiddlers+system+shadows]${tags.reduce((a, c) => { return a + 'tag[' + c + ']' }, '')}]`;\\r\\n\\t\\t\\tif (searchTerms.length !== 0) {\\r\\n\\t\\t\\t\\ttagsFilter = tagsFilter.substr(0, tagsFilter.length - 1); //remove last ']'\\r\\n\\t\\t\\t\\ttagsFilter += `search[${searchTerms.join(' ')}]]`;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn { tags, searchTerms, tagsFilter };\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsettingsProvider(terms) {\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = 'Select the setting you want to change';\\r\\n\\t\\t\\tlet isNumerical = (terms) => terms.length !== 0 && terms.match(/\\\\D/gm) === null;\\r\\n\\t\\t\\tlet isBoolean = (terms) => terms.length !== 0 && terms.match(/(true\\\\b)|(false\\\\b)/gmi) !== null;\\r\\n\\t\\t\\tthis.showResults([\\r\\n\\t\\t\\t\\t{ name: 'Theme (currently ' + this.settings.theme.match(/[^\\\\/]*$/) + ')', action: () => this.promptForThemeSetting() },\\r\\n\\t\\t\\t\\tthis.settingResultBuilder('Max results', 'maxResults', 'Choose the maximum number of results', isNumerical, 'Error: value must be a positive integer'),\\r\\n\\t\\t\\t\\tthis.settingResultBuilder('Show history on open', 'showHistoryOnOpen', 'Chose whether to show the history when you open the palette', isBoolean, 'Error: value must be \\\\'true\\\\' or \\\\'false\\\\''),\\r\\n\\t\\t\\t\\tthis.settingResultBuilder('Escape to go back', 'escapeGoesBack', 'Chose whether ESC should go back when possible', isBoolean, 'Error: value must be \\\\'true\\\\' or \\\\'false\\\\''),\\r\\n\\t\\t\\t\\tthis.settingResultBuilder('Use selection as search query', 'alwaysPassSelection', 'Chose your current selection is passed to the command palette', isBoolean, 'Error: value must be \\\\'true\\\\' or \\\\'false\\\\''),\\r\\n\\t\\t\\t\\tthis.settingResultBuilder('Never Basic', 'neverBasic', 'Chose whether to override basic prompts to show filter operation', isBoolean, 'Error: value must be \\\\'true\\\\' or \\\\'false\\\\''),\\r\\n\\t\\t\\t\\tthis.settingResultBuilder('Field preview max size', 'maxResultHintSize', 'Choose the maximum hint length for field preview', isNumerical, 'Error: value must be a positive integer'),\\r\\n\\t\\t\\t]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsettingResultBuilder(name, settingName, hint, validator, errorMsg) {\\r\\n\\t\\t\\treturn { name: name + ' (currently ' + this.settings[settingName] + ')', action: () => this.promptForSetting(settingName, hint, validator, errorMsg) }\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsettingsResolver(e) {\\r\\n\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\tthis.goBack = () => {\\r\\n\\t\\t\\t\\tthis.input.value = '|';\\r\\n\\t\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.currentResults[this.currentSelection - 1].result.action();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpromptForThemeSetting() {\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tthis.allowInputFieldSelection = false;\\r\\n\\t\\t\\tthis.currentProvider = (terms) => {\\r\\n\\t\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\t\\tthis.hint.innerText = 'Choose a theme';\\r\\n\\t\\t\\t\\tlet defaultValue = this.defaultSettings['theme'];\\r\\n\\t\\t\\t\\tlet results = [{ name: 'Revert to default value: ' + defaultValue.match(/[^\\\\/]*$/), action: () => { this.setSetting('theme', defaultValue); this.refreshThemes(); } }];\\r\\n\\t\\t\\t\\tfor (let theme of this.themes) {\\r\\n\\t\\t\\t\\t\\tlet name = theme.fields.title;\\r\\n\\t\\t\\t\\t\\tlet shortName = name.match(/[^\\\\/]*$/);\\r\\n\\t\\t\\t\\t\\tlet action = () => { this.setSetting('theme', name); this.refreshThemes(); }\\r\\n\\t\\t\\t\\t\\tresults.push({ name: shortName, action: action });\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tthis.showResults(results);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\tthis.currentResults[this.currentSelection - 1].result.action(e);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.input.value = '';\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//Validator = (terms) => bool\\r\\n\\t\\tpromptForSetting(settingName, hint, validator, errorMsg) {\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tthis.allowInputFieldSelection = true;\\r\\n\\t\\t\\tthis.currentProvider = (terms) => {\\r\\n\\t\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\t\\tthis.hint.innerText = hint;\\r\\n\\t\\t\\t\\tlet defaultValue = this.defaultSettings[settingName];\\r\\n\\t\\t\\t\\tlet results = [{ name: 'Revert to default value: ' + defaultValue, action: () => this.setSetting(settingName, defaultValue) }];\\r\\n\\t\\t\\t\\tif (!validator(terms)) {\\r\\n\\t\\t\\t\\t\\tresults.push({ name: errorMsg });\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tthis.showResults(results);\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tthis.currentResolver = (e) => {\\r\\n\\t\\t\\t\\tif (this.currentSelection === 0) {\\r\\n\\t\\t\\t\\t\\tlet input = this.input.value;\\r\\n\\t\\t\\t\\t\\tif (validator(input)) {\\r\\n\\t\\t\\t\\t\\t\\tthis.setSetting(settingName, input);\\r\\n\\t\\t\\t\\t\\t\\tthis.goBack = undefined;\\r\\n\\t\\t\\t\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\t\\t\\t\\tthis.allowInputFieldSelection = false;\\r\\n\\t\\t\\t\\t\\t\\tthis.promptCommand('|');\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tlet action = this.currentResults[this.currentSelection - 1].result.action;\\r\\n\\t\\t\\t\\t\\tif (action) {\\r\\n\\t\\t\\t\\t\\t\\taction();\\r\\n\\t\\t\\t\\t\\t\\tthis.goBack = undefined;\\r\\n\\t\\t\\t\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\t\\t\\t\\tthis.allowInputFieldSelection = false;\\r\\n\\t\\t\\t\\t\\t\\tthis.promptCommand('|');\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.input.value = this.settings[settingName];\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tshowResults(results) {\\r\\n\\t\\t\\tfor (let cur of this.currentResults) {\\r\\n\\t\\t\\t\\tcur.remove();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.currentResults = [];\\r\\n\\t\\t\\tlet resultCount = 0;\\r\\n\\t\\t\\tfor (let result of results) {\\r\\n\\t\\t\\t\\tthis.addResult(result, resultCount);\\r\\n\\t\\t\\t\\tresultCount++;\\r\\n\\t\\t\\t\\tif (resultCount >= this.settings.maxResults)\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ttmMessageBuilder(message, params = {}) {\\r\\n\\t\\t\\treturn (e) => {\\r\\n\\t\\t\\t\\tlet event = {\\r\\n\\t\\t\\t\\t\\ttype: message,\\r\\n\\t\\t\\t\\t\\tparamObject: params,\\r\\n\\t\\t\\t\\t\\tevent: e,\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\tthis.parentWidget.dispatchEvent(event);\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\t\\tactionProvider(terms) {\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = 'Search commands';\\r\\n\\t\\t\\tlet results;\\r\\n\\t\\t\\tif (terms.length === 0) {\\r\\n\\t\\t\\t\\tresults = this.getCommandHistory();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tresults = this.actions.filter(a => a.name.toLowerCase().includes(terms.toLowerCase()));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.showResults(results);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thelpProvider(terms) { //TODO: tiddlerify?\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = 'Help';\\r\\n\\t\\t\\tlet searches = [\\r\\n\\t\\t\\t\\t{ name: '... Search', action: () => this.promptCommand('') },\\r\\n\\t\\t\\t\\t{ name: '> Commands', action: () => this.promptCommand('>') },\\r\\n\\t\\t\\t\\t{ name: '+ Create tiddler with title', action: () => this.promptCommand('+') },\\r\\n\\t\\t\\t\\t{ name: '# Search tags', action: () => this.promptCommand('#') },\\r\\n\\t\\t\\t\\t{ name: '@ List tiddlers with tag', action: () => this.promptCommand('@') },\\r\\n\\t\\t\\t\\t{ name: '[ Filter operation', action: () => this.promptCommand('[') },\\r\\n\\t\\t\\t\\t{ name: '| Command Palette Settings', action: () => this.promptCommand('|') },\\r\\n\\t\\t\\t\\t{ name: '\\\\\\\\ Escape first character', action: () => this.promptCommand('\\\\\\\\') },\\r\\n\\t\\t\\t\\t{ name: '? Help', action: () => this.promptCommand('?') },\\r\\n\\t\\t\\t];\\r\\n\\t\\t\\tthis.showResults(searches);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfilterProvider(terms, hint) {\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = hint === undefined ? 'Filter operation' : hint;\\r\\n\\t\\t\\tterms = '[' + terms;\\r\\n\\t\\t\\tlet fields = $tw.wiki.filterTiddlers('[fields[]]');\\r\\n\\t\\t\\tlet results = $tw.wiki.filterTiddlers(terms).map(r => { return { name: r } });\\r\\n\\t\\t\\tlet insertResult = (i, result) => results.splice(i + 1, 0, result);\\r\\n\\t\\t\\tfor (let i = 0; i < results.length; i++) {\\r\\n\\t\\t\\t\\tlet initialResult = results[i];\\r\\n\\t\\t\\t\\tlet alreadyMatched = false;\\r\\n\\t\\t\\t\\tlet date = 'Invalid Date';\\r\\n\\t\\t\\t\\tif (initialResult.name.length === 17) { //to be sure to only match tiddly dates (17 char long)\\r\\n\\t\\t\\t\\t\\tdate = $tw.utils.parseDate(initialResult.name).toLocaleString();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (date !== \\\"Invalid Date\\\") {\\r\\n\\t\\t\\t\\t\\tresults[i].hint = date;\\r\\n\\t\\t\\t\\t\\tresults[i].action = () => { };\\r\\n\\t\\t\\t\\t\\talreadyMatched = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlet isTag = $tw.wiki.getTiddlersWithTag(initialResult.name).length !== 0;\\r\\n\\t\\t\\t\\tif (isTag) {\\r\\n\\t\\t\\t\\t\\tif (alreadyMatched) {\\r\\n\\t\\t\\t\\t\\t\\tinsertResult(i, { ...results[i] });\\r\\n\\t\\t\\t\\t\\t\\ti += 1;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tresults[i].action = () => this.promptCommand('@' + initialResult.name);\\r\\n\\t\\t\\t\\t\\tresults[i].hint = 'Tag'; //Todo more info?\\r\\n\\t\\t\\t\\t\\talreadyMatched = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlet isTiddler = this.tiddlerOrShadowExists(initialResult.name);\\r\\n\\t\\t\\t\\tif (isTiddler) {\\r\\n\\t\\t\\t\\t\\tif (alreadyMatched) {\\r\\n\\t\\t\\t\\t\\t\\tinsertResult(i, { ...results[i] });\\r\\n\\t\\t\\t\\t\\t\\ti += 1;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tresults[i].action = () => { this.navigateTo(initialResult.name); this.closePalette() }\\r\\n\\t\\t\\t\\t\\tresults[i].hint = 'Tiddler';\\r\\n\\t\\t\\t\\t\\talreadyMatched = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlet isField = fields.includes(initialResult.name);\\r\\n\\t\\t\\t\\tif (isField) {\\r\\n\\t\\t\\t\\t\\tif (alreadyMatched) {\\r\\n\\t\\t\\t\\t\\t\\tinsertResult(i, { ...results[i] });\\r\\n\\t\\t\\t\\t\\t\\ti += 1;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tlet parsed;\\r\\n\\t\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\t\\tparsed = $tw.wiki.parseFilter(this.input.value)\\r\\n\\t\\t\\t\\t\\t} catch (e) { } //The error is already displayed to the user\\r\\n\\t\\t\\t\\t\\tlet foundTitles = [];\\r\\n\\t\\t\\t\\t\\tfor (let node of parsed || []) {\\r\\n\\t\\t\\t\\t\\t\\tif (node.operators.length !== 2) continue;\\r\\n\\t\\t\\t\\t\\t\\tif (node.operators[0].operator === 'title' && node.operators[1].operator === 'fields') {\\r\\n\\t\\t\\t\\t\\t\\t\\tfoundTitles.push(node.operators[0].operand);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tlet hint = 'Field';\\r\\n\\t\\t\\t\\t\\tif (foundTitles.length === 1) {\\r\\n\\t\\t\\t\\t\\t\\thint = $tw.wiki.getTiddler(foundTitles[0]).fields[initialResult.name];\\r\\n\\t\\t\\t\\t\\t\\tif (hint instanceof Date) {\\r\\n\\t\\t\\t\\t\\t\\t\\thint = hint.toLocaleString();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\thint = hint.toString().replace(/(\\\\r\\\\n|\\\\n|\\\\r)/gm, '');\\r\\n\\t\\t\\t\\t\\t\\tlet maxSize = this.settings.maxResultHintSize - 3;\\r\\n\\t\\t\\t\\t\\t\\tif (hint.length > maxSize) {\\r\\n\\t\\t\\t\\t\\t\\t\\thint = hint.substring(0, maxSize);\\r\\n\\t\\t\\t\\t\\t\\t\\thint += '...';\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tresults[i].hint = hint;\\r\\n\\t\\t\\t\\t\\tresults[i].action = () => { };\\r\\n\\t\\t\\t\\t\\talreadyMatched = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// let isContentType = terms.includes('content-type');\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.showResults(results);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfilterResolver(e) {\\r\\n\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\tthis.currentResults[this.currentSelection - 1].result.action();\\r\\n\\t\\t\\te.stopPropagation();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thelpResolver(e) {\\r\\n\\t\\t\\tif (this.currentSelection === 0) return;\\r\\n\\t\\t\\tthis.currentResults[this.currentSelection - 1].result.action();\\r\\n\\t\\t\\te.stopPropagation();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcreateTiddlerProvider(terms) {\\r\\n\\t\\t\\tthis.currentSelection = 0;\\r\\n\\t\\t\\tthis.hint.innerText = 'Create new tiddler with title @tag(s)';\\r\\n\\t\\t\\tthis.showResults([]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcreateTiddlerResolver(e) {\\r\\n\\t\\t\\tlet { tags, searchTerms } = this.parseTags(this.input.value.substr(1));\\r\\n\\t\\t\\tlet title = searchTerms.join(' ');\\r\\n\\t\\t\\ttags = tags.join(' ');\\r\\n\\t\\t\\tthis.tmMessageBuilder('tm-new-tiddler', { title: title, tags: tags })(e);\\r\\n\\t\\t\\tthis.closePalette();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpromptCommand(value, caret) {\\r\\n\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\tthis.input.value = value;\\r\\n\\t\\t\\tthis.input.focus();\\r\\n\\t\\t\\tif (caret !== undefined) {\\r\\n\\t\\t\\t\\tthis.input.setSelectionRange(caret, caret);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpromptCommandBasic(value, caret, hint) {\\r\\n\\t\\t\\tif (this.settings.neverBasic === 'true' || this.settings.neverBasic === true) { //TODO: validate settings to avoid unnecessary checks\\r\\n\\t\\t\\t\\tthis.promptCommand(value, caret);\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.input.value = \\\"\\\";\\r\\n\\t\\t\\tthis.blockProviderChange = true;\\r\\n\\t\\t\\tthis.currentProvider = this.basicProviderBuilder(value, caret, hint);\\r\\n\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbasicProviderBuilder(value, caret, hint) {\\r\\n\\t\\t\\tlet start = value.substr(0, caret);\\r\\n\\t\\t\\tlet end = value.substr(caret);\\r\\n\\t\\t\\treturn (input) => {\\r\\n\\t\\t\\t\\tlet { resolver, provider, terms } = this.parseCommand(start + input + end);\\r\\n\\t\\t\\t\\tlet backgroundProvider = provider;\\r\\n\\t\\t\\t\\tbackgroundProvider(terms, hint);\\r\\n\\t\\t\\t\\tthis.currentResolver = resolver;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgetCommandHistory() {\\r\\n\\t\\t\\tthis.history = this.history.filter(h => this.actions.some(a => a.name === h)); //get rid of deleted command that are still in history;\\r\\n\\t\\t\\tlet results = this.history.map(h => this.actions.find(a => a.name === h));\\r\\n\\t\\t\\twhile (results.length <= this.settings.maxResults) {\\r\\n\\t\\t\\t\\tlet nextDefaultAction = this.actions.find(a => !results.includes(a));\\r\\n\\t\\t\\t\\tif (nextDefaultAction === undefined)\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tresults.push(nextDefaultAction);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn results;\\r\\n\\t\\t}\\r\\n\\t\\tactionResolver(e) {\\r\\n\\t\\t\\tif (this.currentSelection === 0)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\tlet result = this.actions.find(a => a.name === this.currentResults[this.currentSelection - 1].innerText);\\r\\n\\t\\t\\tif (result.keepPalette) {\\r\\n\\t\\t\\t\\tlet curInput = this.input.value;\\r\\n\\t\\t\\t\\tthis.goBack = () => {\\r\\n\\t\\t\\t\\t\\tthis.input.value = curInput;\\r\\n\\t\\t\\t\\t\\tthis.blockProviderChange = false;\\r\\n\\t\\t\\t\\t\\tthis.onInput(this.input.value);\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.updateCommandHistory(result);\\r\\n\\t\\t\\tresult.action(e);\\r\\n\\t\\t\\te.stopPropagation();\\r\\n\\t\\t\\tif (result.immediate) {\\r\\n\\t\\t\\t\\tthis.validateSelection(e);\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (!result.keepPalette) {\\r\\n\\t\\t\\t\\tthis.closePalette();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgetCurrentSelection() {\\r\\n\\t\\t\\tlet selection = window.getSelection().toString();\\r\\n\\t\\t\\tif (selection !== '') return selection;\\r\\n\\t\\t\\tlet activeElement = this.getActiveElement();\\r\\n\\t\\t\\tif (activeElement === undefined || activeElement.selectionStart === undefined) return '';\\r\\n\\t\\t\\tif (activeElement.selectionStart > activeElement.selectionEnd) {\\r\\n\\t\\t\\t\\treturn activeElement.value.substring(activeElement.selectionStart, activeElement.selectionEnd);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn activeElement.value.substring(activeElement.selectionEnd, activeElement.selectionStart);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tgetActiveElement(element = document.activeElement) {\\r\\n\\t\\t\\tconst shadowRoot = element.shadowRoot\\r\\n\\t\\t\\tconst contentDocument = element.contentDocument\\r\\n\\r\\n\\t\\t\\tif (shadowRoot && shadowRoot.activeElement) {\\r\\n\\t\\t\\t\\treturn this.getActiveElement(shadowRoot.activeElement)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (contentDocument && contentDocument.activeElement) {\\r\\n\\t\\t\\t\\treturn this.getActiveElement(contentDocument.activeElement)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn element\\r\\n\\t\\t}\\r\\n\\t\\tfocusAtCaretPosition(el, caretPos) {\\r\\n\\t\\t\\tif (el !== null) {\\r\\n\\t\\t\\t\\tel.value = el.value;\\r\\n\\t\\t\\t\\t// ^ this is used to not only get \\\"focus\\\", but\\r\\n\\t\\t\\t\\t// to make sure we don't have it everything -selected-\\r\\n\\t\\t\\t\\t// (it causes an issue in chrome, and having it doesn't hurt any other browser)\\r\\n\\t\\t\\t\\tif (el.createTextRange) {\\r\\n\\t\\t\\t\\t\\tvar range = el.createTextRange();\\r\\n\\t\\t\\t\\t\\trange.move('character', caretPos);\\r\\n\\t\\t\\t\\t\\trange.select();\\r\\n\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t// (el.selectionStart === 0 added for Firefox bug)\\r\\n\\t\\t\\t\\t\\tif (el.selectionStart || el.selectionStart === 0) {\\r\\n\\t\\t\\t\\t\\t\\tel.focus();\\r\\n\\t\\t\\t\\t\\t\\tel.setSelectionRange(caretPos, caretPos);\\r\\n\\t\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\telse { // fail city, fortunately this never happens (as far as I've tested) :)\\r\\n\\t\\t\\t\\t\\t\\tel.focus();\\r\\n\\t\\t\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tcreateElement(name, proprieties, styles) {\\r\\n\\t\\t\\tlet el = this.document.createElement(name);\\r\\n\\t\\t\\tfor (let [propriety, value] of Object.entries(proprieties || {})) {\\r\\n\\t\\t\\t\\tel[propriety] = value;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor (let [style, value] of Object.entries(styles || {})) {\\r\\n\\t\\t\\t\\tel.style[style] = value;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn el;\\r\\n\\t\\t}\\r\\n\\t\\t/*\\r\\n\\t\\t\\tSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\r\\n\\t\\t\\t*/\\r\\n\\t\\trefresh() {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\texports.commandpalettewidget = CommandPaletteWidget;\\r\\n\\r\\n})();\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}