{"title":"$:/plugins/linonetwo/source-control-management","name":"NodeJS Wiki TiddlyGit Github Sync","description":"Use TiddlyGit's NodeJS API to sync data to git on the cloud","author":"LinOnetwo","core-version":">=5.1.22","plugin-type":"plugin","version":"0.1.0","list":"readme","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/linonetwo/source-control-management/PageControlButton\":{\"title\":\"$:/plugins/linonetwo/source-control-management/PageControlButton\",\"tags\":\"$:/tags/PageControls\",\"type\":\"text/vnd.tiddlywiki\",\"caption\":\"{{$:/plugins/linonetwo/source-control-management/icons/git-sync.svg}} 备份本地Git\",\"description\":\"显示本地笔记是否同步备份到Github，点击可同步\",\"text\":\"<$nodejs-tiddlygit-git-sync />\\r\\n\"},\"$:/plugins/linonetwo/source-control-management/SideBarSCMTab\":{\"title\":\"$:/plugins/linonetwo/source-control-management/SideBarSCMTab\",\"tags\":\"$:/tags/SideBar\",\"type\":\"text/vnd.tiddlywiki\",\"caption\":\"SCM\",\"description\":\"Source Control Management\",\"text\":\"<$git-sync-scm-tab />\\r\\n\"},\"$:/plugins/linonetwo/source-control-management/button.js\":{\"title\":\"$:/plugins/linonetwo/source-control-management/button.js\",\"text\":\"/*\\\\\\r\\nShow local git state and sync to git on click.\\r\\nRequires you are using TiddlyGit, and have install the \\\"Inject JS\\\" API with access to NodeJS and Electron API).\\r\\n\\r\\n\\\\*/\\r\\n(function () {\\r\\n  /*jslint node: true, browser: true */\\r\\n  /*global $tw: true */\\r\\n  'use strict';\\r\\n\\r\\n  const Widget = require('$:/core/modules/widgets/widget.js').widget;\\r\\n\\r\\n  class NodeJSGitSyncWidget extends Widget {\\r\\n    /**\\r\\n     * Lifecycle method: call this.initialise and super\\r\\n     */\\r\\n    constructor(parseTreeNode, options) {\\r\\n      super(parseTreeNode, options);\\r\\n      this.initialise(parseTreeNode, options);\\r\\n      this.state = {\\r\\n        needSetUp: false, // need to setup api, or just API missing\\r\\n        interval: 1000, // check interval\\r\\n        count: 0, // things need to commit\\r\\n        unsync: false, // need to push to github\\r\\n        syncing: false, // a sync is in progress\\r\\n      };\\r\\n      this.checkInLoop();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Lifecycle method: Render this widget into the DOM\\r\\n     */\\r\\n    render(parent, nextSibling) {\\r\\n      // boilerplate\\r\\n      this.parentDomNode = parent;\\r\\n      this.computeAttributes();\\r\\n\\r\\n      // DOM\\r\\n      const importButton = this.document.createElement('button');\\r\\n      importButton.className = 'tc-btn-invisible tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync ';\\r\\n      importButton.onclick = this.onSyncButtonClick.bind(this);\\r\\n\\r\\n      // set icon\\r\\n      if (this.state.needSetUp) {\\r\\n        // all commit and sync to cloud\\r\\n        importButton.className += 'git-sync';\\r\\n        // tooltip\\r\\n        const label = '需要配置TiddlyGit';\\r\\n        importButton.title = label;\\r\\n        importButton['aria-label'] = label;\\r\\n        // icon\\r\\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-sync.svg');\\r\\n      } else if (this.state.syncing) {\\r\\n        // all commit and sync to cloud\\r\\n        importButton.className += 'git-sync syncing';\\r\\n        // tooltip\\r\\n        const label = '正在同步到云端';\\r\\n        importButton.title = label;\\r\\n        importButton['aria-label'] = label;\\r\\n        // icon\\r\\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-sync.svg');\\r\\n      } else if (this.state.count === 0 && !this.state.unsync) {\\r\\n        // all commit and sync to cloud\\r\\n        importButton.className += 'git-sync';\\r\\n        // tooltip\\r\\n        const label = '已完全同步到云端';\\r\\n        importButton.title = label;\\r\\n        importButton['aria-label'] = label;\\r\\n        // icon\\r\\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-sync.svg');\\r\\n      } else if (this.state.count === 0 && this.state.unsync) {\\r\\n        // some commit need to sync to the cloud\\r\\n        importButton.className += 'git-pull-request';\\r\\n        // tooltip\\r\\n        const label = '待推送到云端';\\r\\n        importButton.title = label;\\r\\n        importButton['aria-label'] = label;\\r\\n        // icon\\r\\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg');\\r\\n      } else {\\r\\n        // some need to commit, and not sync to cloud yet\\r\\n        importButton.className += 'git-pull-request';\\r\\n        // tooltip\\r\\n        const label = `${this.state.count} 个文件待提交和推送`;\\r\\n        importButton.title = label;\\r\\n        importButton['aria-label'] = label;\\r\\n        // icon\\r\\n        const iconSVG = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg');\\r\\n        // add count indicator badge\\r\\n        const countIndicator = `<span class=\\\"tiddlygit-scm-count tiddlygit-scm-count-small\\\">${this.state.count}</span>`;\\r\\n        importButton.innerHTML = `<span>${iconSVG}${countIndicator}</span>`;\\r\\n      }\\r\\n\\r\\n      // boilerplate\\r\\n      parent.insertBefore(importButton, nextSibling);\\r\\n      this.domNodes.push(importButton);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Event listener of button\\r\\n     */\\r\\n    async onSyncButtonClick() {\\r\\n      if (!this.state.syncing && this.state.unsync) {\\r\\n        this.state.syncing = true;\\r\\n        this.refreshSelf();\\r\\n        try {\\r\\n          const workspaces = await window.service.workspace.getWorkspacesAsList();\\r\\n          const tasks = workspaces.map(async ({ wikiFolderLocation, gitUrl, storageService }) => {\\r\\n            const userInfo = await this.authService.getStorageServiceUserInfo(storageService);\\r\\n            window.service.git.debounceCommitAndSync(wikiFolderLocation, gitUrl, userInfo);\\r\\n          });\\r\\n          await Promise.all(tasks);\\r\\n        } catch (error) {\\r\\n          console.error('NodeJSGitSyncWidget: Error syncing', error);\\r\\n        }\\r\\n        this.state.syncing = false;\\r\\n        this.refreshSelf();\\r\\n      }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Check state every a few time\\r\\n     */\\r\\n    async checkInLoop() {\\r\\n      // check if API from TiddlyGit is available, first time it is Server Side Rendening so window.xxx from the electron ContextBridge will be missing\\r\\n      if (\\r\\n        !window.service.git ||\\r\\n        typeof window.service.git.commitAndSync !== 'function' ||\\r\\n        typeof window.service.git.getModifiedFileList !== 'function' ||\\r\\n        typeof window.service.workspace.getWorkspacesAsList !== 'function'\\r\\n      ) {\\r\\n        this.state.needSetUp = true;\\r\\n      } else {\\r\\n        this.state.needSetUp = false;\\r\\n        this.checkGitState();\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        this.checkInLoop();\\r\\n      }, this.state.interval);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  Check repo git sync state and count of uncommit things\\r\\n     */\\r\\n    async checkGitState() {\\r\\n      const workspaces = await window.service.workspace.getWorkspacesAsList();\\r\\n      const repoStatuses = [];\\r\\n      for (const workspace of workspaces) {\\r\\n        const modifiedListString = $tw.wiki.getTiddlerText(`$:/state/scm-modified-file-list/${workspace.wikiFolderLocation}`);\\r\\n        if (modifiedListString !== undefined) {\\r\\n          const modifiedListJSON = JSON.parse(modifiedListString);\\r\\n          repoStatuses.push(modifiedListJSON);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      this.state.count = 0;\\r\\n      this.state.unsync = false;\\r\\n      for (const repoStatus of repoStatuses) {\\r\\n        if (repoStatus.length) {\\r\\n          this.state.count += repoStatus.length;\\r\\n          this.state.unsync = true;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return this.refreshSelf(); // method from super class, this is like React forceUpdate, we use it because it is not fully reactive on this.state change\\r\\n    }\\r\\n  }\\r\\n\\r\\n  exports['nodejs-tiddlygit-git-sync'] = NodeJSGitSyncWidget;\\r\\n})();\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg\":{\"title\":\"$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg\",\"text\":\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"tc-image-button\\\" width=\\\"22\\\" height=\\\"22\\\" viewBox=\\\"0 0 22 22\\\" stroke-width=\\\"2\\\" stroke=\\\"currentColor\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\r\\n  <path stroke=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\"/>\\r\\n  <circle cx=\\\"6\\\" cy=\\\"18\\\" r=\\\"2\\\"/>\\r\\n  <circle cx=\\\"6\\\" cy=\\\"6\\\" r=\\\"2\\\"/>\\r\\n  <circle cx=\\\"18\\\" cy=\\\"18\\\" r=\\\"2\\\"/>\\r\\n  <line x1=\\\"6\\\" y1=\\\"8\\\" x2=\\\"6\\\" y2=\\\"16\\\"/>\\r\\n  <path d=\\\"M11 6h5a2 2 0 0 1 2 2v8\\\"/>\\r\\n  <polyline points=\\\"14 9 11 6 14 3\\\"/>\\r\\n</svg>\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/plugins/linonetwo/source-control-management/icons/git-sync.svg\":{\"title\":\"$:/plugins/linonetwo/source-control-management/icons/git-sync.svg\",\"text\":\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"tc-image-button\\\" width=\\\"22\\\" height=\\\"22\\\" viewBox=\\\"0 0 22 22\\\" stroke-width=\\\"2\\\" stroke=\\\"currentColor\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\r\\n  <path stroke=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\"/>\\r\\n  <circle cx=\\\"6\\\" cy=\\\"6\\\" r=\\\"2\\\"/>\\r\\n  <circle cx=\\\"18\\\" cy=\\\"18\\\" r=\\\"2\\\"/>\\r\\n  <path d=\\\"M11 6h5a2 2 0 0 1 2 2v8\\\"/>\\r\\n  <polyline points=\\\"14 9 11 6 14 3\\\"/>\\r\\n  <path d=\\\"M13 18h-5a2 2 0 0 1 -2 -2v-8\\\"/>\\r\\n  <polyline points=\\\"10 15 13 18 10 21\\\"/>\\r\\n</svg>\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/plugins/linonetwo/source-control-management/readme\":{\"title\":\"$:/plugins/linonetwo/source-control-management/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!! 功能\\n\\n[[WebCatalog|https://webcatalogapp.com/]] 除了[[能将 TiddlyWiki 包装成桌面应用|https://onetwo.ren/%E7%94%A8tiddlywiki%E6%9B%BF%E4%BB%A3notion%E5%92%8Cevernote%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86/]]以外，还提供了自定义 API 并暴露给网页的功能，让我们可以在 Wiki 网页里使用一些高级功能。\\n\\n本插件利用暴露的自定义 API 实现：\\n\\n# 查看本地 NodeJS 版 TiddlyWiki 是否完全与 Github 备份云同步了\\r\\n# 一键同步本地和云端\\n\\n!! 用法\\n\\n当点开 SCM 标签页的时候，会进行一次 git 环境检查，因为使用的 git 库 dugite 比较卡，所以只进行一次检查，如果需要刷新，需要来回切换一下 tab。\\r\\n\"},\"$:/plugins/linonetwo/source-control-management/style.css\":{\"title\":\"$:/plugins/linonetwo/source-control-management/style.css\",\"text\":\"button.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync.git-sync {\\r\\n  cursor: not-allowed;\\r\\n}\\r\\nspan.tiddlygit-scm-count {\\r\\n  position: absolute;\\r\\n  background: dimgrey;\\r\\n  color: white;\\r\\n  border-radius: 9999px;\\r\\n  opacity: 0.5;\\r\\n  min-width: 1.2em;\\r\\n  margin-left: 0.5em;\\r\\n  padding-left: 0.25em;\\r\\n  padding-top: 0.1em;\\r\\n  padding-right: 0.25em;\\r\\n  width: fit-content;\\r\\n}\\r\\nspan.tiddlygit-scm-count-small {\\r\\n  font-size: 0.6em;\\r\\n  padding-left: 0.2em;\\r\\n  padding-right: 0.2em;\\r\\n  line-height: 1.3em;\\r\\n  margin-left: -1em;\\r\\n}\\r\\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > span > svg,\\r\\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > svg {\\r\\n  fill: none;\\r\\n  color: #aaa;\\r\\n}\\r\\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > span > svg:hover,\\r\\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > svg:hover {\\r\\n  fill: none;\\r\\n  color: #444;\\r\\n}\\r\\n\\r\\n@keyframes rotation {\\r\\n  from {\\r\\n    transform: rotate(0deg);\\r\\n  }\\r\\n  to {\\r\\n    transform: rotate(359deg);\\r\\n  }\\r\\n}\\r\\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync.syncing > span > svg,\\r\\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync.syncing > svg {\\r\\n  animation: rotation 2s infinite linear;\\r\\n}\\r\\n\\r\\ndiv.file-info {\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\nspan.file-changed-type {\\r\\n  margin-right: 5px;\\r\\n}\\r\\nspan.file-name {\\r\\n  color: #333;\\r\\n}\\r\\n\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\"},\"$:/plugins/linonetwo/source-control-management/tab.js\":{\"title\":\"$:/plugins/linonetwo/source-control-management/tab.js\",\"text\":\"/*\\\\\\r\\nShow local git state and sync to git on click.\\r\\nRequires you are using TiddlyGit, and have install the \\\"Inject JS\\\" API with access to NodeJS and Electron API).\\r\\n\\r\\n\\\\*/\\r\\n(function () {\\r\\n  /*jslint node: true, browser: true */\\r\\n  /*global $tw: true */\\r\\n  'use strict';\\r\\n\\r\\n  const Widget = require('$:/core/modules/widgets/widget.js').widget;\\r\\n\\r\\n  class NodeJSGitSyncSCMTabWidget extends Widget {\\r\\n    /**\\r\\n     * Lifecycle method: call this.initialise and super\\r\\n     */\\r\\n    constructor(parseTreeNode, options) {\\r\\n      super(parseTreeNode, options);\\r\\n      this.initialise(parseTreeNode, options);\\r\\n      this.state = {\\r\\n        needSetUp: false, // need to setup api, or just API missing\\r\\n\\r\\n        /**\\r\\n         * {\\r\\n         *   [folderName: string]: {\\r\\n         *      type: string,\\r\\n         *      fileRelativePath: string,\\r\\n         *      filePath: string,\\r\\n         *   }[]\\r\\n         * }\\r\\n         */\\r\\n        repoInfo: {},\\r\\n      };\\r\\n      this.checkInLoop();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Lifecycle method: Render this widget into the DOM\\r\\n     */\\r\\n    render(parent, nextSibling) {\\r\\n      // boilerplate\\r\\n      this.parentDomNode = parent;\\r\\n      this.computeAttributes();\\r\\n\\r\\n      // DOM\\r\\n      const container = this.document.createElement('div');\\r\\n      container.className = '';\\r\\n\\r\\n      // workspaces\\r\\n      for (const workspaceFullPath of Object.keys(this.state.repoInfo).sort((a, b) => a.length - b.length)) {\\r\\n        const changedFileInfoList = this.state.repoInfo[workspaceFullPath];\\r\\n\\r\\n        const workspaceInfoContainer = this.document.createElement('div');\\r\\n        const workspaceTitle = this.document.createElement('h4');\\r\\n        const workspaceTitleChangedCount = this.document.createElement('span');\\r\\n        workspaceTitleChangedCount.className = 'tiddlygit-scm-count';\\r\\n        workspaceTitleChangedCount.innerText = changedFileInfoList.length;\\r\\n\\r\\n        const workspaceName = workspaceFullPath.split('/').pop();\\r\\n        workspaceTitle.innerText = workspaceName;\\r\\n        workspaceTitle.appendChild(workspaceTitleChangedCount);\\r\\n        workspaceInfoContainer.appendChild(workspaceTitle);\\r\\n\\r\\n        // changed files\\r\\n        for (const changedFileInfo of changedFileInfoList) {\\r\\n          const fileInfoContainer = this.document.createElement('div');\\r\\n          fileInfoContainer.className = 'file-info';\\r\\n          const fileChangedTypeElement = this.document.createElement('span');\\r\\n          fileChangedTypeElement.className = 'file-changed-type';\\r\\n          fileChangedTypeElement.innerText = this.mapChangeTypeToText(changedFileInfo.type);\\r\\n\\r\\n          const fileNameElement = this.document.createElement('a');\\r\\n          fileNameElement.className = 'file-name tc-tiddlylink tc-tiddlylink-resolves tc-popup-handle tc-popup-absolute';\\r\\n          const correctPath = this.getPathByTitle(changedFileInfo.fileRelativePath);\\r\\n          fileNameElement.innerText = correctPath;\\r\\n          fileNameElement.href = `#${correctPath}`;\\r\\n\\r\\n          fileInfoContainer.appendChild(fileChangedTypeElement);\\r\\n          fileInfoContainer.appendChild(fileNameElement);\\r\\n          workspaceInfoContainer.appendChild(fileInfoContainer);\\r\\n        }\\r\\n\\r\\n        container.appendChild(workspaceInfoContainer);\\r\\n      }\\r\\n\\r\\n      parent.insertBefore(container, nextSibling);\\r\\n      this.domNodes.push(container);\\r\\n    }\\r\\n\\r\\n    getPathByTitle(fileRelativePath) {\\r\\n      if (fileRelativePath.startsWith('plugins')) {\\r\\n        return `$:/${fileRelativePath}`;\\r\\n      } else if (fileRelativePath.startsWith('tiddlers/')) {\\r\\n        return fileRelativePath.replace('tiddlers/', '').replace(/\\\\.tid$/, '');\\r\\n      }\\r\\n      return fileRelativePath;\\r\\n    }\\r\\n\\r\\n    async getFolderInfo() {\\r\\n      const list = await window.service.workspace.getWorkspacesAsList();\\r\\n      return list.map(({ wikiFolderLocation: wikiPath, gitUrl }) => ({ wikiPath, gitUrl }));\\r\\n    }\\r\\n\\r\\n    mapChangeTypeToText(changedType) {\\r\\n      switch (changedType) {\\r\\n        case '??':\\r\\n          return '+';\\r\\n\\r\\n        default:\\r\\n          return changedType;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Check state every a few time\\r\\n     */\\r\\n    async checkInLoop() {\\r\\n      // check if API from TiddlyGit is available, first time it is Server Side Rendening so window.xxx from the electron ContextBridge will be missing\\r\\n      if (\\r\\n        !window.service.git ||\\r\\n        typeof window.service.git.commitAndSync !== 'function' ||\\r\\n        typeof window.service.git.getModifiedFileList !== 'function' ||\\r\\n        typeof window.service.workspace.getWorkspacesAsList !== 'function'\\r\\n      ) {\\r\\n        this.state.needSetUp = true;\\r\\n      } else {\\r\\n        this.state.needSetUp = false;\\r\\n        this.checkGitState();\\r\\n      }\\r\\n      // TODO: only check when tab is just opened, wait for https://github.com/Jermolene/TiddlyWiki5/discussions/5945\\r\\n      // setTimeout(() => {\\r\\n      //   this.checkInLoop();\\r\\n      // }, this.state.interval);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  Check repo git sync state and count of uncommit things\\r\\n     */\\r\\n    async checkGitState() {\\r\\n      this.state.count = 0;\\r\\n      this.state.unsync = false;\\r\\n      this.state.repoInfo = {};\\r\\n\\r\\n      const folderInfo = await this.getFolderInfo();\\r\\n      await Promise.all(\\r\\n        folderInfo.map(async ({ wikiPath }) => {\\r\\n          const modifiedList = await window.service.git.getModifiedFileList(wikiPath);\\r\\n          modifiedList.sort((changedFileInfoA, changedFileInfoB) => changedFileInfoA.fileRelativePath > changedFileInfoB.fileRelativePath);\\r\\n          $tw.wiki.addTiddler({\\r\\n            title: `$:/state/scm-modified-file-list/${wikiPath}`,\\r\\n            text: JSON.stringify(modifiedList),\\r\\n          });\\r\\n          this.state.repoInfo[wikiPath] = modifiedList;\\r\\n        }),\\r\\n      );\\r\\n\\r\\n      return this.refreshSelf(); // method from super class, this is like React forceUpdate, we use it because it is not fully reactive on this.state change\\r\\n    }\\r\\n  }\\r\\n\\r\\n  exports['git-sync-scm-tab'] = NodeJSGitSyncSCMTabWidget;\\r\\n})();\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}